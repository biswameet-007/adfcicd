{
	"name": "dpRawStgWorkOrder_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "RawStgWorkOrder_ds",
						"type": "DatasetReference"
					},
					"name": "srcRawStgWorkOrder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynpMXMSTGWorkOrder",
						"type": "DatasetReference"
					},
					"name": "sinkRawStgWorkOrder",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "dCRawStgWorkOrder"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          JPNUM as string,",
				"          ASSETNUM as string,",
				"          ORGID as string,",
				"          SITEID as string,",
				"          LOCATION as string,",
				"          STATUS as string,",
				"          WORKTYPE as string,",
				"          TASKID as string,",
				"          ISTASK as string,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as string,",
				"          WOPRIORITY as string,",
				"          CHANGEDATE as string,",
				"          STATUSDATE as string,",
				"          CHANGEBY as string,",
				"          PMDUEDATE as string,",
				"          TARGSTARTDATE as string,",
				"          TARGCOMPDATE as string,",
				"          REPORTDATE as string,",
				"          RESPONDBY as string,",
				"          ESTDUR as string,",
				"          ACTLABHRS as string,",
				"          ACTSTART as string,",
				"          ACTFINISH as string,",
				"          ACTINTLABHRS as string,",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as string,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as string,",
				"          PMNUM as string,",
				"          WORKORDERID as string,",
				"          VECPROJECTTYPE as string,",
				"          WOLABLNK as string,",
				"          REPORTEDBY as string,",
				"          ONBEHALFOF as string,",
				"          OWNER as string,",
				"          ORIGRECORDID as string,",
				"          VECPWS as string,",
				"          VECPWSSITE as string,",
				"          FAILURECODE as string,",
				"          ESTLABCOST as string,",
				"          ESTMATCOST as string,",
				"          ACTLABCOST as string,",
				"          GENERATEDFORPO as string,",
				"          VECPROJECTNUM as string,",
				"          WBS as string,",
				"          WOCLASS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true) ~> srcRawStgWorkOrder",
				"srcRawStgWorkOrder derive(ENTRY_DT = currentTimestamp(),",
				"          ORGID = iifNull(ORGID, 'NA', ORGID),",
				"          SITEID = iifNull(SITEID, 'NA', SITEID),",
				"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
				"          JPNUM = iifNull(JPNUM, 'NA', JPNUM),",
				"          ASSETNUM = iifNull(ASSETNUM, 'NA', ASSETNUM),",
				"          STATUS = iifNull(STATUS, 'NA', STATUS),",
				"          WORKTYPE = iifNull(WORKTYPE, 'NA', WORKTYPE),",
				"          TASKID = iifNull(toInteger(TASKID), toInteger(-1), toInteger(TASKID)),",
				"          ISTASK = iifNull(toInteger(ISTASK), toInteger(-1), toInteger(ISTASK)),",
				"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
				"          WOPRIORITY = iifNull(toInteger(WOPRIORITY), toInteger(0), toInteger(WOPRIORITY)),",
				"          CHANGEDATE = iifNull(toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
				"          STATUSDATE = iifNull(toTimestamp(substring(STATUSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(STATUSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
				"          CHANGEBY = iifNull(CHANGEBY, 'NA', CHANGEBY),",
				"          REPORTDATE = iifNull(toTimestamp(substring(REPORTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(REPORTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
				"          RESPONDBY = iifNull(toTimestamp(substring(RESPONDBY, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(RESPONDBY, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
				"          ACTLABHRS = iifNull(toDecimal(ACTLABHRS), toDecimal(00.000), toDecimal(ACTLABHRS)),",
				"          ACTSTART = toTimestamp(substring(ACTSTART, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
				"          ACTFINISH = toTimestamp(substring(ACTFINISH, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
				"          ACTINTLABHRS = iifNull(toDecimal(ACTINTLABHRS), toDecimal(00.000), toDecimal(ACTINTLABHRS)),",
				"          WOGROUP = iifNull(WOGROUP, 'NA', WOGROUP),",
				"          PERSONGROUP = iifNull(PERSONGROUP, 'NA', PERSONGROUP),",
				"          OWNERGROUP = iifNull(OWNERGROUP, 'NA', OWNERGROUP),",
				"          ESTDUR = iifNull(toDecimal(ESTDUR), toDecimal(00.000), toDecimal(ESTDUR)),",
				"          PMDUEDATE = toTimestamp(substring(PMDUEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
				"          TARGSTARTDATE = toTimestamp(substring(TARGSTARTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
				"          TARGCOMPDATE = toTimestamp(substring(TARGCOMPDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
				"          PLUSCFREQUENCY = toInteger(PLUSCFREQUENCY),",
				"          PMNEXTDUEDATE = toDate(PMNEXTDUEDATE, 'yyyy-MM-dd'),",
				"          ESTLABCOST = iifNull(toDecimal(ESTLABCOST), toDecimal(00.000), toDecimal(ESTLABCOST)),",
				"          ESTMATCOST = iifNull(toDecimal(ESTMATCOST), toDecimal(00.000), toDecimal(ESTMATCOST)),",
				"          ACTLABCOST = iifNull(toDecimal(ACTLABCOST), toDecimal(00.000), toDecimal(ACTLABCOST)),",
				"          WOCLASS = iifNull(WOCLASS,'NA',WOCLASS)) ~> dCRawStgWorkOrder",
				"dCRawStgWorkOrder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGID as string,",
				"          SITEID as string,",
				"          LOCATION as string,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as integer,",
				"          WOPRIORITY as integer,",
				"          CHANGEDATE as timestamp,",
				"          STATUSDATE as timestamp,",
				"          CHANGEBY as string,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          RESPONDBY as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          ENTRY_DT as timestamp,",
				"          WO_ID as integer,",
				"          VECPROJECTTYPE as string,",
				"          WOLABLNK as string,",
				"          REPORTEDBY as string,",
				"          ONBEHALFOF as string,",
				"          OWNER as string,",
				"          ORIGRECORDID as string,",
				"          VECPWS as string,",
				"          VECPWSSITE as string,",
				"          FAILURECODE as string,",
				"          ESTLABCOST as decimal(18,6),",
				"          ESTMATCOST as decimal(18,6),",
				"          ACTLABCOST as decimal(18,6),",
				"          GENERATEDFORPO as string,",
				"          VECPROJECTNUM as string,",
				"          WBS as string,",
				"          WOCLASS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_fileSystem: 'raw',",
				"     rejectedData_folderPath: 'maximo/rejects',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGID,",
				"          SITEID,",
				"          LOCATION,",
				"          JPNUM,",
				"          ASSETNUM,",
				"          STATUS,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          CHANGEDATE,",
				"          STATUSDATE,",
				"          CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          RESPONDBY,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          ENTRY_DT,",
				"          WO_ID = WORKORDERID,",
				"          VECPROJECTTYPE,",
				"          WOLABLNK,",
				"          REPORTEDBY,",
				"          ONBEHALFOF,",
				"          OWNER,",
				"          ORIGRECORDID,",
				"          VECPWS,",
				"          VECPWSSITE,",
				"          FAILURECODE,",
				"          ESTLABCOST,",
				"          ESTMATCOST,",
				"          ACTLABCOST,",
				"          GENERATEDFORPO,",
				"          VECPROJECTNUM,",
				"          WBS,",
				"          WOCLASS",
				"     )) ~> sinkRawStgWorkOrder"
			]
		}
	}
}