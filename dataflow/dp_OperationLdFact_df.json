{
	"name": "dp_OperationLdFact_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzSnpMXMSTGAsset",
						"type": "DatasetReference"
					},
					"name": "srcOperationRead"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "OrgSiteRefRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "AssetRefRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "PersonRefRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "JobplanRefRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "PerGrpRefRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "MaxKey"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "OpsExistingRows"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "StgWoStatusRefRead"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "JobplanNullSiteRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "WorkOrderRefRead"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SinkOperationLd3",
						"type": "DatasetReference"
					},
					"name": "sinkOpsInsert"
				},
				{
					"dataset": {
						"referenceName": "SinkOperationLd3",
						"type": "DatasetReference"
					},
					"name": "sinkOperationUpdate",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "srtOperation"
				},
				{
					"name": "dcOps"
				},
				{
					"name": "selOperation"
				},
				{
					"name": "lkpOrgsiteoptn"
				},
				{
					"name": "lkpAssetOptn"
				},
				{
					"name": "lkpPersonOptn"
				},
				{
					"name": "lkpJobplanOptn"
				},
				{
					"name": "lkpPerGrpOptn"
				},
				{
					"name": "selOpsExistingRows"
				},
				{
					"name": "lkpExistOperation"
				},
				{
					"name": "joinMaxKey"
				},
				{
					"name": "skOperation"
				},
				{
					"name": "dcOperationInsert"
				},
				{
					"name": "alterRowOpsInsert"
				},
				{
					"name": "selectOps"
				},
				{
					"name": "lookupOpsStatusInd"
				},
				{
					"name": "selectOps2"
				},
				{
					"name": "splitOpsForUpdate"
				},
				{
					"name": "selOpsUpdate"
				},
				{
					"name": "dcOpsUpdate"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "splitJobPlan"
				},
				{
					"name": "unionJobplan"
				},
				{
					"name": "selectNullJPSite"
				},
				{
					"name": "selectJPNotNullSite"
				},
				{
					"name": "lkpJPNullSite"
				},
				{
					"name": "joinWorkOrder"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGID as string,",
				"          SITEID as string,",
				"          LOCATION_ID as integer,",
				"          STATUS as string,",
				"          ASSETNUM as string,",
				"          JPNUM as string,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as integer,",
				"          WOPRIORITY as integer,",
				"          WO_CHANGEDATE as timestamp,",
				"          STATUSDATE as timestamp,",
				"          WO_STATUS_CHANGEBY as string,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          WOSTATUSID as integer,",
				"          ACTLABHRS_HHMM as string,",
				"          ACTINTLABHRS_HHMM as string,",
				"          ESTDUR_HHMM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_COMMITTED',",
				"     query: 'SELECT \\nWO.WONUM AS WONUM,WO.PARENT AS PARENT,GOVTWONUM,WS.ORGID,WS.SITEID,LOCATION_ID,WS.STATUS AS STATUS,ASSETNUM,JPNUM, WS.CHANGEDATE AS WO_STATUS_CHANGEDATE,\\nWORKTYPE,TASKID,ISTASK, DESCRIPTION,PLUSCJPREVNUM,WOPRIORITY,WO.CHANGEDATE AS WO_CHANGEDATE,STATUSDATE,WS.CHANGEBY AS WO_STATUS_CHANGEBY, PMDUEDATE,\\nTARGSTARTDATE,TARGCOMPDATE,REPORTDATE,ACTLABHRS,ACTSTART, ACTFINISH,ACTINTLABHRS,ESTDUR,WOGROUP,PERSONGROUP,OWNERGROUP,PLUSCFREQUENCY,PLUSCFREQUNIT,\\nPMNEXTDUEDATE,PMNUM,WS.WOSTATUSID AS WOSTATUSID,ACTLABHRS_HHMM,ACTINTLABHRS_HHMM,ESTDUR_HHMM\\nFROM MXMDW.WORKORDER WO, MXMSTG.STG_WOSTATUS WS,MXMDW.SITE S\\n WHERE\\n WS.WONUM=WO.WONUM\\n AND S.SITE_NM=WS.SITEID\\n AND S.SITE_ID=WO.SITE_ID',",
				"     format: 'query',",
				"     staged: true) ~> srcOperationRead",
				"source(output(",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          ORGANIZATION_NM as string,",
				"          SITE_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
				"     format: 'query',",
				"     staged: true) ~> OrgSiteRefRd",
				"source(output(",
				"          ASSET_ID as integer,",
				"          ASSETNUM_ref as string,",
				"          SITE_ID_ref as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT ASSET_ID,ASSETNUM AS ASSETNUM_ref,SITE_ID AS SITE_ID_ref FROM MXMDW.ASSET',",
				"     format: 'query',",
				"     staged: true) ~> AssetRefRd",
				"source(output(",
				"          PERSON_ID as integer,",
				"          PERSON_NBR as string,",
				"          PrefSITE_ID as integer,",
				"          PrefORGANIZATION_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT PERSON_ID,PERSON_NBR,P.SITE_ID AS PrefSITE_ID,S.ORGANIZATION_ID AS PrefORGANIZATION_ID FROM \\nMXMDW.PERSON P,\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nO.ORGANIZATION_ID =S.ORGANIZATION_ID\\nAND S.SITE_ID=P.SITE_ID',",
				"     format: 'query',",
				"     staged: true) ~> PersonRefRd",
				"source(output(",
				"          JP_ID as integer,",
				"          JP_NUM as string,",
				"          JPRef_SITE_ID as integer,",
				"          JPRef_ORGANIZATION_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID>0',",
				"     format: 'query',",
				"     staged: true) ~> JobplanRefRd",
				"source(output(",
				"          PERSON_GROUP_ID as integer,",
				"          PERSON_GRP_CD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT PERSON_GROUP_ID,PERSON_GRP_CD FROM MXMDW.PERSON_GROUP',",
				"     format: 'query',",
				"     staged: true) ~> PerGrpRefRd",
				"source(output(",
				"          MAXKEY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_ID),0) FROM  MXMDW.OPERATION',",
				"     format: 'query',",
				"     staged: true) ~> MaxKey",
				"source(output(",
				"          OPERATION_ID as integer,",
				"          WONUM as string,",
				"          SITE_ID as integer,",
				"          STATUS as string,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          SNAPSHOT_DATE as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT OPERATION_ID, WONUM,SITE_ID,STATUS,WO_STATUS_CHANGEDATE,SNAPSHOT_DATE FROM MXMDW.OPERATION WHERE CURRENT_RECORD_IND=1',",
				"     format: 'query',",
				"     staged: true,",
				"     partitionBy('hash', 1)) ~> OpsExistingRows",
				"source(output(",
				"          RefWONUM as string,",
				"          RefSITE_ID as integer,",
				"          FLAG as string,",
				"          RefWOSTATUSID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT WS.WONUM AS RefWONUM,S.SITE_ID AS RefSITE_ID,\\'1\\' AS FLAG,MAX(WS.WOSTATUSID) AS RefWOSTATUSID FROM MXMSTG.STG_WOSTATUS WS,\\nMXMDW.SITE S\\nWHERE\\nWS.SITEID=S.SITE_NM  GROUP BY  WS.WONUM,S.SITE_ID',",
				"     format: 'query',",
				"     staged: true) ~> StgWoStatusRefRead",
				"source(output(",
				"          JP_ID as integer,",
				"          JP_NUM as string,",
				"          JPRef_SITE_ID as integer,",
				"          JPRef_ORGANIZATION_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID<0',",
				"     format: 'query',",
				"     staged: true) ~> JobplanNullSiteRd",
				"source(output(",
				"          WORKORDER_ID as integer,",
				"          WO_WONUM as string,",
				"          WO_SITE_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT WORKORDER_ID,WONUM AS WO_WONUM,SITE_ID AS WO_SITE_ID FROM MXMDW.WORKORDER',",
				"     format: 'query',",
				"     staged: true) ~> WorkOrderRefRead",
				"srcOperationRead sort(asc(WONUM, true),",
				"     asc(PARENT, true),",
				"     asc(ORGID, true),",
				"     asc(SITEID, true),",
				"     asc(WO_STATUS_CHANGEDATE, true),",
				"     caseInsensitive: true) ~> srtOperation",
				"lookupOpsStatusInd derive(CAL_PMDUEDT = iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),",
				"          WORKTYPE_CM_PM = case(\r",
				"     (WORKTYPE == 'CM' || WORKTYPE == 'DMO' || WORKTYPE == 'OWO' || WORKTYPE == 'SERV'), 'CM',\r",
				"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), 'PM',\r",
				"        (WORKTYPE == 'PJ' || WORKTYPE == 'PWO' ), 'PJ',\r",
				"        'OTHERS'  \r",
				"     ),",
				"          {REPORTMONTH_YEAR } = year(REPORTDATE),",
				"          REPORTDATE_MONTH = month(REPORTDATE),",
				"          REPORTDATE_CM_PM = case(     \r",
				"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),       \r",
				"        REPORTDATE  \r",
				"     ),",
				"          CURRENT_RECORD_IND = iifNull(toInteger(FLAG), 0, 1),",
				"          EFFECTIVE_DT = currentTimestamp(),",
				"          SNAPSHOT_DATE = toTimestamp(toString(WO_STATUS_CHANGEDATE, 'yyyy-MM-dd 00:00:00'),'yyyy-MM-dd HH:mm:ss'),",
				"          ASSET_ID = iifNull(ASSET_ID, toInteger(-1), ASSET_ID),",
				"          PERSON_ID = iifNull(PERSON_ID, toInteger(-1), PERSON_ID),",
				"          JP_ID = iifNull(JP_ID, toInteger(-1), JP_ID),",
				"          PERSON_GROUP_ID = iifNull(PERSON_GROUP_ID, toInteger(-1), PERSON_GROUP_ID),",
				"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID),",
				"          AVAILABLE_MANHOUR = toInteger(506),",
				"          PARENT_ACTLABHRS = toDecimal(0.0),",
				"          STATUS_FLAG = case(     \r",
				"     (STATUS == 'READY' || STATUS == 'CLOSE' || STATUS == 'CAN' || STATUS == 'COMP'), 2,1        \r",
				"     )) ~> dcOps",
				"joinMaxKey select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          LOCATION_ID,",
				"          STATUS,",
				"          WO_STATUS_CHANGEDATE,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCREVNUM = PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          STATUSDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          WO_CHANGEDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          WOGROUP,",
				"          CAL_PMDUEDT,",
				"          WORKTYPE_CM_PM,",
				"          {REPORTMONTH_YEAR },",
				"          REPORTDATE_MONTH,",
				"          REPORTDATE_CM_PM,",
				"          CURRENT_RECORD_IND,",
				"          EFFECTIVE_DT,",
				"          SNAPSHOT_DATE,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          PERSON_ID,",
				"          JP_ID,",
				"          PERSON_GROUP_ID,",
				"          PERSON_GROUP = PERSONGROUP,",
				"          ESTDUR,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          AVAILABLE_MANHOUR,",
				"          CURRENT_RECORD_IND,",
				"          PARENT_ACTLABHRS,",
				"          MAXKEY,",
				"          STATUS_FLAG,",
				"          WORKORDER_ID",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selOperation",
				"srtOperation, OrgSiteRefRd lookup(ORGID == ORGANIZATION_NM",
				"     && SITEID == SITE_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpOrgsiteoptn",
				"lkpOrgsiteoptn, AssetRefRd lookup(ASSETNUM == ASSETNUM_ref",
				"     && SITE_ID == SITE_ID_ref,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lkpAssetOptn",
				"lkpAssetOptn, PersonRefRd lookup(WO_STATUS_CHANGEBY == PERSON_NBR",
				"     && ORGANIZATION_ID == PrefORGANIZATION_ID",
				"     && SITE_ID == PrefSITE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lkpPersonOptn",
				"lkpPersonOptn, JobplanRefRd lookup(JPNUM == JP_NUM",
				"     && SITE_ID == JPRef_SITE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpJobplanOptn",
				"unionJobplan, PerGrpRefRd lookup(PERSONGROUP == PERSON_GRP_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpPerGrpOptn",
				"OpsExistingRows select(mapColumn(",
				"          ExistWONUM = WONUM,",
				"          ExistOPERATION_ID = OPERATION_ID,",
				"          ExistSITE_ID = SITE_ID,",
				"          ExistSTATUS = STATUS,",
				"          ExistWO_STATUS_CHANGEDATE = WO_STATUS_CHANGEDATE,",
				"          ExistSNAPSHOT_DATE = SNAPSHOT_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selOpsExistingRows",
				"selectOps2, selOpsExistingRows lookup(WONUM == ExistWONUM",
				"     && SITE_ID == ExistSITE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpExistOperation",
				"lkpExistOperation, MaxKey join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxKey",
				"selOperation keyGenerate(output(NewOPERATION_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L,",
				"     partitionBy('hash', 1)) ~> skOperation",
				"skOperation derive(OPERATION_ID = MAXKEY + NewOPERATION_ID) ~> dcOperationInsert",
				"dcOperationInsert alterRow(insertIf(1==1)) ~> alterRowOpsInsert",
				"joinWorkOrder select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          STATUS,",
				"          ASSETNUM,",
				"          JPNUM,",
				"          WO_STATUS_CHANGEDATE,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          WO_CHANGEDATE,",
				"          STATUSDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          WOSTATUSID,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          ORGANIZATION_NM,",
				"          SITE_NM,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          ASSETNUM_ref,",
				"          SITE_ID_ref,",
				"          PERSON_ID,",
				"          PERSON_NBR,",
				"          JP_ID,",
				"          JP_NUM,",
				"          PERSON_GROUP_ID,",
				"          WORKORDER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOps",
				"selectOps, StgWoStatusRefRead lookup(WONUM == RefWONUM",
				"     && SITE_ID == RefSITE_ID",
				"     && WOSTATUSID == RefWOSTATUSID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 4,",
				"          WONUM,",
				"          SITE_ID,",
				"          WOSTATUSID",
				"     ),",
				"     broadcast: 'both')~> lookupOpsStatusInd",
				"dcOps select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          STATUS,",
				"          ASSETNUM,",
				"          JPNUM,",
				"          WO_STATUS_CHANGEDATE,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          WO_CHANGEDATE,",
				"          STATUSDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          ORGANIZATION_NM,",
				"          SITE_NM,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          ASSETNUM_ref,",
				"          SITE_ID_ref,",
				"          PERSON_ID,",
				"          PERSON_NBR,",
				"          JP_ID,",
				"          JP_NUM,",
				"          PERSON_GROUP_ID,",
				"          CAL_PMDUEDT,",
				"          WORKTYPE_CM_PM,",
				"          {REPORTMONTH_YEAR },",
				"          REPORTDATE_MONTH,",
				"          REPORTDATE_CM_PM,",
				"          CURRENT_RECORD_IND,",
				"          EFFECTIVE_DT,",
				"          SNAPSHOT_DATE,",
				"          AVAILABLE_MANHOUR,",
				"          PARENT_ACTLABHRS,",
				"          STATUS_FLAG,",
				"          WORKORDER_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOps2",
				"lkpExistOperation split(!isNull(ExistOPERATION_ID),",
				"     disjoint: false) ~> splitOpsForUpdate@(UpdateCurrRecInd, DoNotReprocessNewRecords)",
				"splitOpsForUpdate@UpdateCurrRecInd select(mapColumn(",
				"          WONUM,",
				"          SITE_ID,",
				"          CURRENT_RECORD_IND,",
				"          SNAPSHOT_DATE,",
				"          ExistWONUM,",
				"          ExistOPERATION_ID,",
				"          ExistSITE_ID,",
				"          ExistSNAPSHOT_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selOpsUpdate",
				"selOpsUpdate derive(NewCURRENT_RECORD_IND = toInteger(0)) ~> dcOpsUpdate",
				"dcOpsUpdate alterRow(updateIf(CURRENT_RECORD_IND==1)) ~> alterRowUpdate",
				"lkpJobplanOptn split(isNull(JP_ID),",
				"     disjoint: false) ~> splitJobPlan@(NullJobPlanSite, NotNullJobPlanSite)",
				"selectNullJPSite, selectJPNotNullSite union(byName: true)~> unionJobplan",
				"lkpJPNullSite select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGID,",
				"          SITEID,",
				"          STATUS,",
				"          ASSETNUM,",
				"          JPNUM,",
				"          WO_STATUS_CHANGEDATE,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          WO_CHANGEDATE,",
				"          STATUSDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          WOSTATUSID,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          ORGANIZATION_NM,",
				"          SITE_NM,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          ASSETNUM_ref,",
				"          SITE_ID_ref,",
				"          PERSON_ID,",
				"          PERSON_NBR,",
				"          JP_NUM = JPNUM,",
				"          JPRef_SITE_ID = splitJobPlan@NullJobPlanSite@JPRef_SITE_ID,",
				"          JPRef_ORGANIZATION_ID = splitJobPlan@NullJobPlanSite@JPRef_ORGANIZATION_ID,",
				"          JP_ID = JobplanNullSiteRd@JP_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNullJPSite",
				"splitJobPlan@NotNullJobPlanSite select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGID,",
				"          SITEID,",
				"          STATUS,",
				"          ASSETNUM,",
				"          JPNUM,",
				"          WO_STATUS_CHANGEDATE,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          WO_CHANGEDATE,",
				"          STATUSDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          ORGANIZATION_NM,",
				"          SITE_NM,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          ASSETNUM_ref,",
				"          SITE_ID_ref,",
				"          PERSON_ID,",
				"          PERSON_NBR,",
				"          JP_ID,",
				"          JP_NUM,",
				"          JPRef_SITE_ID,",
				"          JPRef_ORGANIZATION_ID,",
				"          WOSTATUSID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectJPNotNullSite",
				"splitJobPlan@NullJobPlanSite, JobplanNullSiteRd lookup(JPNUM == JobplanNullSiteRd@JP_NUM",
				"     && ORGANIZATION_ID == JobplanNullSiteRd@JPRef_ORGANIZATION_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpJPNullSite",
				"lkpPerGrpOptn, WorkOrderRefRead join(WONUM == WO_WONUM",
				"     && SITE_ID == WO_SITE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'both')~> joinWorkOrder",
				"alterRowOpsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OPERATION_ID as integer,",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          ASSET_ID as integer,",
				"          PERSON_ID as integer,",
				"          JP_ID as integer,",
				"          PERSON_GROUP_ID as integer,",
				"          STATUS as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJREVNUM as integer,",
				"          WOPRIORITY as string,",
				"          WO_CHANGEDATE as timestamp,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          WO_STATUS_CHANGEBY as string,",
				"          STATUSDATE as timestamp,",
				"          PMDUEDATE as timestamp,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSON_GROUP as string,",
				"          CAL_PMDUEDT as timestamp,",
				"          WORKTYPE_CM_PM as string,",
				"          REPORTMONTH_YEAR as string,",
				"          REPORTDATE_MONTH as string,",
				"          REPORTDATE_CM_PM as timestamp,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          AVAILABLE_MANHOUR as integer,",
				"          PARENT_ACTLABHRS as decimal(18,9),",
				"          SNAPSHOT_DATE as timestamp,",
				"          CURRENT_RECORD_IND as integer,",
				"          EFFECTIVE_DT as timestamp,",
				"          STATUS_FLAG as integer,",
				"          WORKORDER_ID as integer,",
				"          ACTLABHRS_HHMM as string,",
				"          ACTINTLABHRS_HHMM as string,",
				"          ESTDUR_HHMM as string,",
				"          PARENT_ACTLABHRS_HHMM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'allErrors',",
				"     transactionCommit: 'single',",
				"     reportSuccessOnError: false,",
				"     mapColumn(",
				"          OPERATION_ID,",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          ASSET_ID,",
				"          PERSON_ID,",
				"          JP_ID,",
				"          PERSON_GROUP_ID,",
				"          STATUS,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJREVNUM = PLUSCREVNUM,",
				"          WOPRIORITY,",
				"          WO_CHANGEDATE,",
				"          WO_STATUS_CHANGEDATE,",
				"          WO_STATUS_CHANGEBY,",
				"          STATUSDATE,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSON_GROUP,",
				"          CAL_PMDUEDT,",
				"          WORKTYPE_CM_PM,",
				"          REPORTMONTH_YEAR = {REPORTMONTH_YEAR },",
				"          REPORTDATE_MONTH,",
				"          REPORTDATE_CM_PM,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          AVAILABLE_MANHOUR,",
				"          PARENT_ACTLABHRS,",
				"          SNAPSHOT_DATE,",
				"          CURRENT_RECORD_IND,",
				"          EFFECTIVE_DT,",
				"          STATUS_FLAG,",
				"          WORKORDER_ID",
				"     )) ~> sinkOpsInsert",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OPERATION_ID as integer,",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          ASSET_ID as integer,",
				"          PERSON_ID as integer,",
				"          JP_ID as integer,",
				"          PERSON_GROUP_ID as integer,",
				"          STATUS as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJREVNUM as integer,",
				"          WOPRIORITY as string,",
				"          WO_CHANGEDATE as timestamp,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          WO_STATUS_CHANGEBY as string,",
				"          STATUSDATE as timestamp,",
				"          PMDUEDATE as timestamp,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSON_GROUP as string,",
				"          CAL_PMDUEDT as timestamp,",
				"          WORKTYPE_CM_PM as string,",
				"          REPORTMONTH_YEAR as string,",
				"          REPORTDATE_MONTH as string,",
				"          REPORTDATE_CM_PM as timestamp,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          AVAILABLE_MANHOUR as integer,",
				"          PARENT_ACTLABHRS as decimal(18,9),",
				"          SNAPSHOT_DATE as timestamp,",
				"          CURRENT_RECORD_IND as integer,",
				"          EFFECTIVE_DT as timestamp,",
				"          STATUS_FLAG as integer,",
				"          WORKORDER_ID as integer,",
				"          ACTLABHRS_HHMM as string,",
				"          ACTINTLABHRS_HHMM as string,",
				"          ESTDUR_HHMM as string,",
				"          PARENT_ACTLABHRS_HHMM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['OPERATION_ID'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_fileSystem: 'raw',",
				"     rejectedData_folderPath: 'maximo/rejects',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          OPERATION_ID = ExistOPERATION_ID,",
				"          CURRENT_RECORD_IND = NewCURRENT_RECORD_IND",
				"     )) ~> sinkOperationUpdate"
			]
		}
	}
}