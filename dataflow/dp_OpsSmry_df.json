{
	"name": "dp_OpsSmry_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd",
						"type": "DatasetReference"
					},
					"name": "srcOpsSmryRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd",
						"type": "DatasetReference"
					},
					"name": "ExistingRows"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd",
						"type": "DatasetReference"
					},
					"name": "MaxSKey"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd",
						"type": "DatasetReference"
					},
					"name": "LocationRefRd"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sinkOperationSmryLd",
						"type": "DatasetReference"
					},
					"name": "sinkOpsSmryLdInsert"
				},
				{
					"dataset": {
						"referenceName": "sinkOperationSmryLd",
						"type": "DatasetReference"
					},
					"name": "sinkOpsSmryUpdate"
				}
			],
			"transformations": [
				{
					"name": "dcOpsSmry"
				},
				{
					"name": "SKOpsSmry"
				},
				{
					"name": "dcWoAge"
				},
				{
					"name": "dcISbacklog"
				},
				{
					"name": "selOpsSmry"
				},
				{
					"name": "dcNewHashKey"
				},
				{
					"name": "existsOpsSmry"
				},
				{
					"name": "lookupOpsSmry"
				},
				{
					"name": "splitOpsSmry"
				},
				{
					"name": "joinMaxSK"
				},
				{
					"name": "dcInsertItem"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "joinLocation"
				},
				{
					"name": "selOpsSmryUpdate"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "dcOpsSmryUpdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WORK_ORDER as string,",
				"          GOVT_WO as string,",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          DESCRIPTION as string,",
				"          LOCATION_ID as integer,",
				"          ASSET as string,",
				"          ASSET_ID as integer,",
				"          REPORTED_DATE as timestamp,",
				"          PRIORITY as string,",
				"          STATUS as string,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          TARGET_START_DT as timestamp,",
				"          TARGET_FINISH_DT as timestamp,",
				"          WORK_GROUP as string,",
				"          WORK_TYPE as string,",
				"          PM_DUE_DT as timestamp,",
				"          SITE as string,",
				"          WORKTYPE_CM_PM as string,",
				"          PERSON_GROUP_ID as integer,",
				"          SNAPSHOT_DT as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION_ID AS LOCATION_ID,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.PERSON_GROUP_ID AS PERSON_GROUP_ID,OPS.SNAPSHOT_DATE AS SNAPSHOT_DT\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nAND OPS.CURRENT_RECORD_IND=1\\n--AND OPS.EFFECTIVE_DT>= CONVERT (DATE, SYSDATETIME())\\nAND OPS.EFFECTIVE_DT= (SELECT MAX(EFFECTIVE_DT) FROM MXMDW.OPERATION)\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n',",
				"     format: 'query',",
				"     staged: true) ~> srcOpsSmryRd",
				"source(output(",
				"          ExistOPERATION_SUMMARY_ID as integer,",
				"          ExistWORK_ORDER as string,",
				"          ExistSITE as string,",
				"          ExistSRC_TYPE_HASH_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SITE AS ExistSITE,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
				"     format: 'query',",
				"     staged: true) ~> ExistingRows",
				"source(output(",
				"          MAXKEY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
				"     format: 'query',",
				"     staged: true) ~> MaxSKey",
				"source(output(",
				"          RefLOCATION_ID as integer,",
				"          LOCATION as string,",
				"          RefSITE_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT LOCATION_ID AS RefLOCATION_ID,LOCATION,SITE_ID AS RefSITE_ID FROM MXMDW.LOCATIONS',",
				"     format: 'query',",
				"     staged: true) ~> LocationRefRd",
				"joinLocation derive(WO_OPEN_DT = REPORTED_DATE,",
				"          WO_DUE_DT = case(\r",
				"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
				"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
				"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
				"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"CM\"), addDays(REPORTED_DATE,90),\r",
				"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"PM\"), addDays(REPORTED_DATE,45),\r",
				"REPORTED_DATE\r",
				"),",
				"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
				"    (PRIORITY == \"1\"), 1,\r",
				"    (PRIORITY == \"2\"), 7,\r",
				"    (PRIORITY == \"3\"), 30,\r",
				"    (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"CM\"), 90,\r",
				"     (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"PM\"), 45,\r",
				"     0\r",
				"),",
				"          WO_CLOSE_DT = case\r",
				"(\r",
				"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
				"    ),",
				"          PRIORITY = toInteger(PRIORITY),",
				"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
				"joinMaxSK keyGenerate(output(NewOPERATION_SUMMARY_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SKOpsSmry",
				"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
				"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
				"dcWoAge derive(IS_BACKLOG = case\r",
				"(\r",
				"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
				"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
				"     'Yes' ),",
				"          WO_AGE_SEGMENT = case\r",
				"(\r",
				"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
				"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
				"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
				"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
				"     'Above 90 Days' \r",
				"     )) ~> dcISbacklog",
				"dcNewHashKey select(mapColumn(",
				"          WORK_ORDER,",
				"          GOVT_WO,",
				"          DESCRIPTION,",
				"          LOCATION_ID,",
				"          LOCATION,",
				"          ASSET,",
				"          REPORTED_DATE,",
				"          PRIORITY,",
				"          WO_STATUS_CHANGEDATE,",
				"          STATUS,",
				"          TARGET_START_DT,",
				"          TARGET_FINISH_DT,",
				"          WORK_GROUP,",
				"          WORK_TYPE,",
				"          PM_DUE_DT,",
				"          SITE,",
				"          SITE_ID,",
				"          WORKTYPE_CM_PM,",
				"          PERSON_GROUP_ID,",
				"          WO_OPEN_DT,",
				"          WO_DUE_DT,",
				"          WO_PRIORITY_THRESHOLD_DAYS,",
				"          WO_CLOSE_DT,",
				"          WO_AGE,",
				"          IS_BACKLOG,",
				"          WO_AGE_SEGMENT,",
				"          SRC_TYPE_HASH_KEY,",
				"          SNAPSHOT_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
				"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,SITE,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
				"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY",
				"     && WORK_ORDER == ExistWORK_ORDER",
				"     && SITE == ExistSITE,",
				"     negate:true,",
				"     partitionBy('hash', 4,",
				"          WORK_ORDER,",
				"          SITE",
				"     ),",
				"     broadcast: 'right')~> existsOpsSmry",
				"existsOpsSmry, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER",
				"     && SITE == ExistSITE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupOpsSmry",
				"lookupOpsSmry split(isNull(ExistOPERATION_SUMMARY_ID),",
				"     disjoint: false) ~> splitOpsSmry@(NewItem, UpdateItem)",
				"splitOpsSmry@NewItem, MaxSKey join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxSK",
				"SKOpsSmry derive(NewOPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID + MAXKEY,",
				"          ACTLABHRS = toDecimal(0.00),",
				"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertItem",
				"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
				"srcOpsSmryRd, LocationRefRd join(LOCATION_ID == RefLOCATION_ID",
				"     && SITE_ID == RefSITE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocation",
				"splitOpsSmry@UpdateItem select(mapColumn(",
				"          WORK_ORDER,",
				"          GOVT_WO,",
				"          DESCRIPTION,",
				"          LOCATION_ID,",
				"          LOCATION,",
				"          ASSET,",
				"          REPORTED_DATE,",
				"          PRIORITY,",
				"          WO_STATUS_CHANGEDATE,",
				"          STATUS,",
				"          TARGET_START_DT,",
				"          TARGET_FINISH_DT,",
				"          WORK_GROUP,",
				"          WORK_TYPE,",
				"          PM_DUE_DT,",
				"          SITE,",
				"          SITE_ID,",
				"          WORKTYPE_CM_PM,",
				"          PERSON_GROUP_ID,",
				"          WO_OPEN_DT,",
				"          WO_DUE_DT,",
				"          WO_PRIORITY_THRESHOLD_DAYS,",
				"          WO_CLOSE_DT,",
				"          WO_AGE,",
				"          IS_BACKLOG,",
				"          WO_AGE_SEGMENT,",
				"          SRC_TYPE_HASH_KEY,",
				"          SNAPSHOT_DT,",
				"          ExistOPERATION_SUMMARY_ID,",
				"          ExistWORK_ORDER,",
				"          ExistSITE,",
				"          ExistSRC_TYPE_HASH_KEY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selOpsSmryUpdate",
				"dcOpsSmryUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
				"selOpsSmryUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcOpsSmryUpdate",
				"alterRowInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OPERATION_SUMMARY_ID as integer,",
				"          WORK_ORDER as string,",
				"          GOVT_WO as string,",
				"          DESCRIPTION as string,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          LOCATION as string,",
				"          ASSET as string,",
				"          REPORTED_DATE as timestamp,",
				"          PRIORITY as integer,",
				"          STATUS as string,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          TARGET_START_DT as timestamp,",
				"          TARGET_FINISH_DT as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          WORK_GROUP as string,",
				"          WORK_TYPE as string,",
				"          PM_DUE_DT as timestamp,",
				"          SITE as string,",
				"          WO_OPEN_DT as timestamp,",
				"          WO_DUE_DT as timestamp,",
				"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
				"          WO_CLOSE_DT as timestamp,",
				"          WO_AGE as decimal(18,4),",
				"          WO_AGE_SEGMENT as string,",
				"          WORK_TYPE_CM_PM as string,",
				"          PERSON_GROUP_ID as integer,",
				"          IS_BACKLOG as string,",
				"          SNAPSHOT_DT as timestamp,",
				"          SRC_TYPE_HASH_KEY as string,",
				"          EFFECTIVE_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID,",
				"          WORK_ORDER,",
				"          GOVT_WO,",
				"          DESCRIPTION,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          LOCATION,",
				"          ASSET,",
				"          REPORTED_DATE,",
				"          WO_STATUS_CHANGEDATE,",
				"          PRIORITY,",
				"          STATUS,",
				"          TARGET_START_DT,",
				"          TARGET_FINISH_DT,",
				"          ACTLABHRS,",
				"          WORK_GROUP,",
				"          WORK_TYPE,",
				"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
				"          PM_DUE_DT,",
				"          SITE,",
				"          WO_OPEN_DT,",
				"          WO_DUE_DT,",
				"          WO_PRIORITY_THRESHOLD_DAYS,",
				"          WO_CLOSE_DT,",
				"          IS_BACKLOG,",
				"          WO_AGE,",
				"          WO_AGE_SEGMENT,",
				"          PERSON_GROUP_ID,",
				"          SRC_TYPE_HASH_KEY,",
				"          SNAPSHOT_DT,",
				"          EFFECTIVE_DT",
				"     )) ~> sinkOpsSmryLdInsert",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OPERATION_SUMMARY_ID as integer,",
				"          WORK_ORDER as string,",
				"          GOVT_WO as string,",
				"          DESCRIPTION as string,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          LOCATION as string,",
				"          ASSET as string,",
				"          REPORTED_DATE as timestamp,",
				"          PRIORITY as integer,",
				"          STATUS as string,",
				"          WO_STATUS_CHANGEDATE as timestamp,",
				"          TARGET_START_DT as timestamp,",
				"          TARGET_FINISH_DT as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          WORK_GROUP as string,",
				"          WORK_TYPE as string,",
				"          PM_DUE_DT as timestamp,",
				"          SITE as string,",
				"          WO_OPEN_DT as timestamp,",
				"          WO_DUE_DT as timestamp,",
				"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
				"          WO_CLOSE_DT as timestamp,",
				"          WO_AGE as decimal(18,4),",
				"          WO_AGE_SEGMENT as string,",
				"          WORK_TYPE_CM_PM as string,",
				"          PERSON_GROUP_ID as integer,",
				"          IS_BACKLOG as string,",
				"          SNAPSHOT_DT as timestamp,",
				"          SRC_TYPE_HASH_KEY as string,",
				"          EFFECTIVE_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['OPERATION_SUMMARY_ID'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OPERATION_SUMMARY_ID = ExistOPERATION_SUMMARY_ID,",
				"          WORK_ORDER = ExistWORK_ORDER,",
				"          SITE = ExistSITE,",
				"          GOVT_WO,",
				"          DESCRIPTION,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          LOCATION,",
				"          ASSET,",
				"          REPORTED_DATE,",
				"          PRIORITY,",
				"          STATUS,",
				"          WO_STATUS_CHANGEDATE,",
				"          TARGET_START_DT,",
				"          TARGET_FINISH_DT,",
				"          WORK_GROUP,",
				"          WORK_TYPE,",
				"          PM_DUE_DT,",
				"          WO_OPEN_DT,",
				"          WO_DUE_DT,",
				"          WO_PRIORITY_THRESHOLD_DAYS,",
				"          WO_CLOSE_DT,",
				"          WO_AGE,",
				"          WO_AGE_SEGMENT,",
				"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
				"          PERSON_GROUP_ID,",
				"          IS_BACKLOG,",
				"          SNAPSHOT_DT,",
				"          SRC_TYPE_HASH_KEY,",
				"          EFFECTIVE_DT",
				"     )) ~> sinkOpsSmryUpdate"
			]
		}
	}
}