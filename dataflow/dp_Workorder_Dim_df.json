{
	"name": "dp_Workorder_Dim_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "srcStgWorkorder",
						"type": "DatasetReference"
					},
					"name": "srcStgWorkorderRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "OrgSiteRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "LocationRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "MAXKEY"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "ExistingRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SinkWorkorder1",
						"type": "DatasetReference"
					},
					"name": "sinkInsertWorkorder",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "SinkWorkorder1",
						"type": "DatasetReference"
					},
					"name": "sinkUpdateWorkorder",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "lkpOrgSite"
				},
				{
					"name": "lkpLocation"
				},
				{
					"name": "selExistingRecords"
				},
				{
					"name": "dCNewHashKey"
				},
				{
					"name": "existsWorkorder"
				},
				{
					"name": "lkpExistWo"
				},
				{
					"name": "NewItem"
				},
				{
					"name": "joinMaxKey"
				},
				{
					"name": "skWo"
				},
				{
					"name": "dcInsertWo"
				},
				{
					"name": "selInsertWo"
				},
				{
					"name": "dcUpdateWo"
				},
				{
					"name": "selUpdateWo"
				},
				{
					"name": "alterRowUpdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGID as string,",
				"          SITEID as string,",
				"          LOCATION as string,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as integer,",
				"          WOPRIORITY as integer,",
				"          CHANGEDATE as timestamp,",
				"          STATUSDATE as timestamp,",
				"          CHANGEBY as string,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          RESPONDBY as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          ENTRY_DT as timestamp,",
				"          WO_ID as integer,",
				"          VECPROJECTTYPE as string,",
				"          WOLABLNK as string,",
				"          REPORTEDBY as string,",
				"          ONBEHALFOF as string,",
				"          OWNER as string,",
				"          ORIGRECORDID as string,",
				"          VECPWS as string,",
				"          VECPWSSITE as string,",
				"          FAILURECODE as string,",
				"          ESTLABCOST as decimal(18,6),",
				"          ESTMATCOST as decimal(18,6),",
				"          ACTLABCOST as decimal(18,6),",
				"          GENERATEDFORPO as string,",
				"          VECPROJECTNUM as string,",
				"          WBS as string,",
				"          WOCLASS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> srcStgWorkorderRd",
				"source(output(",
				"          ORGANIZATION_ID as integer,",
				"          ORGANIZATION_NM as string,",
				"          SITE_ID as integer,",
				"          SITE_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,O.ORGANIZATION_NM AS ORGANIZATION_NM, S.SITE_ID AS SITE_ID,S.SITE_NM AS SITE_NM\\nFROM MXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE O.ORGANIZATION_ID = S.ORGANIZATION_ID',",
				"     format: 'query',",
				"     staged: true) ~> OrgSiteRef",
				"source(output(",
				"          LOCATION_ID as integer,",
				"          DIM_LOCATION as string,",
				"          LOCATION_DESC as string,",
				"          LOC_SITE_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
				"     format: 'query',",
				"     staged: true,",
				"     partitionBy('hash', 1)) ~> LocationRef",
				"source(output(",
				"          MAXKEY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT MAXKEY=ISNULL(MAX(WORKORDER_ID),0) FROM  MXMDW.WORKORDER',",
				"     format: 'query',",
				"     staged: true) ~> MAXKEY",
				"source(output(",
				"          WORKORDER_ID as integer,",
				"          WONUM as string,",
				"          PARENT as string,",
				"          SITE_ID as integer,",
				"          STATUS as string,",
				"          STATUSDATE as timestamp,",
				"          SRC_TYPE_HASH_KEY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT WORKORDER_ID,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,SRC_TYPE_HASH_KEY FROM MXMDW.WORKORDER',",
				"     format: 'query',",
				"     staged: true) ~> ExistingRecords",
				"srcStgWorkorderRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
				"     && SITEID == SITE_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'both')~> lkpOrgSite",
				"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
				"     && SITEID == LOC_SITE_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'both')~> lkpLocation",
				"ExistingRecords select(mapColumn(",
				"          ExistWORKORDER_ID = WORKORDER_ID,",
				"          ExistWONUM = WONUM,",
				"          ExistPARENT = PARENT,",
				"          ExistSITE_ID = SITE_ID,",
				"          ExistSTATUS = STATUS,",
				"          ExistSTATUSDATE = STATUSDATE,",
				"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
				"lkpLocation derive(SRC_TYPE_HASH_KEY = sha2(256,WONUM,SITE_ID,STATUS,STATUSDATE,CHANGEDATE,ORIGRECORDID,VECPWS),",
				"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID),",
				"          ACTLABHRS_HHMM = replace(iif(ACTLABHRS==0.000000000,'00:00',concat(substringIndex(toString(ACTLABHRS), '.', 1),':',toString(round(60 * (ACTLABHRS - toInteger(substringIndex(toString(ACTLABHRS), '.', 1))))))),':-',':'),",
				"          ACTINTLABHRS_HHMM = replace(iif(ACTINTLABHRS==0.000000000,'00:00',concat(substringIndex(toString(ACTINTLABHRS), '.', 1),':',toString(round(60 * (ACTINTLABHRS - toInteger(substringIndex(toString(ACTINTLABHRS), '.', 1))))))),':-',':'),",
				"          ESTDUR_HHMM = replace(iif(ESTDUR==0.000000000,'00:00',concat(substringIndex(toString(ESTDUR), '.', 1),':',toString(round(60 * (ESTDUR - toInteger(substringIndex(toString(ESTDUR), '.', 1))))))),':-',':')) ~> dCNewHashKey",
				"dCNewHashKey, selExistingRecords exists(WONUM == ExistWONUM",
				"     && SITE_ID == ExistSITE_ID",
				"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
				"     negate:true,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'right')~> existsWorkorder",
				"existsWorkorder, selExistingRecords lookup(WONUM == ExistWONUM",
				"     && SITE_ID == ExistSITE_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpExistWo",
				"lkpExistWo split(isNull(ExistWORKORDER_ID),",
				"     disjoint: false,",
				"     partitionBy('hash', 1)) ~> NewItem@(NewItem, UpdateItem)",
				"NewItem@NewItem, MAXKEY join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> joinMaxKey",
				"joinMaxKey keyGenerate(output(NewWORKORDER_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> skWo",
				"skWo derive(WORKORDER_ID = MAXKEY + NewWORKORDER_ID,",
				"          EFFECTIVE_DT = currentTimestamp(),",
				"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcInsertWo",
				"dcInsertWo select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          CHANGEDATE,",
				"          STATUSDATE,",
				"          CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          RESPONDBY,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT,",
				"          WORKORDER_ID,",
				"          SRC_TYPE_HASH_KEY,",
				"          VECPROJECTTYPE,",
				"          WOLABLNK,",
				"          REPORTEDBY,",
				"          ONBEHALFOF,",
				"          OWNER,",
				"          ORIGRECORDID,",
				"          VECPWS,",
				"          VECPWSSITE,",
				"          FAILURECODE,",
				"          ESTLABCOST,",
				"          ESTMATCOST,",
				"          ACTLABCOST,",
				"          GENERATEDFORPO,",
				"          VECPROJECTNUM,",
				"          WBS,",
				"          WOCLASS,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selInsertWo",
				"NewItem@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateWo",
				"dcUpdateWo select(mapColumn(",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          CHANGEDATE,",
				"          STATUSDATE,",
				"          CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          RESPONDBY,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT,",
				"          SRC_TYPE_HASH_KEY,",
				"          VECPROJECTTYPE,",
				"          WOLABLNK,",
				"          REPORTEDBY,",
				"          ONBEHALFOF,",
				"          OWNER,",
				"          ORIGRECORDID,",
				"          VECPWS,",
				"          VECPWSSITE,",
				"          FAILURECODE,",
				"          ESTLABCOST,",
				"          ESTMATCOST,",
				"          ACTLABCOST,",
				"          GENERATEDFORPO,",
				"          VECPROJECTNUM,",
				"          WBS,",
				"          WOCLASS,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM,",
				"          ExistWORKORDER_ID,",
				"          ExistWONUM,",
				"          ExistSITE_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selUpdateWo",
				"selUpdateWo alterRow(updateIf(1==1)) ~> alterRowUpdate",
				"selInsertWo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          WORKORDER_ID as integer,",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as integer,",
				"          WOPRIORITY as integer,",
				"          CHANGEDATE as timestamp,",
				"          STATUSDATE as timestamp,",
				"          CHANGEBY as string,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          RESPONDBY as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          EFFECTIVE_DT as timestamp,",
				"          SRC_TYPE_HASH_KEY as string,",
				"          VECPROJECTTYPE as string,",
				"          WOLABLNK as string,",
				"          REPORTEDBY as string,",
				"          ONBEHALFOF as string,",
				"          OWNER as string,",
				"          ORIGRECORDID as string,",
				"          VECPWS as string,",
				"          VECPWSSITE as string,",
				"          FAILURECODE as string,",
				"          ESTLABCOST as decimal(18,6),",
				"          ESTMATCOST as decimal(18,6),",
				"          ACTLABCOST as decimal(18,6),",
				"          GENERATEDFORPO as string,",
				"          VECPROJECTNUM as string,",
				"          WBS as string,",
				"          WOCLASS as string,",
				"          ACTLABHRS_HHMM as string,",
				"          ACTINTLABHRS_HHMM as string,",
				"          ESTDUR_HHMM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_fileSystem: 'raw',",
				"     rejectedData_folderPath: 'maximo/rejects',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          WORKORDER_ID,",
				"          WONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          CHANGEDATE,",
				"          STATUSDATE,",
				"          CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          RESPONDBY,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT,",
				"          SRC_TYPE_HASH_KEY,",
				"          VECPROJECTTYPE,",
				"          WOLABLNK,",
				"          REPORTEDBY,",
				"          ONBEHALFOF,",
				"          OWNER,",
				"          ORIGRECORDID,",
				"          VECPWS,",
				"          VECPWSSITE,",
				"          FAILURECODE,",
				"          ESTLABCOST,",
				"          ESTMATCOST,",
				"          ACTLABCOST,",
				"          GENERATEDFORPO,",
				"          VECPROJECTNUM,",
				"          WBS,",
				"          WOCLASS",
				"     )) ~> sinkInsertWorkorder",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          WORKORDER_ID as integer,",
				"          WONUM as string,",
				"          PARENT as string,",
				"          GOVTWONUM as string,",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          TASKID as integer,",
				"          ISTASK as integer,",
				"          DESCRIPTION as string,",
				"          PLUSCJPREVNUM as integer,",
				"          WOPRIORITY as integer,",
				"          CHANGEDATE as timestamp,",
				"          STATUSDATE as timestamp,",
				"          CHANGEBY as string,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          RESPONDBY as timestamp,",
				"          ACTLABHRS as decimal(18,9),",
				"          ACTSTART as timestamp,",
				"          ACTFINISH as timestamp,",
				"          ACTINTLABHRS as decimal(18,9),",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          OWNERGROUP as string,",
				"          PLUSCFREQUENCY as integer,",
				"          PLUSCFREQUNIT as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          EFFECTIVE_DT as timestamp,",
				"          SRC_TYPE_HASH_KEY as string,",
				"          VECPROJECTTYPE as string,",
				"          WOLABLNK as string,",
				"          REPORTEDBY as string,",
				"          ONBEHALFOF as string,",
				"          OWNER as string,",
				"          ORIGRECORDID as string,",
				"          VECPWS as string,",
				"          VECPWSSITE as string,",
				"          FAILURECODE as string,",
				"          ESTLABCOST as decimal(18,6),",
				"          ESTMATCOST as decimal(18,6),",
				"          ACTLABCOST as decimal(18,6),",
				"          GENERATEDFORPO as string,",
				"          VECPROJECTNUM as string,",
				"          WBS as string,",
				"          WOCLASS as string,",
				"          ACTLABHRS_HHMM as string,",
				"          ACTINTLABHRS_HHMM as string,",
				"          ESTDUR_HHMM as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['WONUM','SITE_ID'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'allErrors',",
				"     outputRejectedData: true,",
				"     rejectedData_fileSystem: 'raw',",
				"     rejectedData_folderPath: 'maximo/rejects',",
				"     transactionCommit: 'batch',",
				"     reportSuccessOnError: true,",
				"     mapColumn(",
				"          WORKORDER_ID = ExistWORKORDER_ID,",
				"          WONUM = ExistWONUM,",
				"          PARENT,",
				"          GOVTWONUM,",
				"          ORGANIZATION_ID,",
				"          SITE_ID = ExistSITE_ID,",
				"          LOCATION_ID,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          TASKID,",
				"          ISTASK,",
				"          DESCRIPTION,",
				"          PLUSCJPREVNUM,",
				"          WOPRIORITY,",
				"          CHANGEDATE,",
				"          STATUSDATE,",
				"          CHANGEBY,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          RESPONDBY,",
				"          ACTLABHRS,",
				"          ACTSTART,",
				"          ACTFINISH,",
				"          ACTINTLABHRS,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          OWNERGROUP,",
				"          PLUSCFREQUENCY,",
				"          PLUSCFREQUNIT,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT,",
				"          SRC_TYPE_HASH_KEY,",
				"          VECPROJECTTYPE,",
				"          WOLABLNK,",
				"          REPORTEDBY,",
				"          ONBEHALFOF,",
				"          OWNER,",
				"          ORIGRECORDID,",
				"          VECPWS,",
				"          VECPWSSITE,",
				"          FAILURECODE,",
				"          ESTLABCOST,",
				"          ESTMATCOST,",
				"          ACTLABCOST,",
				"          GENERATEDFORPO,",
				"          VECPROJECTNUM,",
				"          WBS,",
				"          WOCLASS,",
				"          ACTLABHRS_HHMM,",
				"          ACTINTLABHRS_HHMM,",
				"          ESTDUR_HHMM",
				"     ),",
				"     partitionBy('roundRobin', 2)) ~> sinkUpdateWorkorder"
			]
		}
	}
}