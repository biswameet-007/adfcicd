{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureDataLakeStorage1": {
			"type": "string"
		},
		"dp_rawlandz_mxm_ls_db2_db": {
			"type": "string"
		},
		"AzureSynapseAnalytics1": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dpDailyIncrementalLoad_mxm_mstr_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the master pipeline which pulls Asset, Person, Jobplan,  location ,Work Order and Work Status from  maximo to raw zone",
				"activities": [
					{
						"name": "Asset pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Labtrans Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_mdasset_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Jobplan pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Location Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_rawlandz_mxm_mdjbp_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Location Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "person pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_loc_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "person pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Asset pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_mdperson_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "WorkOrderPipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_workorder_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Wo Status Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Jobplan pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_wostatus_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "copyMaximoFileInput_pln",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wo Status Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copyMaximoFileInput_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "dp_RawStg_Master_pln",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copyMaximoFileInput_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_Master_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "dp_Master_Dim_pln",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_RawStg_Master_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Master_Dim_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "dp_Ops_Smry_Master_Fact_pln",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_Master_Dim_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Ops_Smry_Master_Fact_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendDailySuccessMail1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wo Status Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendDailySuccessMail_rawz",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendFailureAlertMail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wo Status Pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendFailureAlertMail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendDailySuccessMail2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_RawStg_Master_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendDailySuccessMail_stgz",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendFailureAlertMail1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_RawStg_Master_pln",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendFailureAlertMail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendDailySuccessMail3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_Master_Dim_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendDailySuccessMail_refz",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendFailureAlertMail2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_Master_Dim_pln",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendFailureAlertMail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendFailureAlertMail3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_Ops_Smry_Master_Fact_pln",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendFailureAlertMail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "copyMaximoFileArchive_pln",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "dp_Ops_Smry_Master_Fact_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copyMaximoFileArchive_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "SendDailySuccessMail_consz",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copyMaximoFileArchive_pln",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendDailySuccessMail_consz",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Labtrans Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "WorkOrderPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dprawlandz_mxm_labtrans_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_mdasset_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_rawlandz_mxm_mdjbp_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_loc_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_mdperson_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_workorder_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_wostatus_pln')]",
				"[concat(variables('factoryId'), '/pipelines/copyMaximoFileInput_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_Master_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Master_Dim_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Ops_Smry_Master_Fact_pln')]",
				"[concat(variables('factoryId'), '/pipelines/SendDailySuccessMail_rawz')]",
				"[concat(variables('factoryId'), '/pipelines/SendFailureAlertMail')]",
				"[concat(variables('factoryId'), '/pipelines/SendDailySuccessMail_stgz')]",
				"[concat(variables('factoryId'), '/pipelines/SendDailySuccessMail_refz')]",
				"[concat(variables('factoryId'), '/pipelines/copyMaximoFileArchive_pln')]",
				"[concat(variables('factoryId'), '/pipelines/SendDailySuccessMail_consz')]",
				"[concat(variables('factoryId'), '/pipelines/dprawlandz_mxm_labtrans_pln')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_mdasset_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipline to transfer maximo Asset to raw landing zone.",
				"activities": [
					{
						"name": "dprawlandz_mxm_mdasset_act",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "raw/landing/maximo/asset_20220606.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select Maximo.Asset.ASSETNUM,Maximo.Asset.ASSETTAG, Maximo.Asset.LOCATION,REGEXP_REPLACE(Maximo.Asset.DESCRIPTION,'(\\n|,|\\r|\\r\\n|\")','') AS DESCRIPTION,Maximo.Asset.InstallDate,Maximo.asset.siteid,Maximo.Asset.orgid,Maximo.Asset.changedate from Maximo.Asset\nwhere date(changedate) = '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "[parameters('AzureDataLakeStorage1')]",
										"type": "LinkedServiceReference"
									},
									"path": {
										"value": "@pipeline().globalParameters.MaximoLog",
										"type": "Expression"
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dp_rawlandz_mxm_asset_source_ds",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "dp_rawlandz_mxm_asset_dest_ds",
								"type": "DatasetReference",
								"parameters": {
									"Output": {
										"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dp_rawlandz_mxm_asset_source_ds')]",
				"[concat(variables('factoryId'), '/datasets/dp_rawlandz_mxm_asset_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_mdjbp_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy jobplan from Maximo to Raw landing zone.",
				"activities": [
					{
						"name": "dprawlandz_mxm_mdjbpln_cpact1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "raw/landing/maximo/jobplan_20220606.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select Maximo.jobplan.JPNUM,REGEXP_REPLACE(Maximo.jobplan.DESCRIPTION,'(\\n|,|\\r|\\r\\n|\")','') AS DESCRIPTION,Maximo.jobplan.JPDURATION,Maximo.jobplan.STATUS,Maximo.jobplan.PRIORITY,Maximo.jobplan.JOBPLANID,Maximo.jobplan.DOWNTIME,Maximo.jobplan.LABORCODE,Maximo.jobplan.SITEID,Maximo.jobplan.ORGID,Maximo.jobplan.PERSONGROUP,Maximo.jobplan.PLUSCREVNUM,Maximo.jobplan.PLUSCCHANGEDATE from Maximo.jobplan where date(pluscchangedate) = '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "[parameters('AzureDataLakeStorage1')]",
										"type": "LinkedServiceReference"
									},
									"path": {
										"value": "@pipeline().globalParameters.MaximoLog",
										"type": "Expression"
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dp_rawlandz_mxm_jbpl_source_ds",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "dp_rawlandz_mxm_jpl_dest_ds",
								"type": "DatasetReference",
								"parameters": {
									"OutputPath": {
										"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dp_rawlandz_mxm_jbpl_source_ds')]",
				"[concat(variables('factoryId'), '/datasets/dp_rawlandz_mxm_jpl_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_loc_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy location from maximo to raw landing zone.",
				"activities": [
					{
						"name": "dprawlandz_mxm_loc-cp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "rawlandingmaximoworkorder/workorder_202206.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select Maximo.Locations.Location,REGEXP_REPLACE(Maximo.Locations.DESCRIPTION,'(\\n|,|\\r|\\r\\n|\")','') AS DESCRIPTION,Maximo.Locations.type,Maximo.Locations.changeby,Maximo.Locations.changedate,Maximo.Locations.status,Maximo.Locations.Statusdate,Maximo.Locations.siteid,Maximo.locations.orgid from Maximo.Locations\nwhere date(statusdate) = '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "[parameters('AzureDataLakeStorage1')]",
										"type": "LinkedServiceReference"
									},
									"path": {
										"value": "@pipeline().globalParameters.MaximoLog",
										"type": "Expression"
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dprawlandz_mxm_wo_source_ds",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "dprawlandz_mxm_wo_dest_ds",
								"type": "DatasetReference",
								"parameters": {
									"Outputpath": {
										"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wo_source_ds')]",
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wo_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_mdperson_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copying person master data from maximo to raw landing zone",
				"activities": [
					{
						"name": "dprawlandz_mxm_mdperson_act",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "raw/landing/maximo/person_20220606.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select Maximo.person.PERSONID,Maximo.person.FIRSTNAME,Maximo.person.LASTNAME,Maximo.person.STATUS,Maximo.person.DEPARTMENT,Maximo.person.TITLE,Maximo.person.EMPLOYEETYPE,Maximo.person.JOBCODE,Maximo.person.SUPERVISOR,Maximo.person.BIRTHDATE,Maximo.person.HIREDATE,Maximo.person.TERMINATIONDATE,Maximo.person.LOCATION,Maximo.person.LocationSite,Maximo.person.STATUSDATE from Maximo.person\n where date(statusdate) ='@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "dprawlandz_mxm_pers_source_ds",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "dprawlandz_mxm_pers_dest_ds",
								"type": "DatasetReference",
								"parameters": {
									"Output": {
										"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_pers_source_ds')]",
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_pers_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_workorder_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy data in bulk for workorder",
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().globalParameters.MaximoHistRangeInput",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "dprawlandz_mxm_wob_cpact",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "Db2Source",
											"query": {
												"value": "select Maximo.WorkOrder.WONUM,Maximo.WorkOrder.PARENT,Maximo.WorkOrder.GOVTWONUM,Maximo.WorkOrder.JPNUM,Maximo.WorkOrder.ASSETNUM,Maximo.WorkOrder.ORGID,Maximo.WorkOrder.SITEID,Maximo.WorkOrder.LOCATION,Maximo.WorkOrder.STATUS,Maximo.WorkOrder.WORKTYPE,Maximo.WorkOrder.TASKID,Maximo.WorkOrder.ISTASK,REGEXP_REPLACE(Maximo.WorkOrder.DESCRIPTION,'(\\n|,|\\r|\\r\\n|\"|\\\\|\\/)','') AS DESCRIPTION,Maximo.WorkOrder.PLUSCJPREVNUM,Maximo.WorkOrder.WOPRIORITY,Maximo.WorkOrder.CHANGEDATE,Maximo.WorkOrder.STATUSDATE,Maximo.WorkOrder.CHANGEBY,Maximo.WorkOrder.PMDUEDATE,Maximo.WorkOrder.TARGSTARTDATE,Maximo.WorkOrder.TARGCOMPDATE,Maximo.WorkOrder.REPORTDATE,Maximo.WorkOrder.RESPONDBY,Maximo.WorkOrder.estdur,Maximo.WorkOrder.ACTLABHRS,Maximo.WorkOrder.ACTSTART,Maximo.WorkOrder.ACTFINISH,Maximo.WorkOrder.ACTINTLABHRS,Maximo.WorkOrder.WOGROUP,Maximo.WorkOrder.PERSONGROUP,Maximo.WorkOrder.OWNERGROUP,Maximo.WorkOrder.PLUSCFREQUENCY,Maximo.WorkOrder.PLUSCFREQUNIT,Maximo.WorkOrder.PMNEXTDUEDATE,Maximo.WorkOrder.PMNUM,Maximo.WorkOrder.workorderid from Maximo.WorkOrder \nwhere  date(statusdate) = '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": "..csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dprawlandz_mxm_wob_source_ds",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "dprawlandz_mxm_wob_dest_ds",
											"type": "DatasetReference",
											"parameters": {
												"pDate": {
													"value": "@concat('workorder_',item().monthname,'_',item().year,'.txt')",
													"type": "Expression"
												},
												"OutputPath": {
													"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wob_source_ds')]",
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wob_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wostatus_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy data in bulk for workorder",
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().globalParameters.MaximoHistRangeInput",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "dprawlandz_mxm_wos_cpact_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "MAXIMO.WOSTATUS"
										},
										{
											"name": "Destination",
											"value": "@{pipeline().globalParameters.MaximoDataIngestionOutput}//@{concat('wostatusr_',item().monthname,'_',item().year,'.txt')}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "Db2Source",
											"query": {
												"value": "select  wo.WONUM,wo.PARENT,wo.STATUS,wo.CHANGEDATE,wo.CHANGEBY,wo.ORGID,wo.SITEID from Maximo.wostatus wo , Maximo.Workorder wk where wk.wonum  = wo.wonum \nand wk.siteid = wo.siteid and date(wo.changedate) = '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'  \n\n",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": "..csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dp_rawlandz_mxm_wostatus_src_ds",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "dprawlandz_mxm_wostatusb_dest_ds",
											"type": "DatasetReference",
											"parameters": {
												"pDate": {
													"value": "@concat('wostatus_',item().monthname,'_',item().year,'.txt')",
													"type": "Expression"
												},
												"OutputPath": {
													"value": "@pipeline().globalParameters.MaximoDataIngestionOutput",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dp_rawlandz_mxm_wostatus_src_ds')]",
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wostatusb_dest_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyMaximoFileInput_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Location File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "locations*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcLocation1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyLocationsSink1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Asset file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Location File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "asset*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "copySrcAssetFile1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "copySinkAssetFile1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Person File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Asset file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "person*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcPerson1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyPersonSink1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy JobPlan File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Person File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "jobplan*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcJobPlan1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyJobPlanSink1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy WorkOrder File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy JobPlan File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "workorder*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcWorkOrder1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyWorkOrderSink1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy WOStatus File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy WorkOrder File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "wostatus*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcWOstatus1",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyWOstatusSink1",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Labtrans File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy WOStatus File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "labtrans*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CopySrcLabtrans",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CopyLabtransSink",
								"type": "DatasetReference",
								"parameters": {
									"InputPath": {
										"value": "@pipeline().globalParameters.MaximoInputPath",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CopySrcLocation1')]",
				"[concat(variables('factoryId'), '/datasets/CopyLocationsSink1')]",
				"[concat(variables('factoryId'), '/datasets/copySrcAssetFile1')]",
				"[concat(variables('factoryId'), '/datasets/copySinkAssetFile1')]",
				"[concat(variables('factoryId'), '/datasets/CopySrcPerson1')]",
				"[concat(variables('factoryId'), '/datasets/CopyPersonSink1')]",
				"[concat(variables('factoryId'), '/datasets/CopySrcJobPlan1')]",
				"[concat(variables('factoryId'), '/datasets/CopyJobPlanSink1')]",
				"[concat(variables('factoryId'), '/datasets/CopySrcWorkOrder1')]",
				"[concat(variables('factoryId'), '/datasets/CopyWorkOrderSink1')]",
				"[concat(variables('factoryId'), '/datasets/CopySrcWOstatus1')]",
				"[concat(variables('factoryId'), '/datasets/CopyWOstatusSink1')]",
				"[concat(variables('factoryId'), '/datasets/CopySrcLabtrans')]",
				"[concat(variables('factoryId'), '/datasets/CopyLabtransSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_Master_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Asset STG",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_Asset_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Locations STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Asset STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_Locations_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Jobplan STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Locations STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_JobPlan_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Person STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Jobplan STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_Person_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute WorkOrder STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Person STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_WorkOrder_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute WOStatus STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute WorkOrder STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_WoStatus_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Labtrans",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute WOStatus STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_RawStg_Labtrans_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"concurrency": 12,
				"policy": {
					"elapsedTimeMetric": {
						"duration": "0.0:30:00"
					}
				},
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_Asset_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_Locations_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_JobPlan_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_Person_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_WorkOrder_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_WoStatus_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_RawStg_Labtrans_pln')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Master_Dim_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Asset Dim",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Asset_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute JobPlan Dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Asset Dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Jobplan_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Location Dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute JobPlan Dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Locations_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Person Dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Location Dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Person_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute WorkOrder Dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Person Dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Workorder_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/dp_Asset_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Jobplan_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Locations_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Person_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Workorder_pln')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Ops_Smry_Master_Fact_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Ops Fact",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Operation_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Parent ActLabHrs Update",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Ops Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Update_Parent_ActLabHrs_Ops_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Execute Ops Smry Fact",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Parent ActLabHrs Update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_operation_smry_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecuteLabtrans Fact",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Ops Smry Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dp_Labtrans_pln",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "MXMDM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/dp_Operation_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Update_Parent_ActLabHrs_Ops_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_operation_smry_pln')]",
				"[concat(variables('factoryId'), '/pipelines/dp_Labtrans_pln')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendDailySuccessMail_rawz')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-18.southcentralus.logic.azure.com:443/workflows/b1aa64ddbdec43978b0574175ffcaf35/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k7Iqx8QADt8e3VdSxWFzY0Fm0j6G-qMtyMLPQFf0OoA",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\" : \"@{concat('Daily run is successful for  ',formatDateTime(addDays(utcNow(), -1),'yyyy-MM-dd'), '  incremental load from Maximo production DB into the Data Lake Prod Environment for Raw Zone.')}\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().TriggeredByPipelineName}\"\n    \n }\n\n",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"receiver1": {
						"type": "string",
						"defaultValue": "malarkodi.marimuthu@vectrus.com"
					}
				},
				"variables": {
					"JobPlanRecCount": {
						"type": "String"
					},
					"RecCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendFailureAlertMail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-18.southcentralus.logic.azure.com:443/workflows/b1aa64ddbdec43978b0574175ffcaf35/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k7Iqx8QADt8e3VdSxWFzY0Fm0j6G-qMtyMLPQFf0OoA",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\" : \"The pipeline run has failed for the Prod Environment - pipeline having Pipeline ID :  @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().TriggeredByPipelineName}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver1}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"receiver1": {
						"type": "string",
						"defaultValue": "malarkodi.marimuthu@vectrus.com"
					}
				},
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendDailySuccessMail_stgz')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-18.southcentralus.logic.azure.com:443/workflows/b1aa64ddbdec43978b0574175ffcaf35/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k7Iqx8QADt8e3VdSxWFzY0Fm0j6G-qMtyMLPQFf0OoA",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\" : \"Daily run is successful for today's incremental load from Maximo production DB into the Data Lake Prod Environment for Staging Zone.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().TriggeredByPipelineName}\",\n    \n   \n   }",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"receiver1": {
						"type": "string",
						"defaultValue": "malarkodi.marimuthu@vectrus.com"
					}
				},
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendDailySuccessMail_refz')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-18.southcentralus.logic.azure.com:443/workflows/b1aa64ddbdec43978b0574175ffcaf35/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k7Iqx8QADt8e3VdSxWFzY0Fm0j6G-qMtyMLPQFf0OoA",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\" : \"Daily run is successful for today's incremental load from Maximo production DB into the Data Lake Prod Environment for Refined Zone.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().TriggeredByPipelineName}\",\n    \n   \n   }",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"receiver1": {
						"type": "string",
						"defaultValue": "malarkodi.marimuthu@vectrus.com"
					}
				},
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:22Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyMaximoFileArchive_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive MXM Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									},
									"wildcardFileName": "*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcMxmArchive",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkMxmArchiveFile",
								"type": "DatasetReference",
								"parameters": {
									"ArchivePath": {
										"value": "@pipeline().globalParameters.MaximoArchivePath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteMxmLanding files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive MXM Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SrcMxmArchive",
								"type": "DatasetReference",
								"parameters": {
									"LandingPath": {
										"value": "@pipeline().globalParameters.Maximorelativelandingpath",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.txt",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcMxmArchive')]",
				"[concat(variables('factoryId'), '/datasets/SinkMxmArchiveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendDailySuccessMail_consz')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-18.southcentralus.logic.azure.com:443/workflows/b1aa64ddbdec43978b0574175ffcaf35/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=k7Iqx8QADt8e3VdSxWFzY0Fm0j6G-qMtyMLPQFf0OoA",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "{\n    \"message\" : \"Daily run is successful for today's incremental load from Maximo production DB into the Data Lake Prod Environment for Consumption Zone.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().TriggeredByPipelineName}\",\n    \n    \n   \n   }",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"receiver1": {
						"type": "string",
						"defaultValue": "malarkodi.marimuthu@vectrus.com"
					}
				},
				"folder": {
					"name": "MXMCOMM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:18Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_labtrans_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To copy labor trans from maximo to raw landing zone.",
				"activities": [
					{
						"name": "dprawlandz_mxm_labtrans_cp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "rawlandingmaximoworkorder/workorder_202206.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select  Maximo.labtrans.refwo, Maximo.labtrans.siteid, Maximo.labtrans.ORGID, Maximo.labtrans.LOCATION, Maximo.labtrans.transdate,Maximo.labtrans.craft,Maximo.labtrans.laborcode,Maximo.labtrans.payrate,Maximo.labtrans.startdatetime,Maximo.labtrans.finishdatetime,Maximo.labtrans.regularhrs,Maximo.labtrans.startdate,Maximo.labtrans.finishdate,Maximo.labtrans.labtransid from Maximo.labtrans where date(transdate)=  '@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "[parameters('AzureDataLakeStorage1')]",
										"type": "LinkedServiceReference"
									},
									"path": "raw/maximo/log"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dprawlandz_mxm_wo_source_ds2",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "dprawlandz_mxm_labtrans_ds",
								"type": "DatasetReference",
								"parameters": {
									"OutputPath": "@pipeline().globalParameters.MaximoDataIngestionOutput"
								}
							}
						]
					}
				],
				"folder": {
					"name": "MXMRAW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_wo_source_ds2')]",
				"[concat(variables('factoryId'), '/datasets/dprawlandz_mxm_labtrans_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_asset_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_asset_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Output": {
						"type": "string",
						"defaultValue": "@pipeline().globalParameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('asset_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Output",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_jbpl_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_jpl_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutputPath": {
						"type": "string",
						"defaultValue": "@pipeline().globalparameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('jobplan_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')\n\n",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().OutputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LOCATIONS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Outputpath": {
						"type": "string",
						"defaultValue": "@pipeline().globalparameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('locations_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')\n\n",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Outputpath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_pers_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_pers_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Output": {
						"type": "string",
						"defaultValue": "@pipeline().globalparameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('person_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')\n",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Output",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcLocation1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "locations*.txt",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyLocationsSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "locations.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copySrcAssetFile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "asset*.txt",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copySinkAssetFile1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "asset.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcPerson1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "person*.txt",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPersonSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "person.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcJobPlan1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyJobPlanSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "jobplan.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcWorkOrder1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyWorkOrderSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "workorder.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcWOstatus1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyWOstatusSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "wostatus.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopySrcLabtrans')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "labtrans*.txt",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "REFWO",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "TRANSDATE",
						"type": "String"
					},
					{
						"name": "CRAFT",
						"type": "String"
					},
					{
						"name": "LABORCODE",
						"type": "String"
					},
					{
						"name": "PAYRATE",
						"type": "String"
					},
					{
						"name": "STARTDATETIME",
						"type": "String"
					},
					{
						"name": "FINISHDATETIME",
						"type": "String"
					},
					{
						"name": "REGULARHRS",
						"type": "String"
					},
					{
						"name": "STARTDATE",
						"type": "String"
					},
					{
						"name": "FINISHDATE",
						"type": "String"
					},
					{
						"name": "LABTRANSID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyLabtransSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "labtrans.txt",
						"fileSystem": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_Asset_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "src_RawStg_Asset_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgAsset_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawStgAsset": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgAsset_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_Locations_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpRawStgLocations_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgLocations_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawLocations": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgLocations_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_JobPlan_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpRawStgJobPlan_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgJobPlan_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawStgJobplan": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgJobPlan_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_Person_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpRawStgPerson_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgPerson_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawStgPerson": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgPerson_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_WorkOrder_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpRawStgWorkOrder_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgWorkOrder_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawStgWorkOrder": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgWorkOrder_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_WoStatus_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpRawStgWoStatus_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgWoStatus_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"srcRawStgWoStatus": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgWoStatus_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_RawStg_Labtrans_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_RawStg_Labtrans_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dpRawStgLabtrans_df",
								"type": "DataFlowReference",
								"datasetParameters": {
									"RawSrcLabTrans": {
										"InputPath": {
											"value": "@pipeline().globalParameters.Maximorelativeinputpath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMSTG"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dpRawStgLabtrans_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Asset_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Asset_Dim_pln",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Asset_Dim_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Asset_Dim_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Jobplan_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_JobPlan_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Jobplan_Dim_df2",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-26T16:44:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Jobplan_Dim_df2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Locations_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Locations_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Locations_Dim_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Locations_Dim_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Person_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Person_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Person_Dim_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Person_Dim_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Workorder_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Workorder_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Workorder_Dim_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Workorder_Dim_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Operation_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Operation_Fact_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_OperationLdFact_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-11T10:53:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_OperationLdFact_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Update_Parent_ActLabHrs_Ops_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Update_Parent_ActLabHrs_Ops_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Update_Parent_ActLabHrs_Ops_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Update_Parent_ActLabHrs_Ops_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_operation_smry_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dpOpsSmrydf",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_OpsSmry_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDM"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_OpsSmry_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Labtrans_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Labtrans_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Labtrans_Fact_df",
								"type": "DataFlowReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "[parameters('AzureDataLakeStorage1')]",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRunTime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-29T07:13:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dp_Labtrans_Fact_df')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcMxmArchive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().LandingPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkMxmArchiveFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ArchivePath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().ArchivePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LABTRANS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_labtrans_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutputPath": {
						"type": "string",
						"defaultValue": "@pipeline().globalparameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('labtrans_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().OutputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wob_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "Maximo",
					"table": "WorkOrder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wob_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pDate": {
						"type": "string"
					},
					"OutputPath": {
						"type": "string",
						"defaultValue": "@pipeline().globalParameters.MaximoDataIngestionOutput"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('workorder_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().OutputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "INSTALLDATE",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_wostatus_src_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('dp_rawlandz_mxm_ls_db2_db')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "WOSTATUS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wostatusb_dest_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pDate": {
						"type": "string"
					},
					"OutputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('wostatus_',formatDateTime(addDays(utcNow(), -1), 'yyyyMMdd'),'.txt')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().OutputPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "INSTALLDATE",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgAsset_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcRawStgAsset_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgAsset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGAsset",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgAsset",
							"rejectedDataLinkedService": {
								"referenceName": "[parameters('AzureDataLakeStorage1')]",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dCRawStgAsset"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp 'yyyy.MM.dd HH:mm:ss'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgAsset",
						"srcRawStgAsset derive(ENTRY_DT = currentTimestamp(),",
						"          ASSETNUM = iifNull(ASSETNUM, 'NA', ASSETNUM),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          CHANGEDATE = iifNull(CHANGEDATE, toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'),CHANGEDATE)) ~> dCRawStgAsset",
						"dCRawStgAsset sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as date,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          INSTALLDATE,",
						"          SITEID,",
						"          ORGID,",
						"          CHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgAsset"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/srcRawStgAsset_ds')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynpMXMSTGAsset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgLocations_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawStgLocationsDs",
								"type": "DatasetReference"
							},
							"name": "srcRawLocations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkStgLocations",
								"type": "DatasetReference"
							},
							"name": "sinkStgLocations"
						}
					],
					"transformations": [
						{
							"name": "dcRawStgLocations"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          CHANGEBY as string,",
						"          CHANGEDATE as string,",
						"          STATUS as string,",
						"          STATUSDATE as string,",
						"          SITEID as string,",
						"          ORGID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawLocations",
						"srcRawLocations derive(ENTRY_DT = currentTimestamp(),",
						"          CHANGEDATE = toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          STATUSDATE = toTimestamp(substring(STATUSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')) ~> dcRawStgLocations",
						"dcRawStgLocations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          CHANGEBY as string,",
						"          CHANGEDATE as timestamp,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          TYPE,",
						"          CHANGEBY,",
						"          CHANGEDATE,",
						"          STATUS,",
						"          STATUSDATE,",
						"          SITEID,",
						"          ORGID,",
						"          ENTRY_DT",
						"     )) ~> sinkStgLocations"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawStgLocationsDs')]",
				"[concat(variables('factoryId'), '/datasets/sinkStgLocations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgJobPlan_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_RawStgJobPlan_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgJobplan"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGJobplan",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgJobplan"
						}
					],
					"transformations": [
						{
							"name": "dCRawStgJobPlan"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JPNUM as string,",
						"          DESCRIPTION as string,",
						"          JPDURATION as double '000,000,000.000',",
						"          STATUS as string,",
						"          PRIORITY as integer '000',",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          PERSONGROUP as string,",
						"          PLUSCREVNUM as integer,",
						"          PLUSCCHANGEDATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgJobplan",
						"srcRawStgJobplan derive(ENTRY_DT = currentTimestamp(),",
						"          JPNUM = iifNull(JPNUM, 'NA', JPNUM),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          JPDURATION = iifNull(JPDURATION, toDouble(0.000), JPDURATION),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          PRIORITY = iifNull(PRIORITY, toInteger(-1), PRIORITY),",
						"          JOBPLANID = iifNull(JOBPLANID, toInteger(-1), JOBPLANID),",
						"          DOWNTIME = iifNull(DOWNTIME, toInteger(-1), DOWNTIME),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          PERSONGROUP = iifNull(PERSONGROUP, 'NA', PERSONGROUP),",
						"          PLUSCREVNUM = iifNull(PLUSCREVNUM, toInteger(-1), PLUSCREVNUM),",
						"          PLUSCCHANGEDATE = iifNull(toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'))) ~> dCRawStgJobPlan",
						"dCRawStgJobPlan sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          JPNUM,",
						"          DESCRIPTION,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          SITEID,",
						"          ORGID,",
						"          PERSONGROUP,",
						"          PLUSCREVNUM,",
						"          PLUSCCHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgJobplan"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_RawStgJobPlan_ds')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynpMXMSTGJobplan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgPerson_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcRawStgPerson_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgPerson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGPerson",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgPerson"
						}
					],
					"transformations": [
						{
							"name": "dCRawStgPerson"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PERSONID as string,",
						"          FIRSTNAME as string,",
						"          LASTNAME as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEETYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as string,",
						"          HIREDATE as string,",
						"          TERMINATIONDATE as string,",
						"          LOCATION as string,",
						"          LOCATIONSITE as string,",
						"          STATUSDATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     partitionBy('hash', 1)) ~> srcRawStgPerson",
						"srcRawStgPerson derive(ENTRY_DT = currentTimestamp(),",
						"          LOCATIONSITE = iifNull(LOCATIONSITE, 'NA', LOCATIONSITE)) ~> dCRawStgPerson",
						"dCRawStgPerson sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSONUID as integer,",
						"          PERSONID as string,",
						"          FIRSTNAME as string,",
						"          LASTNAME as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEETYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          LOCATIONSITE as string,",
						"          STATUSDATE as timestamp,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSONID,",
						"          FIRSTNAME,",
						"          LASTNAME,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEETYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          LOCATIONSITE,",
						"          STATUSDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgPerson"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/srcRawStgPerson_ds')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynpMXMSTGPerson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgWorkOrder_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawStgWorkOrder_ds1",
								"type": "DatasetReference"
							},
							"name": "srcRawStgWorkOrder"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGWorkOrder1",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgWorkOrder",
							"rejectedDataLinkedService": {
								"referenceName": "[parameters('AzureDataLakeStorage1')]",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dCRawStgWorkOrder"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          JPNUM as string,",
						"          ASSETNUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as string,",
						"          ISTASK as string,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as string,",
						"          WOPRIORITY as string,",
						"          CHANGEDATE as string,",
						"          STATUSDATE as string,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as string,",
						"          TARGSTARTDATE as string,",
						"          TARGCOMPDATE as string,",
						"          REPORTDATE as string,",
						"          RESPONDBY as string,",
						"          ESTDUR as string,",
						"          ACTLABHRS as string,",
						"          ACTSTART as string,",
						"          ACTFINISH as string,",
						"          ACTINTLABHRS as string,",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as string,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as string,",
						"          PMNUM as string,",
						"          WORKORDERID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgWorkOrder",
						"srcRawStgWorkOrder derive(ENTRY_DT = currentTimestamp(),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          JPNUM = iifNull(JPNUM, 'NA', JPNUM),",
						"          ASSETNUM = iifNull(ASSETNUM, 'NA', ASSETNUM),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          WORKTYPE = iifNull(WORKTYPE, 'NA', WORKTYPE),",
						"          TASKID = iifNull(toInteger(TASKID), toInteger(-1), toInteger(TASKID)),",
						"          ISTASK = iifNull(toInteger(ISTASK), toInteger(-1), toInteger(ISTASK)),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          WOPRIORITY = iifNull(toInteger(WOPRIORITY), toInteger(0), toInteger(WOPRIORITY)),",
						"          CHANGEDATE = iifNull(toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
						"          STATUSDATE = iifNull(toTimestamp(substring(STATUSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(STATUSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
						"          CHANGEBY = iifNull(CHANGEBY, 'NA', CHANGEBY),",
						"          REPORTDATE = iifNull(toTimestamp(substring(REPORTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(REPORTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
						"          RESPONDBY = iifNull(toTimestamp(substring(RESPONDBY, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(RESPONDBY, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
						"          ACTLABHRS = iifNull(toDecimal(ACTLABHRS), toDecimal(00.000), toDecimal(ACTLABHRS)),",
						"          ACTSTART = toTimestamp(substring(ACTSTART, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          ACTFINISH = toTimestamp(substring(ACTFINISH, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          ACTINTLABHRS = iifNull(toDecimal(ACTINTLABHRS), toDecimal(00.000), toDecimal(ACTINTLABHRS)),",
						"          WOGROUP = iifNull(WOGROUP, 'NA', WOGROUP),",
						"          PERSONGROUP = iifNull(PERSONGROUP, 'NA', PERSONGROUP),",
						"          OWNERGROUP = iifNull(OWNERGROUP, 'NA', OWNERGROUP),",
						"          ESTDUR = iifNull(toDecimal(ESTDUR), toDecimal(00.000), toDecimal(ESTDUR)),",
						"          PMDUEDATE = toTimestamp(substring(PMDUEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          TARGSTARTDATE = toTimestamp(substring(TARGSTARTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          TARGCOMPDATE = toTimestamp(substring(TARGCOMPDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          PLUSCFREQUENCY = toInteger(PLUSCFREQUENCY),",
						"          PMNEXTDUEDATE = toDate(PMNEXTDUEDATE, 'yyyy-MM-dd')) ~> dCRawStgWorkOrder",
						"dCRawStgWorkOrder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          ENTRY_DT as timestamp,",
						"          WO_ID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'raw',",
						"     rejectedData_folderPath: 'maximo/rejects',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGID,",
						"          SITEID,",
						"          LOCATION,",
						"          JPNUM,",
						"          ASSETNUM,",
						"          STATUS,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ENTRY_DT,",
						"          WO_ID = WORKORDERID",
						"     )) ~> sinkRawStgWorkOrder"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawStgWorkOrder_ds1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynpMXMSTGWorkOrder1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgWoStatus_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcRawStgWoStatus_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgWoStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGWoStatus",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgWoStatus"
						}
					],
					"transformations": [
						{
							"name": "dCRawStgWoStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          STATUS as string,",
						"          CHANGEDATE as string,",
						"          CHANGEBY as string,",
						"          ORGID as string,",
						"          SITEID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgWoStatus",
						"srcRawStgWoStatus derive(ENTRY_DT = currentTimestamp(),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          CHANGEDATE = iifNull(toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(CHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')),",
						"          CHANGEBY = iifNull(CHANGEBY, 'NA', CHANGEBY),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID)) ~> dCRawStgWoStatus",
						"dCRawStgWoStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          STATUS as string,",
						"          CHANGEDATE as timestamp,",
						"          CHANGEBY as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          STATUS,",
						"          CHANGEDATE,",
						"          CHANGEBY,",
						"          ORGID,",
						"          SITEID,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgWoStatus"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/srcRawStgWoStatus_ds')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynpMXMSTGWoStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgLabtrans_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawSrc_Labtrans_ds",
								"type": "DatasetReference"
							},
							"name": "RawSrcLabTrans"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkStgLabTrans",
								"type": "DatasetReference"
							},
							"name": "sinkStgLabTrans"
						}
					],
					"transformations": [
						{
							"name": "dcRawStgLabTrans"
						},
						{
							"name": "selRawStgLabTrans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          TRANSDATE as string,",
						"          CRAFT as string,",
						"          LABORCODE as string,",
						"          PAYRATE as string,",
						"          STARTDATETIME as string,",
						"          FINISHDATETIME as string,",
						"          REGULARHRS as string,",
						"          STARTDATE as string,",
						"          FINISHDATE as string,",
						"          LABTRANSID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> RawSrcLabTrans",
						"RawSrcLabTrans derive(ENTRY_DT = currentTimestamp(),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          REFWO = iifNull(REFWO, 'NA', REFWO),",
						"          STARTDATETIME = toTimestamp(substring(STARTDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATETIME = toTimestamp(substring(FINISHDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          STARTDATE = toTimestamp(substring(STARTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATE = toTimestamp(substring(FINISHDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          TRANSDATE = toTimestamp(substring(TRANSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')) ~> dcRawStgLabTrans",
						"dcRawStgLabTrans select(mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          TRANSDATE,",
						"          CRAFT,",
						"          PAYRATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          LABTRANSID,",
						"          ENTRY_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selRawStgLabTrans",
						"selRawStgLabTrans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          PAYRATE as decimal(18,2),",
						"          CRAFT as string,",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          STARTDATE as date,",
						"          FINISHDATE as date,",
						"          TRANSDATE as timestamp,",
						"          LAB_ID as integer,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          PAYRATE,",
						"          CRAFT,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          TRANSDATE,",
						"          LAB_ID = LABTRANSID,",
						"          ENTRY_DT",
						"     )) ~> sinkStgLabTrans"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawSrc_Labtrans_ds')]",
				"[concat(variables('factoryId'), '/datasets/SinkStgLabTrans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Asset_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcAzureSynpMxmAsset",
								"type": "DatasetReference"
							},
							"name": "SrcstgAssetRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcAssetSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "AssetExistingRowsRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkAssetInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkAssetLd",
							"rejectedDataLinkedService": {
								"referenceName": "[parameters('AzureDataLakeStorage1')]",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "SinkAssetInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkAssetUpdate"
						}
					],
					"transformations": [
						{
							"name": "skAsset"
						},
						{
							"name": "lkpAssetSite"
						},
						{
							"name": "AssetExistingRows"
						},
						{
							"name": "dcAssetHashKey"
						},
						{
							"name": "existsAsset"
						},
						{
							"name": "lookupExistAsset"
						},
						{
							"name": "ConditionalSplitAsset"
						},
						{
							"name": "joinAssetMaxKey"
						},
						{
							"name": "dcSK"
						},
						{
							"name": "selASSETInsert"
						},
						{
							"name": "alterRowAssetInsert"
						},
						{
							"name": "selAssetUpdate"
						},
						{
							"name": "dcAssetUpdate"
						},
						{
							"name": "alterRowAssetUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSETNUM,ASSETTAG,LOCATION,SITEID,ORGID,DESCRIPTION AS ASSET_DESCRIPTION,INSTALLDATE AS INSTALL_DATE\\nFROM MXMSTG.STG_ASSET',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> SrcstgAssetRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,S.SITE_ID AS SITE_ID ,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcAssetSiteRefRd",
						"source(output(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          SITE_ID as integer,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          INSTALL_DATE as date,",
						"          ASSET_DESCRIPTION as string,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSET_ID,ASSETNUM,SITE_ID,ASSETTAG,LOCATION,INSTALL_DATE,ASSET_DESCRIPTION,SRC_TYPE_HASH_KEY FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> AssetExistingRowsRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(ASSET_ID),0) FROM  MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"joinAssetMaxKey keyGenerate(output(NewASSET_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skAsset",
						"SrcstgAssetRead, srcAssetSiteRefRd lookup(SITEID == SITE_NM",
						"     && ORGID == ORGANIZATION_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpAssetSite",
						"AssetExistingRowsRd select(mapColumn(",
						"          ExistASSET_ID = ASSET_ID,",
						"          ExistASSETNUM = ASSETNUM,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistASSETTAG = ASSETTAG,",
						"          ExistLOCATION = LOCATION,",
						"          ExistASSET_DESCRIPTION = ASSET_DESCRIPTION,",
						"          ExistINSTALL_DATE = INSTALL_DATE,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AssetExistingRows",
						"lkpAssetSite derive(SRC_TYPE_HASH_KEY = sha2(256,ASSETNUM,SITE_ID,ASSETTAG,LOCATION,INSTALL_DATE),",
						"     partitionBy('hash', 1)) ~> dcAssetHashKey",
						"dcAssetHashKey, AssetExistingRows exists(ASSETNUM == ExistASSETNUM",
						"     && SITE_ID == ExistSITE_ID",
						"     && ASSETTAG == ExistASSETTAG",
						"     && LOCATION == ExistLOCATION",
						"     && ASSET_DESCRIPTION == ExistASSET_DESCRIPTION",
						"     && INSTALL_DATE == ExistINSTALL_DATE",
						"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsAsset",
						"existsAsset, AssetExistingRows lookup(ASSETNUM == ExistASSETNUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookupExistAsset",
						"lookupExistAsset split(isNull(ExistASSET_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> ConditionalSplitAsset@(NewItem, UpdateItem)",
						"ConditionalSplitAsset@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinAssetMaxKey",
						"skAsset derive(NewASSET_ID = NewASSET_ID+ MAXKEY,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcSK",
						"dcSK select(mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          SITE_ID,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          SRC_TYPE_HASH_KEY,",
						"          EFFECTIVE_DT,",
						"          NewASSET_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selASSETInsert",
						"selASSETInsert alterRow(insertIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRowAssetInsert",
						"ConditionalSplitAsset@UpdateItem select(mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          SITE_ID,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistASSET_ID,",
						"          ExistASSETNUM,",
						"          ExistSITE_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selAssetUpdate",
						"selAssetUpdate derive(EFFECTIVE_DT = currentTimestamp(),",
						"     partitionBy('hash', 1)) ~> dcAssetUpdate",
						"dcAssetUpdate alterRow(updateIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRowAssetUpdate",
						"alterRowAssetInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          SITE_ID as integer,",
						"          LOCATION as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'rawzone',",
						"     mapColumn(",
						"          ASSET_ID = NewASSET_ID,",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          SITE_ID,",
						"          LOCATION,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkAssetLd",
						"alterRowAssetUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          SITE_ID as integer,",
						"          LOCATION as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ASSETNUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ASSETNUM = ExistASSETNUM,",
						"          ASSETTAG,",
						"          SITE_ID = ExistSITE_ID,",
						"          LOCATION,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkAssetUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SrcAzureSynpMxmAsset')]",
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd')]",
				"[concat(variables('factoryId'), '/datasets/SinkAssetInitialLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Jobplan_Dim_df2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynpMxmStgRefnAsset2",
								"type": "DatasetReference"
							},
							"name": "srcJobPlanRead"
						},
						{
							"dataset": {
								"referenceName": "AzSnpMXMSTGAsset2",
								"type": "DatasetReference"
							},
							"name": "RefOrgJP"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd4",
								"type": "DatasetReference"
							},
							"name": "JobplanExistingRowRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd4",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkJobPlanInitialLoad2",
								"type": "DatasetReference"
							},
							"name": "sinkJPInitLd"
						},
						{
							"dataset": {
								"referenceName": "SinkJobPlanInitialLoad2",
								"type": "DatasetReference"
							},
							"name": "sinkJobPlanUpdate"
						}
					],
					"transformations": [
						{
							"name": "lkpJobPlanOrgSite"
						},
						{
							"name": "selJobPlanInsert"
						},
						{
							"name": "selJobplanExistRows"
						},
						{
							"name": "existsJobPlan"
						},
						{
							"name": "lkpJobPlanExistRow"
						},
						{
							"name": "splitJobPlan"
						},
						{
							"name": "joinJobPlanMaxKey"
						},
						{
							"name": "surrogateKeyJobPlan"
						},
						{
							"name": "dcJobPlanInsert"
						},
						{
							"name": "alterRowJobPlanInsert"
						},
						{
							"name": "selJobPlanUpdate"
						},
						{
							"name": "dcJobPlanUpdate"
						},
						{
							"name": "alterRowJobPlanUpdate"
						},
						{
							"name": "dcNewHashKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JP_NUM as string,",
						"          JP_DESC as string,",
						"          JPDURATION as decimal(10,3),",
						"          STATUS as string,",
						"          PRIORITY as integer,",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          PLUSCREVNUM as integer,",
						"          SITEID as string,",
						"          ORGID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JPNUM AS JP_NUM,DESCRIPTION AS JP_DESC,JPDURATION,STATUS,PRIORITY,JOBPLANID,\\nDOWNTIME,LABORCODE,PLUSCREVNUM,SITEID,ORGID FROM MXMSTG.STG_JOBPLAN',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> srcJobPlanRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> RefOrgJP",
						"source(output(",
						"          JP_ID as integer,",
						"          JOBPLANID as integer,",
						"          JP_NUM as string,",
						"          JP_DESC as string,",
						"          JPDURATION as decimal(10,3),",
						"          STATUS as string,",
						"          PRIORITY as integer,",
						"          LABORCODE as string,",
						"          PLUSCREVNUM as short,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JOBPLANID,JP_NUM,JP_DESC,JPDURATION,STATUS,PRIORITY,LABORCODE,PLUSCREVNUM,SRC_TYPE_HASH_KEY FROM MXMDW.JOBPLAN',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> JobplanExistingRowRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(JP_ID),0) FROM MXMDW.JOBPLAN',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> MaxKey",
						"srcJobPlanRead, RefOrgJP lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpJobPlanOrgSite",
						"dcJobPlanInsert select(mapColumn(",
						"          JP_NUM,",
						"          JP_DESC,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          PLUSCREVNUM,",
						"          EFFECTIVE_DT,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          NewJP_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selJobPlanInsert",
						"JobplanExistingRowRd select(mapColumn(",
						"          ExistJP_ID = JP_ID,",
						"          ExistJOBPLANID = JOBPLANID,",
						"          ExistJP_NUM = JP_NUM,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selJobplanExistRows",
						"dcNewHashKey, selJobplanExistRows exists(JOBPLANID == ExistJOBPLANID",
						"     && JP_NUM == ExistJP_NUM,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsJobPlan",
						"existsJobPlan, selJobplanExistRows lookup(JOBPLANID == ExistJOBPLANID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpJobPlanExistRow",
						"lkpJobPlanExistRow split(isNull(ExistJP_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> splitJobPlan@(NewItem, UpdateItem)",
						"splitJobPlan@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinJobPlanMaxKey",
						"joinJobPlanMaxKey keyGenerate(output(NewJP_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKeyJobPlan",
						"surrogateKeyJobPlan derive(NewJP_ID = NewJP_ID + MAXKEY,",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"     partitionBy('hash', 1)) ~> dcJobPlanInsert",
						"selJobPlanInsert alterRow(insertIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRowJobPlanInsert",
						"splitJobPlan@UpdateItem select(mapColumn(",
						"          JP_NUM,",
						"          JP_DESC,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          PLUSCREVNUM,",
						"          SITEID,",
						"          ORGID,",
						"          SRC_TYPE_HASH_KEY,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ExistJP_ID,",
						"          ExistJOBPLANID",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selJobPlanUpdate",
						"selJobPlanUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcJobPlanUpdate",
						"dcJobPlanUpdate alterRow(updateIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRowJobPlanUpdate",
						"lkpJobPlanOrgSite derive(SRC_TYPE_HASH_KEY = sha2(256,JOBPLANID)) ~> dcNewHashKey",
						"alterRowJobPlanInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JP_DESC as string,",
						"          JPDURATION as decimal(10,3),",
						"          STATUS as string,",
						"          PRIORITY as integer,",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          PLUSCREVNUM as integer,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          JP_NUM,",
						"          JP_DESC,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          PLUSCREVNUM,",
						"          EFFECTIVE_DT,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          JP_ID = NewJP_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkJPInitLd",
						"alterRowJobPlanUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JP_DESC as string,",
						"          JPDURATION as decimal(10,3),",
						"          STATUS as string,",
						"          PRIORITY as integer,",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          PLUSCREVNUM as integer,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['JOBPLANID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          JOBPLANID = ExistJOBPLANID,",
						"          JP_NUM,",
						"          JP_DESC,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          PLUSCREVNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkJobPlanUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSynpMxmStgRefnAsset2')]",
				"[concat(variables('factoryId'), '/datasets/AzSnpMXMSTGAsset2')]",
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd4')]",
				"[concat(variables('factoryId'), '/datasets/SinkJobPlanInitialLoad2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Locations_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcLocationsRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRefRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "ExistingRecordsRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkLocationsLoad",
								"type": "DatasetReference"
							},
							"name": "sinkLocationsLoad"
						},
						{
							"dataset": {
								"referenceName": "sinkLocationsLoad",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateItem"
						}
					],
					"transformations": [
						{
							"name": "selExistingRecords"
						},
						{
							"name": "lkpLocOrgSite"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "existsLoc"
						},
						{
							"name": "ConsplitLoc"
						},
						{
							"name": "joinLocMaxKey"
						},
						{
							"name": "surrogateKeyLoc"
						},
						{
							"name": "dcNewItem"
						},
						{
							"name": "selNewItem"
						},
						{
							"name": "lkpExistRecords"
						},
						{
							"name": "selUpdateItem"
						},
						{
							"name": "alterRowUpdateItem"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          CHANGEBY as string,",
						"          CHANGEDATE as timestamp,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SITEID as string,",
						"          ORGID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION,\\nDESCRIPTION,\\nTYPE,\\nCHANGEBY,\\nCHANGEDATE,\\nSTATUS,\\nSTATUSDATE,\\nSITEID,\\nORGID\\nFROM MXMSTG.STG_LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> srcLocationsRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,O.ORGANIZATION_NM AS ORGANIZATION_NM, S.SITE_ID AS SITE_ID,S.SITE_NM AS SITE_NM\\nFROM MXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE O.ORGANIZATION_ID = S.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRefRead",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          STATUS as string,",
						"          SITE_ID as integer,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION_ID,LOCATION,DESCRIPTION,TYPE,STATUS,SITE_ID,SRC_TYPE_HASH_KEY\\nFROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRecordsRead",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(LOCATION_ID),0) FROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"ExistingRecordsRead select(mapColumn(",
						"          ExistLOCATION = LOCATION,",
						"          ExistLOCATION_ID = LOCATION_ID,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistDESCRIPTION = DESCRIPTION,",
						"          ExistTYPE = TYPE,",
						"          ExistSTATUS = STATUS,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
						"srcLocationsRead, OrgSiteRefRead lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocOrgSite",
						"lkpLocOrgSite derive(SRC_TYPE_HASH_KEY = sha2(256,LOCATION,DESCRIPTION,TYPE,STATUS)) ~> dcNewHashKey",
						"dcNewHashKey, selExistingRecords exists(LOCATION == ExistLOCATION",
						"     && DESCRIPTION == ExistDESCRIPTION",
						"     && TYPE == ExistTYPE",
						"     && STATUS == ExistSTATUS",
						"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsLoc",
						"lkpExistRecords split(isNull(ExistLOCATION_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> ConsplitLoc@(NewItem, UpdateItem)",
						"ConsplitLoc@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinLocMaxKey",
						"joinLocMaxKey keyGenerate(output(MaxLOCATION_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyLoc",
						"surrogateKeyLoc derive(EFFECTIVE_DT = currentTimestamp(),",
						"          LOCATION_ID = toInteger(MAXKEY + MaxLOCATION_ID)) ~> dcNewItem",
						"dcNewItem select(mapColumn(",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          TYPE,",
						"          CHANGEBY,",
						"          CHANGEDATE,",
						"          STATUS,",
						"          STATUSDATE,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          EFFECTIVE_DT,",
						"          LOCATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selNewItem",
						"existsLoc, selExistingRecords lookup(LOCATION == ExistLOCATION",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpExistRecords",
						"ConsplitLoc@UpdateItem select(mapColumn(",
						"          LOCATION,",
						"          SITE_ID,",
						"          DESCRIPTION,",
						"          TYPE,",
						"          CHANGEBY,",
						"          CHANGEDATE,",
						"          STATUS,",
						"          STATUSDATE,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistSRC_TYPE_HASH_KEY,",
						"          ExistLOCATION,",
						"          ExistSITE_ID",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selUpdateItem",
						"selUpdateItem alterRow(updateIf(1==1)) ~> alterRowUpdateItem",
						"selNewItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          CHANGEBY as string,",
						"          CHANGEDATE as timestamp,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          TYPE,",
						"          CHANGEBY,",
						"          CHANGEDATE,",
						"          STATUS,",
						"          STATUSDATE,",
						"          SITE_ID,",
						"          ORGANIZATION_ID,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkLocationsLoad",
						"alterRowUpdateItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          TYPE as string,",
						"          CHANGEBY as string,",
						"          CHANGEDATE as timestamp,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['LOCATION'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LOCATION = ExistLOCATION,",
						"          SITE_ID = ExistSITE_ID,",
						"          DESCRIPTION,",
						"          TYPE,",
						"          CHANGEBY,",
						"          CHANGEDATE,",
						"          STATUS,",
						"          STATUSDATE,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkUpdateItem"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd')]",
				"[concat(variables('factoryId'), '/datasets/sinkLocationsLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Person_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynpMxmStgRefnAsset",
								"type": "DatasetReference"
							},
							"name": "srcPersonLd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcPersonSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "PersonExistRowRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkPersonLd"
						},
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkPersonUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcPersonLd"
						},
						{
							"name": "skPersonLd"
						},
						{
							"name": "lkpPersonSite"
						},
						{
							"name": "selPersonExistRow"
						},
						{
							"name": "dcPersonHashKey"
						},
						{
							"name": "existsPerson"
						},
						{
							"name": "lookupPerson"
						},
						{
							"name": "splitPerson"
						},
						{
							"name": "joinPerson"
						},
						{
							"name": "dcPersonInsert"
						},
						{
							"name": "selPersonInsert"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "dcPersonUpdate"
						},
						{
							"name": "selPersonUpdate"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          LOCATIONSITE as string,",
						"          STATUSDATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT \\nPERSONID AS PERSON_NBR,\\nFIRSTNAME AS PERSON_FIRST_NM,\\nLASTNAME AS PERSON_LAST_NM,\\nSTATUS AS STATUS,\\nDEPARTMENT AS DEPARTMENT,\\nTITLE AS TITLE,\\nEMPLOYEETYPE AS EMPLOYEE_TYPE,\\nJOBCODE AS JOBCODE,\\nSUPERVISOR AS SUPERVISOR,\\nBIRTHDATE,\\nHIREDATE,\\nTERMINATIONDATE,\\nLOCATION,\\nLOCATIONSITE,\\nSTATUSDATE\\nFROM MXMSTG.STG_PERSON',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonLd",
						"source(output(",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT SITE_ID,SITE_NM FROM MXMDW.SITE',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonSiteRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR,SRC_TYPE_HASH_KEY FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> PersonExistRowRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(PERSON_ID),0) FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"lkpPersonSite derive(PERSON_FIRST_NM = iifNull(PERSON_FIRST_NM, 'NA', PERSON_FIRST_NM),",
						"          PERSON_LAST_NM = iifNull(PERSON_LAST_NM, 'NA', PERSON_LAST_NM),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          DEPARTMENT = iifNull(DEPARTMENT, 'NA', DEPARTMENT),",
						"          TITLE = iifNull(TITLE, 'NA', TITLE),",
						"          EMPLOYEE_TYPE = iifNull(EMPLOYEE_TYPE, 'NA', EMPLOYEE_TYPE),",
						"          JOBCODE = iifNull(JOBCODE, 'NA', JOBCODE),",
						"          SUPERVISOR = iifNull(SUPERVISOR, 'NA', SUPERVISOR),",
						"          BIRTHDATE = iifNull(BIRTHDATE, toDate('1900/01/01','yyyy/MM/dd'), BIRTHDATE),",
						"          HIREDATE = iifNull(HIREDATE, toDate('1900/01/01','yyyy/MM/dd'), HIREDATE),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION)) ~> dcPersonLd",
						"joinPerson keyGenerate(output(NewPERSON_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skPersonLd",
						"srcPersonLd, srcPersonSiteRefRd lookup(LOCATIONSITE == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPersonSite",
						"PersonExistRowRd select(mapColumn(",
						"          ExistPERSON_ID = PERSON_ID,",
						"          ExistPERSON_NBR = PERSON_NBR,",
						"          ExistSTATUS = STATUS,",
						"          ExistDEPARTMENT = DEPARTMENT,",
						"          ExistJOBCODE = JOBCODE,",
						"          ExistSUPERVISOR = SUPERVISOR,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonExistRow",
						"dcPersonLd derive(SRC_TYPE_HASH_KEY = sha2(256,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR)) ~> dcPersonHashKey",
						"dcPersonHashKey, selPersonExistRow exists(PERSON_NBR == ExistPERSON_NBR",
						"     && STATUS == ExistSTATUS",
						"     && DEPARTMENT == ExistDEPARTMENT",
						"     && JOBCODE == ExistJOBCODE",
						"     && SUPERVISOR == ExistSUPERVISOR,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsPerson",
						"existsPerson, selPersonExistRow lookup(PERSON_NBR == ExistPERSON_NBR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookupPerson",
						"lookupPerson split(isNull(ExistPERSON_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> splitPerson@(NewItem, UpdateItem)",
						"splitPerson@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinPerson",
						"skPersonLd derive(NewPERSON_ID = NewPERSON_ID + MAXKEY,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcPersonInsert",
						"dcPersonInsert select(mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          NewPERSON_ID,",
						"          EFFECTIVE_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonInsert",
						"selPersonInsert alterRow(insertIf(1==1)) ~> alterRowInsert",
						"selPersonUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcPersonUpdate",
						"splitPerson@UpdateItem select(mapColumn(",
						"          PERSON_FIRST_NM,",
						"          PERSON_NBR,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          STATUSDATE,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistPERSON_ID,",
						"          ExistPERSON_NBR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonUpdate",
						"dcPersonUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          PERSON_ID = NewPERSON_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonLd",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PERSON_NBR','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_ID = ExistPERSON_ID,",
						"          PERSON_NBR = ExistPERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSynpMxmStgRefnAsset')]",
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd')]",
				"[concat(variables('factoryId'), '/datasets/SinkPersonInitialLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Workorder_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcStgWorkorder",
								"type": "DatasetReference"
							},
							"name": "srcStgWorkorderRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "LocationRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "MAXKEY"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "ExistingRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkWorkorder",
								"type": "DatasetReference"
							},
							"name": "sinkInsertWorkorder"
						},
						{
							"dataset": {
								"referenceName": "SinkWorkorder",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateWorkorder"
						}
					],
					"transformations": [
						{
							"name": "lkpOrgSite"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "selExistingRecords"
						},
						{
							"name": "dCNewHashKey"
						},
						{
							"name": "existsWorkorder"
						},
						{
							"name": "lkpExistWo"
						},
						{
							"name": "NewItem"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skWo"
						},
						{
							"name": "dcInsertWo"
						},
						{
							"name": "selInsertWo"
						},
						{
							"name": "dcUpdateWo"
						},
						{
							"name": "selUpdateWo"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          ENTRY_DT as timestamp,",
						"          WO_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> srcStgWorkorderRd",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,O.ORGANIZATION_NM AS ORGANIZATION_NM, S.SITE_ID AS SITE_ID,S.SITE_NM AS SITE_NM\\nFROM MXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE O.ORGANIZATION_ID = S.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRef",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRef",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(WORKORDER_ID),0) FROM  MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> MAXKEY",
						"source(output(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WORKORDER_ID,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,SRC_TYPE_HASH_KEY FROM MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRecords",
						"srcStgWorkorderRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgSite",
						"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"ExistingRecords select(mapColumn(",
						"          ExistWORKORDER_ID = WORKORDER_ID,",
						"          ExistWONUM = WONUM,",
						"          ExistPARENT = PARENT,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistSTATUSDATE = STATUSDATE,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
						"lkpLocation derive(SRC_TYPE_HASH_KEY = sha2(256,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,CHANGEDATE),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dCNewHashKey",
						"dCNewHashKey, selExistingRecords exists(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID",
						"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsWorkorder",
						"existsWorkorder, selExistingRecords lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpExistWo",
						"lkpExistWo split(isNull(ExistWORKORDER_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> NewItem@(NewItem, UpdateItem)",
						"NewItem@NewItem, MAXKEY join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinMaxKey",
						"joinMaxKey keyGenerate(output(NewWORKORDER_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> skWo",
						"skWo derive(WORKORDER_ID = MAXKEY + NewWORKORDER_ID,",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcInsertWo",
						"dcInsertWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          WORKORDER_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selInsertWo",
						"NewItem@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateWo",
						"dcUpdateWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistWORKORDER_ID,",
						"          ExistWONUM,",
						"          ExistSITE_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selUpdateWo",
						"selUpdateWo alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selInsertWo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkInsertWorkorder",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID = ExistWORKORDER_ID,",
						"          WONUM = ExistWONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID = ExistSITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkUpdateWorkorder"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/srcStgWorkorder')]",
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd1')]",
				"[concat(variables('factoryId'), '/datasets/SinkWorkorder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OperationLdFact_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzSnpMXMSTGAsset3",
								"type": "DatasetReference"
							},
							"name": "srcOperationRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "AssetRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "PersonRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "JobplanRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "PerGrpRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "OpsExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "srcWorkOrderReadRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd6",
								"type": "DatasetReference"
							},
							"name": "JobplanNullSiteRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd2",
								"type": "DatasetReference"
							},
							"name": "sinkOpsInsert"
						},
						{
							"dataset": {
								"referenceName": "SinkOperationLd2",
								"type": "DatasetReference"
							},
							"name": "sinkOperationUpdate"
						}
					],
					"transformations": [
						{
							"name": "srtOperation"
						},
						{
							"name": "dcOps"
						},
						{
							"name": "selOperation"
						},
						{
							"name": "lkpOrgsiteoptn"
						},
						{
							"name": "lkpAssetOptn"
						},
						{
							"name": "lkpPersonOptn"
						},
						{
							"name": "lkpJobplanOptn"
						},
						{
							"name": "lkpPerGrpOptn"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "selOpsExistingRows"
						},
						{
							"name": "lkpExistOperation"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skOperation"
						},
						{
							"name": "dcOperationInsert"
						},
						{
							"name": "alterRowOpsInsert"
						},
						{
							"name": "selectOps"
						},
						{
							"name": "lookupOpsStatusInd"
						},
						{
							"name": "selectOps2"
						},
						{
							"name": "splitOpsForUpdate"
						},
						{
							"name": "selOpsUpdate"
						},
						{
							"name": "dcOpsUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "splitJobPlan"
						},
						{
							"name": "unionJobplan"
						},
						{
							"name": "selectNullJPSite"
						},
						{
							"name": "selectJPNotNullSite"
						},
						{
							"name": "lkpJPNullSite"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          STATUS as string,",
						"          ASSETNUM as string,",
						"          JPNUM as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          WO_CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_COMMITTED',",
						"     query: 'SELECT \\nWO.WONUM AS WONUM,WO.PARENT AS PARENT,GOVTWONUM,WO.ORGID,WO.SITEID,LOCATION,WS.STATUS AS STATUS,ASSETNUM,JPNUM, WS.CHANGEDATE AS WO_STATUS_CHANGEDATE,\\nWORKTYPE,TASKID,ISTASK, DESCRIPTION,PLUSCJPREVNUM,WOPRIORITY,WO.CHANGEDATE AS WO_CHANGEDATE,STATUSDATE,WS.CHANGEBY AS WO_STATUS_CHANGEBY, PMDUEDATE,\\nTARGSTARTDATE,TARGCOMPDATE,REPORTDATE,ACTLABHRS,ACTSTART, ACTFINISH,ACTINTLABHRS,ESTDUR,WOGROUP,PERSONGROUP,OWNERGROUP,PLUSCFREQUENCY,PLUSCFREQUNIT,\\nPMNEXTDUEDATE,PMNUM\\nFROM MXMSTG.STG_WORKORDER WO, MXMSTG.STG_WOSTATUS WS\\n WHERE\\n WS.WONUM=WO.WONUM\\n AND WS.ORGID=WO.ORGID\\n AND WS.SITEID=WO.SITEID',",
						"     format: 'query',",
						"     staged: true) ~> srcOperationRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRefRd",
						"source(output(",
						"          ASSET_ID as integer,",
						"          ASSETNUM_ref as string,",
						"          SITE_ID_ref as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSET_ID,ASSETNUM AS ASSETNUM_ref,SITE_ID AS SITE_ID_ref FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> AssetRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,P.SITE_ID AS SITE_ID,S.ORGANIZATION_ID AS ORGANIZATION_ID FROM \\nMXMDW.PERSON P,\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nO.ORGANIZATION_ID =S.ORGANIZATION_ID\\nAND S.SITE_ID=P.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> PersonRefRd",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JPRef_SITE_ID as integer,",
						"          JPRef_ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID>0',",
						"     format: 'query',",
						"     staged: true) ~> JobplanRefRd",
						"source(output(",
						"          PERSON_GROUP_ID as integer,",
						"          PERSON_GRP_CD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_GROUP_ID,PERSON_GRP_CD FROM MXMDW.PERSON_GROUP',",
						"     format: 'query',",
						"     staged: true) ~> PerGrpRefRd",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_ID),0) FROM  MXMDW.OPERATION',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"source(output(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          SNAPSHOT_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_ID, WONUM,SITE_ID,STATUS,WO_STATUS_CHANGEDATE,SNAPSHOT_DATE FROM MXMDW.OPERATION WHERE CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> OpsExistingRows",
						"source(output(",
						"          RefWONUM as string,",
						"          RefSITE_ID as integer,",
						"          RefSTATUS as string,",
						"          RefSTATUSDATE as timestamp,",
						"          FLAG as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS RefWONUM,S.SITE_ID AS RefSITE_ID,STATUS AS RefSTATUS,STATUSDATE AS RefSTATUSDATE,\\'1\\' AS FLAG FROM MXMSTG.STG_WORKORDER WO,MXMDW.SITE S\\nWHERE\\nWO.SITEID=S.SITE_NM',",
						"     format: 'query',",
						"     staged: true) ~> srcWorkOrderReadRef",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JPRef_SITE_ID as integer,",
						"          JPRef_ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID<0',",
						"     format: 'query',",
						"     staged: true) ~> JobplanNullSiteRd",
						"srcOperationRead sort(asc(WONUM, true),",
						"     asc(PARENT, true),",
						"     asc(ORGID, true),",
						"     asc(SITEID, true),",
						"     asc(WO_STATUS_CHANGEDATE, true),",
						"     caseInsensitive: true) ~> srtOperation",
						"lookupOpsStatusInd derive(CAL_PMDUEDT = iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),",
						"          WORKTYPE_CM_PM = case(\r",
						"     (WORKTYPE == 'CM' || WORKTYPE == 'DMO' || WORKTYPE == 'OWO' || WORKTYPE == 'SERV'), 'CM',\r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), 'PM',\r",
						"        (WORKTYPE == 'PJ' || WORKTYPE == 'PWO' ), 'PJ',\r",
						"        'OTHERS'  \r",
						"     ),",
						"          {REPORTMONTH_YEAR } = year(REPORTDATE),",
						"          REPORTDATE_MONTH = month(REPORTDATE),",
						"          REPORTDATE_CM_PM = case(     \r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),       \r",
						"        REPORTDATE  \r",
						"     ),",
						"          CURRENT_RECORD_IND = iifNull(toInteger(FLAG), 0, 1),",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          SNAPSHOT_DATE = toTimestamp(toString(WO_STATUS_CHANGEDATE, 'yyyy-MM-dd 00:00:00'),'yyyy-MM-dd HH:mm:ss'),",
						"          ASSET_ID = iifNull(ASSET_ID, toInteger(-1), ASSET_ID),",
						"          PERSON_ID = iifNull(PERSON_ID, toInteger(-1), PERSON_ID),",
						"          JP_ID = iifNull(JP_ID, toInteger(-1), JP_ID),",
						"          PERSON_GROUP_ID = iifNull(PERSON_GROUP_ID, toInteger(-1), PERSON_GROUP_ID),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID),",
						"          AVAILABLE_MANHOUR = toInteger(506),",
						"          PARENT_ACTLABHRS = toDecimal(0.0),",
						"          STATUS_FLAG = case(     \r",
						"     (STATUS == 'READY' || STATUS == 'CLOSE' || STATUS == 'CAN' || STATUS == 'COMP'), 2,1        \r",
						"     )) ~> dcOps",
						"joinMaxKey select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION_ID,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCREVNUM = PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          WO_CHANGEDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          WOGROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          PERSON_GROUP = PERSONGROUP,",
						"          ESTDUR,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          CURRENT_RECORD_IND,",
						"          PARENT_ACTLABHRS,",
						"          MAXKEY,",
						"          STATUS_FLAG",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOperation",
						"srtOperation, OrgSiteRefRd lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgsiteoptn",
						"lkpLocation, AssetRefRd lookup(ASSETNUM == ASSETNUM_ref",
						"     && SITE_ID == SITE_ID_ref,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpAssetOptn",
						"lkpAssetOptn, PersonRefRd lookup(WO_STATUS_CHANGEBY == PERSON_NBR",
						"     && OrgSiteRefRd@ORGANIZATION_ID == PersonRefRd@ORGANIZATION_ID",
						"     && OrgSiteRefRd@SITE_ID == PersonRefRd@SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpPersonOptn",
						"lkpPersonOptn, JobplanRefRd lookup(JPNUM == JP_NUM",
						"     && OrgSiteRefRd@SITE_ID == JPRef_SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpJobplanOptn",
						"unionJobplan, PerGrpRefRd lookup(PERSONGROUP == PERSON_GRP_CD,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPerGrpOptn",
						"lkpOrgsiteoptn, LocationRefRd lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"OpsExistingRows select(mapColumn(",
						"          ExistWONUM = WONUM,",
						"          ExistOPERATION_ID = OPERATION_ID,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistWO_STATUS_CHANGEDATE = WO_STATUS_CHANGEDATE,",
						"          ExistSNAPSHOT_DATE = SNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsExistingRows",
						"selectOps2, selOpsExistingRows lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpExistOperation",
						"lkpExistOperation, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"selOperation keyGenerate(output(NewOPERATION_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skOperation",
						"skOperation derive(OPERATION_ID = MAXKEY + NewOPERATION_ID) ~> dcOperationInsert",
						"dcOperationInsert alterRow(insertIf(1==1)) ~> alterRowOpsInsert",
						"lkpPerGrpOptn select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps",
						"selectOps, srcWorkOrderReadRef lookup(WONUM == RefWONUM",
						"     && SITE_ID == RefSITE_ID",
						"     && STATUS == RefSTATUS",
						"     && WO_STATUS_CHANGEDATE == RefSTATUSDATE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 4,",
						"          WONUM,",
						"          SITE_ID,",
						"          STATUS,",
						"          REPORTDATE",
						"     ),",
						"     broadcast: 'both')~> lookupOpsStatusInd",
						"dcOps select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          STATUS_FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps2",
						"lkpExistOperation split(!isNull(ExistOPERATION_ID),",
						"     disjoint: false) ~> splitOpsForUpdate@(UpdateCurrRecInd, DoNotReprocessNewRecords)",
						"splitOpsForUpdate@UpdateCurrRecInd select(mapColumn(",
						"          WONUM,",
						"          SITE_ID,",
						"          CURRENT_RECORD_IND,",
						"          SNAPSHOT_DATE,",
						"          ExistWONUM,",
						"          ExistOPERATION_ID,",
						"          ExistSITE_ID,",
						"          ExistSNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsUpdate",
						"selOpsUpdate derive(NewCURRENT_RECORD_IND = toInteger(0)) ~> dcOpsUpdate",
						"dcOpsUpdate alterRow(updateIf(CURRENT_RECORD_IND==1)) ~> alterRowUpdate",
						"lkpJobplanOptn split(isNull(JP_ID),",
						"     disjoint: false) ~> splitJobPlan@(NullJobPlanSite, NotNullJobPlanSite)",
						"selectNullJPSite, selectJPNotNullSite union(byName: true)~> unionJobplan",
						"lkpJPNullSite select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGID,",
						"          SITEID,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID = splitJobPlan@NullJobPlanSite@ORGANIZATION_ID,",
						"          SITE_ID = splitJobPlan@NullJobPlanSite@SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_NUM = splitJobPlan@NullJobPlanSite@JP_NUM,",
						"          JPRef_SITE_ID = splitJobPlan@NullJobPlanSite@JPRef_SITE_ID,",
						"          JPRef_ORGANIZATION_ID = splitJobPlan@NullJobPlanSite@JPRef_ORGANIZATION_ID,",
						"          JP_ID = JobplanNullSiteRd@JP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNullJPSite",
						"splitJobPlan@NotNullJobPlanSite select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGID,",
						"          SITEID,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID = splitJobPlan@NotNullJobPlanSite@ORGANIZATION_ID,",
						"          SITE_ID = splitJobPlan@NotNullJobPlanSite@SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          JPRef_SITE_ID,",
						"          JPRef_ORGANIZATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJPNotNullSite",
						"splitJobPlan@NullJobPlanSite, JobplanNullSiteRd lookup(JPNUM == JobplanNullSiteRd@JP_NUM",
						"     && splitJobPlan@NullJobPlanSite@ORGANIZATION_ID == JobplanNullSiteRd@JPRef_ORGANIZATION_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpJPNullSite",
						"alterRowOpsInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          STATUS,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJREVNUM = PLUSCREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          STATUSDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSON_GROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          REPORTMONTH_YEAR = {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          SNAPSHOT_DATE,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          STATUS_FLAG",
						"     )) ~> sinkOpsInsert",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID = ExistOPERATION_ID,",
						"          CURRENT_RECORD_IND = NewCURRENT_RECORD_IND",
						"     )) ~> sinkOperationUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzSnpMXMSTGAsset3')]",
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd6')]",
				"[concat(variables('factoryId'), '/datasets/SinkOperationLd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Update_Parent_ActLabHrs_Ops_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "UpdateParentActLabHrsOps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateParentActLabHrs"
						}
					],
					"transformations": [
						{
							"name": "filterActLabHrs"
						},
						{
							"name": "aggActLabHrs"
						},
						{
							"name": "alterRowActLabHrs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          ISTASK as integer,",
						"          ACTLABHRS as decimal(18,9)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT WONUM, PARENT,SITE_ID,ISTASK,ACTLABHRS FROM MXMDW.OPERATION WHERE ACTLABHRS>0 AND CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true) ~> UpdateParentActLabHrsOps",
						"UpdateParentActLabHrsOps filter(ISTASK==1) ~> filterActLabHrs",
						"filterActLabHrs aggregate(groupBy(PARENT,",
						"          SITE_ID),",
						"     SumACTLABHRS = sum(ACTLABHRS)) ~> aggActLabHrs",
						"aggActLabHrs alterRow(updateIf(1==1)) ~> alterRowActLabHrs",
						"alterRowActLabHrs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM = PARENT,",
						"          SITE_ID,",
						"          PARENT_ACTLABHRS = SumACTLABHRS",
						"     )) ~> sinkUpdateParentActLabHrs"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd')]",
				"[concat(variables('factoryId'), '/datasets/SinkOperationLd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OpsSmry_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcOpsSmryRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "ExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxSKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryLdInsert"
						},
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcOpsSmry"
						},
						{
							"name": "SKOpsSmry"
						},
						{
							"name": "dcWoAge"
						},
						{
							"name": "dcISbacklog"
						},
						{
							"name": "selOpsSmry"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "existsOpsSmry"
						},
						{
							"name": "lookupOpsSmry"
						},
						{
							"name": "splitOpsSmry"
						},
						{
							"name": "joinMaxSK"
						},
						{
							"name": "dcInsertItem"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "joinLocation"
						},
						{
							"name": "selOpsSmryUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "dcOpsSmryUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          DESCRIPTION as string,",
						"          LOCATION_ID as integer,",
						"          ASSET as string,",
						"          ASSET_ID as integer,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as string,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WORKTYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          SNAPSHOT_DT as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION_ID AS LOCATION_ID,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.PERSON_GROUP_ID AS PERSON_GROUP_ID,OPS.SNAPSHOT_DATE AS SNAPSHOT_DT\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nAND OPS.CURRENT_RECORD_IND=1\\n--AND OPS.EFFECTIVE_DT>= CONVERT (DATE, SYSDATETIME())\\nAND OPS.EFFECTIVE_DT= (SELECT MAX(EFFECTIVE_DT) FROM MXMDW.OPERATION)\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcOpsSmryRd",
						"source(output(",
						"          ExistOPERATION_SUMMARY_ID as integer,",
						"          ExistWORK_ORDER as string,",
						"          ExistSITE as string,",
						"          ExistSRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SITE AS ExistSITE,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRows",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> MaxSKey",
						"source(output(",
						"          RefLOCATION_ID as integer,",
						"          LOCATION as string,",
						"          RefSITE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION_ID AS RefLOCATION_ID,LOCATION,SITE_ID AS RefSITE_ID FROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"joinLocation derive(WO_OPEN_DT = REPORTED_DATE,",
						"          WO_DUE_DT = case(\r",
						"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
						"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
						"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"CM\"), addDays(REPORTED_DATE,90),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"PM\"), addDays(REPORTED_DATE,45),\r",
						"REPORTED_DATE\r",
						"),",
						"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
						"    (PRIORITY == \"1\"), 1,\r",
						"    (PRIORITY == \"2\"), 7,\r",
						"    (PRIORITY == \"3\"), 30,\r",
						"    (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"CM\"), 90,\r",
						"     (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"PM\"), 45,\r",
						"     0\r",
						"),",
						"          WO_CLOSE_DT = case\r",
						"(\r",
						"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
						"    ),",
						"          PRIORITY = toInteger(PRIORITY),",
						"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
						"joinMaxSK keyGenerate(output(NewOPERATION_SUMMARY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SKOpsSmry",
						"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
						"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
						"dcWoAge derive(IS_BACKLOG = case\r",
						"(\r",
						"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
						"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
						"     'Yes' ),",
						"          WO_AGE_SEGMENT = case\r",
						"(\r",
						"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
						"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
						"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
						"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
						"     'Above 90 Days' \r",
						"     )) ~> dcISbacklog",
						"dcNewHashKey select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
						"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,SITE,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
						"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY",
						"     && WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     negate:true,",
						"     partitionBy('hash', 4,",
						"          WORK_ORDER,",
						"          SITE",
						"     ),",
						"     broadcast: 'right')~> existsOpsSmry",
						"existsOpsSmry, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupOpsSmry",
						"lookupOpsSmry split(isNull(ExistOPERATION_SUMMARY_ID),",
						"     disjoint: false) ~> splitOpsSmry@(NewItem, UpdateItem)",
						"splitOpsSmry@NewItem, MaxSKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxSK",
						"SKOpsSmry derive(NewOPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID + MAXKEY,",
						"          ACTLABHRS = toDecimal(0.00),",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertItem",
						"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
						"srcOpsSmryRd, LocationRefRd join(LOCATION_ID == RefLOCATION_ID",
						"     && SITE_ID == RefSITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocation",
						"splitOpsSmry@UpdateItem select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          ExistOPERATION_SUMMARY_ID,",
						"          ExistWORK_ORDER,",
						"          ExistSITE,",
						"          ExistSRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmryUpdate",
						"dcOpsSmryUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selOpsSmryUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcOpsSmryUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          IS_BACKLOG,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          PERSON_GROUP_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryLdInsert",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_SUMMARY_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = ExistOPERATION_SUMMARY_ID,",
						"          WORK_ORDER = ExistWORK_ORDER,",
						"          SITE = ExistSITE,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          IS_BACKLOG,",
						"          SNAPSHOT_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd')]",
				"[concat(variables('factoryId'), '/datasets/sinkOperationSmryLd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Labtrans_Fact_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "srcStgLabtransRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "LocationRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "CraftRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "WorkorderRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd2",
								"type": "DatasetReference"
							},
							"name": "ExistRows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkLabtrans",
								"type": "DatasetReference"
							},
							"name": "sinkLabtrans"
						},
						{
							"dataset": {
								"referenceName": "SinkLabtrans",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateLabtrans"
						}
					],
					"transformations": [
						{
							"name": "selExistRows"
						},
						{
							"name": "lkpOrgSite"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "lkpCraft"
						},
						{
							"name": "joinWo"
						},
						{
							"name": "existsLabTrans"
						},
						{
							"name": "lkpLabtrans"
						},
						{
							"name": "splitLabtrans"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "sKeyLabTrans"
						},
						{
							"name": "selLabTrans"
						},
						{
							"name": "dcInsertLabtrans"
						},
						{
							"name": "selInsertLabtrans"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "dcUpdateLabtrans"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "dcLabtrans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          PAYRATE as decimal(18,2),",
						"          CRAFT as string,",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          STARTDATE as date,",
						"          FINISHDATE as date,",
						"          TRANSDATE as timestamp,",
						"          LAB_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT REFWO AS WONUM,SITEID,ORGID,LOCATION,PAYRATE,CRAFT,STARTDATETIME,FINISHDATETIME,REGULARHRS,STARTDATE,FINISHDATE,TRANSDATE,LAB_ID FROM MXMSTG.STG_LABTRANS',",
						"     format: 'query',",
						"     staged: true) ~> srcStgLabtransRd",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRef",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRef",
						"source(output(",
						"          CRAFT_ID as integer,",
						"          CRAFT_CD as string,",
						"          ORGANIZATION_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT CRAFT_ID,CRAFT_CD,ORGANIZATION_NM FROM MXMDW.CRAFT',",
						"     format: 'query',",
						"     staged: true) ~> CraftRef",
						"source(output(",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          GOVTWONUM as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          DESCRIPTION as string,",
						"          WOPRIORITY as integer,",
						"          STATUSDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM,SITE_ID,GOVTWONUM,ASSETNUM,STATUS,JPNUM,WORKTYPE,DESCRIPTION,\\nWOPRIORITY,STATUSDATE,TARGCOMPDATE,REPORTDATE,PMDUEDATE,TARGSTARTDATE,ESTDUR,\\nWOGROUP,PERSONGROUP,PMNEXTDUEDATE,PMNUM\\nFROM MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> WorkorderRef",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(LABTRANS_ID),0) FROM  MXMDW.LABTRANS',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"source(output(",
						"          LABTRANS_ID as integer,",
						"          LAB_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LABTRANS_ID,LAB_ID FROM MXMDW.LABTRANS',",
						"     format: 'query',",
						"     staged: true) ~> ExistRows",
						"ExistRows select(mapColumn(",
						"          ExistLABTRANS_ID = LABTRANS_ID,",
						"          ExistLAB_ID = LAB_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistRows",
						"srcStgLabtransRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgSite",
						"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"lkpLocation, CraftRef lookup(CRAFT == CRAFT_CD",
						"     && ORGID == CraftRef@ORGANIZATION_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpCraft",
						"lkpCraft, WorkorderRef join(srcStgLabtransRd@WONUM == WorkorderRef@WONUM",
						"     && OrgSiteRef@SITE_ID == WorkorderRef@SITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinWo",
						"dcLabtrans, selExistRows exists(LAB_ID == ExistLAB_ID,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsLabTrans",
						"existsLabTrans, selExistRows lookup(LAB_ID == ExistLAB_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpLabtrans",
						"lkpLabtrans split(isNull(ExistLABTRANS_ID),",
						"     disjoint: false) ~> splitLabtrans@(NewItem, UpdateItem)",
						"splitLabtrans@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"joinMaxKey keyGenerate(output(NewLABTRANS_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> sKeyLabTrans",
						"joinWo select(mapColumn(",
						"          WONUM = srcStgLabtransRd@WONUM,",
						"          PAYRATE,",
						"          CRAFT,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          TRANSDATE,",
						"          LAB_ID,",
						"          SITE_ID = OrgSiteRef@SITE_ID,",
						"          LOCATION_ID,",
						"          CRAFT_ID,",
						"          GOVTWONUM,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          DESCRIPTION,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          PMNEXTDUEDATE,",
						"          PMNUM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selLabTrans",
						"sKeyLabTrans derive(LABTRANS_ID = MAXKEY + NewLABTRANS_ID,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertLabtrans",
						"dcInsertLabtrans select(mapColumn(",
						"          WONUM,",
						"          PAYRATE,",
						"          CRAFT,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          TRANSDATE,",
						"          LAB_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          CRAFT_ID,",
						"          GOVTWONUM,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          DESCRIPTION,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          LABTRANS_ID,",
						"          EFFECTIVE_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selInsertLabtrans",
						"selInsertLabtrans alterRow(insertIf(1==1)) ~> alterRowInsert",
						"splitLabtrans@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateLabtrans",
						"dcUpdateLabtrans alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selLabTrans derive(STARTDATETIME = iifNull(STARTDATETIME, STARTDATE, STARTDATETIME),",
						"          FINISHDATETIME = iifNull(FINISHDATETIME, FINISHDATE, FINISHDATETIME),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcLabtrans",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LABTRANS_ID as integer,",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          CRAFT_ID as integer,",
						"          LAB_ID as integer,",
						"          PAYRATE as decimal(18,2),",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          TRANSDATE as timestamp,",
						"          GOVTWONUM as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          DESCRIPTION as string,",
						"          WOPRIORITY as integer,",
						"          STATUSDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LABTRANS_ID,",
						"          WONUM,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          CRAFT_ID,",
						"          LAB_ID,",
						"          PAYRATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          TRANSDATE,",
						"          GOVTWONUM,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          DESCRIPTION,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkLabtrans",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LABTRANS_ID as integer,",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          CRAFT_ID as integer,",
						"          LAB_ID as integer,",
						"          PAYRATE as decimal(18,2),",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          TRANSDATE as timestamp,",
						"          GOVTWONUM as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          DESCRIPTION as string,",
						"          WOPRIORITY as integer,",
						"          STATUSDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['LAB_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LABTRANS_ID = ExistLABTRANS_ID,",
						"          WONUM,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          CRAFT_ID,",
						"          LAB_ID = ExistLAB_ID,",
						"          PAYRATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          TRANSDATE,",
						"          GOVTWONUM,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          DESCRIPTION,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkUpdateLabtrans"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrgSiteRefRd2')]",
				"[concat(variables('factoryId'), '/datasets/SinkLabtrans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/srcRawStgAsset_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "asset.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "String"
					},
					{
						"name": "ASSETTAG",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "INSTALLDATE",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMXMSTGAsset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "ASSETTAG",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawStgLocationsDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "locations.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "TYPE",
						"type": "String"
					},
					{
						"name": "CHANGEBY",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "STATUSDATE",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkStgLocations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "TYPE",
						"type": "varchar"
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_LOCATIONS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_RawStgJobPlan_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "jobplan.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "JPNUM",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "JPDURATION",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "PRIORITY",
						"type": "String"
					},
					{
						"name": "JOBPLANID",
						"type": "String"
					},
					{
						"name": "DOWNTIME",
						"type": "String"
					},
					{
						"name": "LABORCODE",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "PERSONGROUP",
						"type": "String"
					},
					{
						"name": "PLUSCREVNUM",
						"type": "String"
					},
					{
						"name": "PLUSCCHANGEDATE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMXMSTGJobplan')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_JOBPLAN"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srcRawStgPerson_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "person.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PERSONID",
						"type": "String"
					},
					{
						"name": "FIRSTNAME",
						"type": "String"
					},
					{
						"name": "LASTNAME",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "DEPARTMENT",
						"type": "String"
					},
					{
						"name": "TITLE",
						"type": "String"
					},
					{
						"name": "EMPLOYEETYPE",
						"type": "String"
					},
					{
						"name": "JOBCODE",
						"type": "String"
					},
					{
						"name": "SUPERVISOR",
						"type": "String"
					},
					{
						"name": "BIRTHDATE",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "TERMINATIONDATE",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "LOCATIONSITE",
						"type": "String"
					},
					{
						"name": "STATUSDATE",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMXMSTGPerson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PERSONUID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSONID",
						"type": "varchar"
					},
					{
						"name": "FIRSTNAME",
						"type": "varchar"
					},
					{
						"name": "LASTNAME",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "DEPARTMENT",
						"type": "varchar"
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "EMPLOYEETYPE",
						"type": "varchar"
					},
					{
						"name": "JOBCODE",
						"type": "varchar"
					},
					{
						"name": "SUPERVISOR",
						"type": "varchar"
					},
					{
						"name": "BIRTHDATE",
						"type": "date"
					},
					{
						"name": "HIREDATE",
						"type": "date"
					},
					{
						"name": "TERMINATIONDATE",
						"type": "date"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "LOCATIONSITE",
						"type": "varchar"
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_PERSON"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawStgWorkOrder_ds1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "workorder.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "WONUM",
						"type": "String"
					},
					{
						"name": "PARENT",
						"type": "String"
					},
					{
						"name": "GOVTWONUM",
						"type": "String"
					},
					{
						"name": "JPNUM",
						"type": "String"
					},
					{
						"name": "ASSETNUM",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "WORKTYPE",
						"type": "String"
					},
					{
						"name": "TASKID",
						"type": "String"
					},
					{
						"name": "ISTASK",
						"type": "String"
					},
					{
						"name": "DESCRIPTION",
						"type": "String"
					},
					{
						"name": "PLUSCJPREVNUM",
						"type": "String"
					},
					{
						"name": "WOPRIORITY",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					},
					{
						"name": "STATUSDATE",
						"type": "String"
					},
					{
						"name": "CHANGEBY",
						"type": "String"
					},
					{
						"name": "PMDUEDATE",
						"type": "String"
					},
					{
						"name": "TARGSTARTDATE",
						"type": "String"
					},
					{
						"name": "TARGCOMPDATE",
						"type": "String"
					},
					{
						"name": "REPORTDATE",
						"type": "String"
					},
					{
						"name": "RESPONDBY",
						"type": "String"
					},
					{
						"name": "ESTDUR",
						"type": "String"
					},
					{
						"name": "ACTLABHRS",
						"type": "String"
					},
					{
						"name": "ACTSTART",
						"type": "String"
					},
					{
						"name": "ACTFINISH",
						"type": "String"
					},
					{
						"name": "ACTINTLABHRS",
						"type": "String"
					},
					{
						"name": "WOGROUP",
						"type": "String"
					},
					{
						"name": "PERSONGROUP",
						"type": "String"
					},
					{
						"name": "OWNERGROUP",
						"type": "String"
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "String"
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "String"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "String"
					},
					{
						"name": "PMNUM",
						"type": "String"
					},
					{
						"name": "WORKORDERID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMXMSTGWorkOrder1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "JPNUM",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "TASKID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ISTASK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "PLUSCJPREVNUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WOPRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "PMDUEDATE",
						"type": "date"
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RESPONDBY",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ACTSTART",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTFINISH",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTINTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSONGROUP",
						"type": "varchar"
					},
					{
						"name": "OWNERGROUP",
						"type": "varchar"
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_WORKORDER"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srcRawStgWoStatus_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "wostatus.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "WONUM",
						"type": "String"
					},
					{
						"name": "PARENT",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "CHANGEDATE",
						"type": "String"
					},
					{
						"name": "CHANGEBY",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMXMSTGWoStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_WOSTATUS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawSrc_Labtrans_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage1')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "labtrans.txt",
						"folderPath": {
							"value": "@dataset().InputPath",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "REFWO",
						"type": "String"
					},
					{
						"name": "SITEID",
						"type": "String"
					},
					{
						"name": "ORGID",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "TRANSDATE",
						"type": "String"
					},
					{
						"name": "CRAFT",
						"type": "String"
					},
					{
						"name": "LABORCODE",
						"type": "String"
					},
					{
						"name": "PAYRATE",
						"type": "String"
					},
					{
						"name": "STARTDATETIME",
						"type": "String"
					},
					{
						"name": "FINISHDATETIME",
						"type": "String"
					},
					{
						"name": "REGULARHRS",
						"type": "String"
					},
					{
						"name": "STARTDATE",
						"type": "String"
					},
					{
						"name": "FINISHDATE",
						"type": "String"
					},
					{
						"name": "LABTRANSID",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkStgLabTrans')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "REFWO",
						"type": "varchar"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "PAYRATE",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "CRAFT",
						"type": "varchar"
					},
					{
						"name": "STARTDATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "FINISHDATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REGULARHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "STARTDATE",
						"type": "date"
					},
					{
						"name": "FINISHDATE",
						"type": "date"
					},
					{
						"name": "TRANSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAB_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_LABTRANS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SrcAzureSynpMxmAsset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "",
					"table": ""
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrgSiteRefRd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_NBR",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_NM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_DESC",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ORGANIZATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkAssetInitialLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSET_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "ASSETTAG",
						"type": "varchar"
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "ASSET_DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALL_DATE",
						"type": "date"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMxmStgRefnAsset2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSnpMXMSTGAsset2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrgSiteRefRd4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_NBR",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_NM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_DESC",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ORGANIZATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkJobPlanInitialLoad2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "JP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "JP_NUM",
						"type": "varchar"
					},
					{
						"name": "JP_DESC",
						"type": "varchar"
					},
					{
						"name": "JPDURATION",
						"type": "decimal",
						"precision": 10,
						"scale": 3
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "PRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "JOBPLANID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DOWNTIME",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LABORCODE",
						"type": "varchar"
					},
					{
						"name": "PLUSCREVNUM",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "JOBPLAN"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkLocationsLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "TYPE",
						"type": "varchar"
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "LOCATIONS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynpMxmStgRefnAsset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkPersonInitialLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "PERSON_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSON_NBR",
						"type": "varchar"
					},
					{
						"name": "PERSON_FIRST_NM",
						"type": "varchar"
					},
					{
						"name": "PERSON_LAST_NM",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "DEPARTMENT",
						"type": "varchar"
					},
					{
						"name": "TITLE",
						"type": "varchar"
					},
					{
						"name": "EMPLOYEE_TYPE",
						"type": "varchar"
					},
					{
						"name": "JOBCODE",
						"type": "varchar"
					},
					{
						"name": "SUPERVISOR",
						"type": "varchar"
					},
					{
						"name": "BIRTHDATE",
						"type": "date"
					},
					{
						"name": "HIREDATE",
						"type": "date"
					},
					{
						"name": "TERMINATIONDATE",
						"type": "date"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "PERSON"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srcStgWorkorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "JPNUM",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "TASKID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ISTASK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "PLUSCJPREVNUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WOPRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "PMDUEDATE",
						"type": "date"
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RESPONDBY",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ACTSTART",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTFINISH",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTINTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSONGROUP",
						"type": "varchar"
					},
					{
						"name": "OWNERGROUP",
						"type": "varchar"
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_WORKORDER"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrgSiteRefRd1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_NBR",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_NM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_DESC",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ORGANIZATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkWorkorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "WORKORDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "JPNUM",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "TASKID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ISTASK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "PLUSCJPREVNUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WOPRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "PMDUEDATE",
						"type": "date"
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RESPONDBY",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ACTSTART",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTFINISH",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTINTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSONGROUP",
						"type": "varchar"
					},
					{
						"name": "OWNERGROUP",
						"type": "varchar"
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "WORKORDER"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSnpMXMSTGAsset3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "INSTALLDATE",
						"type": "date"
					},
					{
						"name": "SITEID",
						"type": "varchar"
					},
					{
						"name": "ORGID",
						"type": "varchar"
					},
					{
						"name": "CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ENTRY_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMSTG",
					"table": "STG_ASSET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrgSiteRefRd6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_NBR",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_NM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_DESC",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ORGANIZATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkOperationLd2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "OPERATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ASSET_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSON_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "JP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSON_GROUP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "TASKID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ISTASK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "PLUSCJREVNUM",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "WOPRIORITY",
						"type": "varchar"
					},
					{
						"name": "WO_CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_STATUS_CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_STATUS_CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PMDUEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ACTSTART",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTFINISH",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTINTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSON_GROUP",
						"type": "varchar"
					},
					{
						"name": "CAL_PMDUEDT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WORKTYPE_CM_PM",
						"type": "varchar"
					},
					{
						"name": "REPORTMONTH_YEAR",
						"type": "varchar"
					},
					{
						"name": "REPORTDATE_MONTH",
						"type": "varchar"
					},
					{
						"name": "REPORTDATE_CM_PM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "AVAILABLE_MANHOUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PARENT_ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "SNAPSHOT_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CURRENT_RECORD_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUS_FLAG",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "OPERATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkOperationLd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "OPERATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "PARENT",
						"type": "varchar"
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ASSET_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSON_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "JP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PERSON_GROUP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "TASKID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ISTASK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "PLUSCJREVNUM",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "WOPRIORITY",
						"type": "varchar"
					},
					{
						"name": "WO_CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_STATUS_CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_STATUS_CHANGEBY",
						"type": "varchar"
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PMDUEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ACTSTART",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTFINISH",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTINTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSON_GROUP",
						"type": "varchar"
					},
					{
						"name": "CAL_PMDUEDT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WORKTYPE_CM_PM",
						"type": "varchar"
					},
					{
						"name": "REPORTMONTH_YEAR",
						"type": "varchar"
					},
					{
						"name": "REPORTDATE_MONTH",
						"type": "varchar"
					},
					{
						"name": "REPORTDATE_CM_PM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PLUSCFREQUENCY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PLUSCFREQUNIT",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "AVAILABLE_MANHOUR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PARENT_ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "SNAPSHOT_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CURRENT_RECORD_IND",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STATUS_FLAG",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "OPERATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkOperationSmryLd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "OPERATION_SUMMARY_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WORK_ORDER",
						"type": "varchar"
					},
					{
						"name": "GOVT_WO",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION",
						"type": "varchar"
					},
					{
						"name": "ASSET",
						"type": "varchar"
					},
					{
						"name": "REPORTED_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "WO_STATUS_CHANGEDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGET_START_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGET_FINISH_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTLABHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WORK_GROUP",
						"type": "varchar"
					},
					{
						"name": "WORK_TYPE",
						"type": "varchar"
					},
					{
						"name": "PM_DUE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SITE",
						"type": "varchar"
					},
					{
						"name": "WO_OPEN_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_DUE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_PRIORITY_THRESHOLD_DAYS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WO_CLOSE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "WO_AGE",
						"type": "decimal",
						"precision": 18,
						"scale": 4
					},
					{
						"name": "WO_AGE_SEGMENT",
						"type": "varchar"
					},
					{
						"name": "WORK_TYPE_CM_PM",
						"type": "varchar"
					},
					{
						"name": "PERSON_GROUP_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IS_BACKLOG",
						"type": "char"
					},
					{
						"name": "SNAPSHOT_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SRC_TYPE_HASH_KEY",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDM",
					"table": "OPERATION_SUMMARY"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrgSiteRefRd2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "ORGANIZATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ORGANIZATION_NBR",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_NM",
						"type": "varchar"
					},
					{
						"name": "ORGANIZATION_DESC",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "ORGANIZATION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkLabtrans')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSynapseAnalytics1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "LABTRANS_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WONUM",
						"type": "varchar"
					},
					{
						"name": "SITE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LOCATION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CRAFT_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LAB_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PAYRATE",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "STARTDATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "FINISHDATETIME",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REGULARHRS",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "TRANSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "GOVTWONUM",
						"type": "varchar"
					},
					{
						"name": "ASSETNUM",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "JPNUM",
						"type": "varchar"
					},
					{
						"name": "WORKTYPE",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "WOPRIORITY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUSDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TARGCOMPDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REPORTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PMDUEDATE",
						"type": "date"
					},
					{
						"name": "TARGSTARTDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ESTDUR",
						"type": "decimal",
						"precision": 18,
						"scale": 9
					},
					{
						"name": "WOGROUP",
						"type": "varchar"
					},
					{
						"name": "PERSONGROUP",
						"type": "varchar"
					},
					{
						"name": "PMNEXTDUEDATE",
						"type": "date"
					},
					{
						"name": "PMNUM",
						"type": "varchar"
					},
					{
						"name": "EFFECTIVE_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "MXMDW",
					"table": "LABTRANS"
				}
			},
			"dependsOn": []
		}
	]
}