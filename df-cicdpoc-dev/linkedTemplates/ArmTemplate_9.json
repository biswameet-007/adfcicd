{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-cicdpoc-dev"
		},
		"synwdpdevgen01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synwdpdevgen01-WorkspaceDefaultSqlServer'"
		},
		"synwdpdevgen01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dlsdpanalyticsdevgen01.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dp_rawlandz_mxm_wostatus_src_ds1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "WOSTATUS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_pers_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_pers_source_ds1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LOCATIONS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LABTRANS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds21')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LABTRANS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wo_source_ds3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "MAXIMO",
					"table": "LOCATIONS"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wob_source_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "Maximo",
					"table": "WorkOrder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dprawlandz_mxm_wob_source_ds1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp_rawlandz_mxm_ls_db2_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "Maximo",
					"table": "WorkOrder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/synwdpdevgen01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synwdpdevgen01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/synwdpdevgen01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synwdpdevgen01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPS_JPID_Fix_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OPS_JPID_FIX_ds",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_OPS_JPID_Fix",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          JP_NUM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM,",
						"          JP_NUM,",
						"          SITE_NM",
						"     )) ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPS_JPID_Fix_df2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "sourceJP1"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "workorderRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "sourceJP2",
							"description": "Import data from Jopplan where Site is null"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd",
								"type": "DatasetReference"
							},
							"name": "sinkJPIDFIX"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "split1"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "union1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID,ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' and SITE_ID>0\\n',",
						"     format: 'query',",
						"     staged: true) ~> sourceJP1",
						"source(output(",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer,",
						"          JPNUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM,SITE_ID,ORGANIZATION_ID,JPNUM FROM MXMDW.WORKORDER WHERE JPNUM<>\\'NA\\'',",
						"     format: 'query',",
						"     staged: true) ~> workorderRead",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID,ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' and SITE_ID<0',",
						"     format: 'query',",
						"     staged: true) ~> sourceJP2",
						"workorderRead, sourceJP1 lookup(JPNUM == JP_NUM",
						"     && workorderRead@SITE_ID == sourceJP1@SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(isNull(JP_ID),",
						"     disjoint: false) ~> split1@(NULLSITEID, NOTNULLSITEID)",
						"split1@NULLSITEID, sourceJP2 lookup(JPNUM == sourceJP2@JP_NUM",
						"     && split1@NULLSITEID@ORGANIZATION_ID == sourceJP2@ORGANIZATION_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"select1, select2 union(byName: true)~> union1",
						"lookup2 select(mapColumn(",
						"          WONUM,",
						"          SITE_ID = split1@NULLSITEID@SITE_ID,",
						"          ORGANIZATION_ID = split1@NULLSITEID@ORGANIZATION_ID,",
						"          JPNUM,",
						"          JP_ID = sourceJP2@JP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@NOTNULLSITEID select(mapColumn(",
						"          WONUM,",
						"          SITE_ID = split1@NOTNULLSITEID@SITE_ID,",
						"          ORGANIZATION_ID = split1@NOTNULLSITEID@ORGANIZATION_ID,",
						"          JPNUM,",
						"          JP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"union1 derive(JP_ID = iifNull(JP_ID, toInteger(-1), JP_ID)) ~> derivedColumn1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID','ORGANIZATION_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM,",
						"          SITE_ID,",
						"          ORGANIZATION_ID,",
						"          JP_ID",
						"     )) ~> sinkJPIDFIX"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpAssetInitialLoad')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SrcAzureSynpMxmAsset",
								"type": "DatasetReference"
							},
							"name": "SrcstgAssetRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcAssetSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "AssetExistingRecordsRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkAssetInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkAssetInsert",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "SinkAssetInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkAssetUpd"
						}
					],
					"transformations": [
						{
							"name": "dcAsset"
						},
						{
							"name": "lkpAssetSite"
						},
						{
							"name": "selExistingRecords"
						},
						{
							"name": "existsAsset"
						},
						{
							"name": "existsAssetUpd"
						},
						{
							"name": "joinUpd"
						},
						{
							"name": "skAsset"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "selAssetInsert"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "alterRowUpd"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          SITEID as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSETNUM,ASSETTAG,LOCATION,SITEID,DESCRIPTION AS ASSET_DESCRIPTION,INSTALLDATE AS INSTALL_DATE\\nFROM MXMSTG.STG_ASSET',",
						"     format: 'query',",
						"     staged: true) ~> SrcstgAssetRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> srcAssetSiteRefRd",
						"source(output(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          ASSET_DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSET_ID,ASSETNUM,ASSETTAG,LOCATION,SITE_ID,ASSET_DESCRIPTION FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> AssetExistingRecordsRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(ASSET_ID),0) FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"skAsset derive(ASSET_ID = MAXKEY + NewAsset_Id,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcAsset",
						"SrcstgAssetRead, srcAssetSiteRefRd lookup(SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpAssetSite",
						"AssetExistingRecordsRd select(mapColumn(",
						"          ExistASSET_ID = ASSET_ID,",
						"          ExistASSETNUM = ASSETNUM,",
						"          ExistASSETTAG = ASSETTAG,",
						"          ExistLOCATION = LOCATION,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistASSET_DESCRIPTION = ASSET_DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
						"lkpAssetSite, selExistingRecords exists(ASSETNUM == ExistASSETNUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsAsset",
						"lkpAssetSite, selExistingRecords exists(ASSETNUM == ExistASSETNUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsAssetUpd",
						"existsAssetUpd, selExistingRecords join(ASSETNUM == ExistASSETNUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinUpd",
						"joinMaxKey keyGenerate(output(NewAsset_Id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> skAsset",
						"existsAsset, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"dcAsset select(mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          SITE_ID,",
						"          ASSET_ID,",
						"          EFFECTIVE_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selAssetInsert",
						"selAssetInsert alterRow(insertIf(1==1)) ~> alterRowInsert",
						"joinUpd alterRow(updateIf(1==1)) ~> alterRowUpd",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          SITE_ID as integer,",
						"          LOCATION as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'rawzone',",
						"     mapColumn(",
						"          ASSET_ID,",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          SITE_ID,",
						"          LOCATION,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkAssetInsert",
						"alterRowUpd sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSET_ID as integer,",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          SITE_ID as integer,",
						"          LOCATION as string,",
						"          ASSET_DESCRIPTION as string,",
						"          INSTALL_DATE as date,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ASSETNUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ASSETTAG,",
						"          ASSETNUM = ExistASSETNUM,",
						"          SITE_ID = ExistSITE_ID,",
						"          LOCATION,",
						"          ASSET_DESCRIPTION,",
						"          INSTALL_DATE",
						"     )) ~> sinkAssetUpd"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgAsset_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcRawStgAsset_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgAsset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGAsset",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgAsset",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dCRawStgAsset"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp 'yyyy.MM.dd HH:mm:ss'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgAsset",
						"srcRawStgAsset derive(ENTRY_DT = currentTimestamp(),",
						"          ASSETNUM = iifNull(ASSETNUM, 'NA', ASSETNUM),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          CHANGEDATE = iifNull(CHANGEDATE, toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'),CHANGEDATE)) ~> dCRawStgAsset",
						"dCRawStgAsset sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as date,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          INSTALLDATE,",
						"          SITEID,",
						"          ORGID,",
						"          CHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgAsset"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgAsset_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcRawStgAsset_ds1",
								"type": "DatasetReference"
							},
							"name": "srcRawStgAsset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGAsset1",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgAsset",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "dCRawStgAsset"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp 'yyyy.MM.dd HH:mm:ss'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgAsset",
						"srcRawStgAsset derive(ENTRY_DT = currentTimestamp(),",
						"          ASSETNUM = iifNull(ASSETNUM, 'NA', ASSETNUM),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          CHANGEDATE = iifNull(CHANGEDATE, toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'),CHANGEDATE)) ~> dCRawStgAsset",
						"dCRawStgAsset sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ASSETNUM as string,",
						"          ASSETTAG as string,",
						"          LOCATION as string,",
						"          DESCRIPTION as string,",
						"          INSTALLDATE as date,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          CHANGEDATE as timestamp,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ASSETNUM,",
						"          ASSETTAG,",
						"          LOCATION,",
						"          DESCRIPTION,",
						"          INSTALLDATE,",
						"          SITEID,",
						"          ORGID,",
						"          CHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgAsset"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgJobPlan_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_RawStgJobPlan_ds",
								"type": "DatasetReference"
							},
							"name": "srcRawStgJobplan"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGJobplan",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgJobplan"
						}
					],
					"transformations": [
						{
							"name": "dCRawStgJobPlan"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JPNUM as string,",
						"          DESCRIPTION as string,",
						"          JPDURATION as double '000,000,000.000',",
						"          STATUS as string,",
						"          PRIORITY as integer '000',",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          PERSONGROUP as string,",
						"          PLUSCREVNUM as integer,",
						"          PLUSCCHANGEDATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgJobplan",
						"srcRawStgJobplan derive(ENTRY_DT = currentTimestamp(),",
						"          JPNUM = iifNull(JPNUM, 'NA', JPNUM),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          JPDURATION = iifNull(JPDURATION, toDouble(0.000), JPDURATION),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          PRIORITY = iifNull(PRIORITY, toInteger(-1), PRIORITY),",
						"          JOBPLANID = iifNull(JOBPLANID, toInteger(-1), JOBPLANID),",
						"          DOWNTIME = iifNull(DOWNTIME, toInteger(-1), DOWNTIME),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          PERSONGROUP = iifNull(PERSONGROUP, 'NA', PERSONGROUP),",
						"          PLUSCREVNUM = iifNull(PLUSCREVNUM, toInteger(-1), PLUSCREVNUM),",
						"          PLUSCCHANGEDATE = iifNull(toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'))) ~> dCRawStgJobPlan",
						"dCRawStgJobPlan sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          JPNUM,",
						"          DESCRIPTION,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          SITEID,",
						"          ORGID,",
						"          PERSONGROUP,",
						"          PLUSCREVNUM,",
						"          PLUSCCHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgJobplan"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgJobPlan_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_RawStgJobPlan_ds1",
								"type": "DatasetReference"
							},
							"name": "srcRawStgJobplan"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynpMXMSTGJobplan1",
								"type": "DatasetReference"
							},
							"name": "sinkRawStgJobplan"
						}
					],
					"transformations": [
						{
							"name": "dCRawStgJobPlan"
						}
					],
					"scriptLines": [
						"source(output(",
						"          JPNUM as string,",
						"          DESCRIPTION as string,",
						"          JPDURATION as double '000,000,000.000',",
						"          STATUS as string,",
						"          PRIORITY as integer '000',",
						"          JOBPLANID as integer,",
						"          DOWNTIME as integer,",
						"          LABORCODE as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          PERSONGROUP as string,",
						"          PLUSCREVNUM as integer,",
						"          PLUSCCHANGEDATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> srcRawStgJobplan",
						"srcRawStgJobplan derive(ENTRY_DT = currentTimestamp(),",
						"          JPNUM = iifNull(JPNUM, 'NA', JPNUM),",
						"          DESCRIPTION = iifNull(DESCRIPTION, 'NA', DESCRIPTION),",
						"          JPDURATION = iifNull(JPDURATION, toDouble(0.000), JPDURATION),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          PRIORITY = iifNull(PRIORITY, toInteger(-1), PRIORITY),",
						"          JOBPLANID = iifNull(JOBPLANID, toInteger(-1), JOBPLANID),",
						"          DOWNTIME = iifNull(DOWNTIME, toInteger(-1), DOWNTIME),",
						"          SITEID = iifNull(SITEID, 'NA', SITEID),",
						"          ORGID = iifNull(ORGID, 'NA', ORGID),",
						"          PERSONGROUP = iifNull(PERSONGROUP, 'NA', PERSONGROUP),",
						"          PLUSCREVNUM = iifNull(PLUSCREVNUM, toInteger(-1), PLUSCREVNUM),",
						"          PLUSCCHANGEDATE = iifNull(toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp('1900-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'), toTimestamp(substring(PLUSCCHANGEDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'))) ~> dCRawStgJobPlan",
						"dCRawStgJobPlan sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          JPNUM,",
						"          DESCRIPTION,",
						"          JPDURATION,",
						"          STATUS,",
						"          PRIORITY,",
						"          JOBPLANID,",
						"          DOWNTIME,",
						"          LABORCODE,",
						"          SITEID,",
						"          ORGID,",
						"          PERSONGROUP,",
						"          PLUSCREVNUM,",
						"          PLUSCCHANGEDATE,",
						"          ENTRY_DT",
						"     )) ~> sinkRawStgJobplan"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgLabtrans_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawSrc_Labtrans_ds",
								"type": "DatasetReference"
							},
							"name": "RawSrcLabTrans"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkStgLabTrans",
								"type": "DatasetReference"
							},
							"name": "sinkStgLabTrans"
						}
					],
					"transformations": [
						{
							"name": "dcRawStgLabTrans"
						},
						{
							"name": "selRawStgLabTrans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          TRANSDATE as string,",
						"          CRAFT as string,",
						"          LABORCODE as string,",
						"          PAYRATE as string,",
						"          STARTDATETIME as string,",
						"          FINISHDATETIME as string,",
						"          REGULARHRS as string,",
						"          STARTDATE as string,",
						"          FINISHDATE as string,",
						"          LABTRANSID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> RawSrcLabTrans",
						"RawSrcLabTrans derive(ENTRY_DT = currentTimestamp(),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          REFWO = iifNull(REFWO, 'NA', REFWO),",
						"          STARTDATETIME = toTimestamp(substring(STARTDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATETIME = toTimestamp(substring(FINISHDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          STARTDATE = toTimestamp(substring(STARTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATE = toTimestamp(substring(FINISHDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          TRANSDATE = toTimestamp(substring(TRANSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')) ~> dcRawStgLabTrans",
						"dcRawStgLabTrans select(mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          TRANSDATE,",
						"          CRAFT,",
						"          PAYRATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          LABTRANSID,",
						"          ENTRY_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selRawStgLabTrans",
						"selRawStgLabTrans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          PAYRATE as decimal(18,2),",
						"          CRAFT as string,",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          STARTDATE as date,",
						"          FINISHDATE as date,",
						"          TRANSDATE as timestamp,",
						"          LAB_ID as integer,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          PAYRATE,",
						"          CRAFT,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          TRANSDATE,",
						"          LAB_ID = LABTRANSID,",
						"          ENTRY_DT",
						"     )) ~> sinkStgLabTrans"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dpRawStgLabtrans_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawSrc_Labtrans_ds1",
								"type": "DatasetReference"
							},
							"name": "RawSrcLabTrans"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkStgLabTrans1",
								"type": "DatasetReference"
							},
							"name": "sinkStgLabTrans"
						}
					],
					"transformations": [
						{
							"name": "dcRawStgLabTrans"
						},
						{
							"name": "selRawStgLabTrans"
						}
					],
					"scriptLines": [
						"source(output(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          TRANSDATE as string,",
						"          CRAFT as string,",
						"          LABORCODE as string,",
						"          PAYRATE as string,",
						"          STARTDATETIME as string,",
						"          FINISHDATETIME as string,",
						"          REGULARHRS as string,",
						"          STARTDATE as string,",
						"          FINISHDATE as string,",
						"          LABTRANSID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> RawSrcLabTrans",
						"RawSrcLabTrans derive(ENTRY_DT = currentTimestamp(),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION),",
						"          REFWO = iifNull(REFWO, 'NA', REFWO),",
						"          STARTDATETIME = toTimestamp(substring(STARTDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATETIME = toTimestamp(substring(FINISHDATETIME, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          STARTDATE = toTimestamp(substring(STARTDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          FINISHDATE = toTimestamp(substring(FINISHDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          TRANSDATE = toTimestamp(substring(TRANSDATE, 1, 23), 'yyyy-MM-dd HH:mm:ss.SSS')) ~> dcRawStgLabTrans",
						"dcRawStgLabTrans select(mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          TRANSDATE,",
						"          CRAFT,",
						"          PAYRATE,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          LABTRANSID,",
						"          ENTRY_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selRawStgLabTrans",
						"selRawStgLabTrans sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          REFWO as string,",
						"          SITEID as string,",
						"          ORGID as string,",
						"          LOCATION as string,",
						"          PAYRATE as decimal(18,2),",
						"          CRAFT as string,",
						"          STARTDATETIME as timestamp,",
						"          FINISHDATETIME as timestamp,",
						"          REGULARHRS as decimal(18,9),",
						"          STARTDATE as date,",
						"          FINISHDATE as date,",
						"          TRANSDATE as timestamp,",
						"          LAB_ID as integer,",
						"          ENTRY_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          REFWO,",
						"          SITEID,",
						"          ORGID,",
						"          LOCATION,",
						"          PAYRATE,",
						"          CRAFT,",
						"          STARTDATETIME,",
						"          FINISHDATETIME,",
						"          REGULARHRS,",
						"          STARTDATE,",
						"          FINISHDATE,",
						"          TRANSDATE,",
						"          LAB_ID = LABTRANSID,",
						"          ENTRY_DT",
						"     )) ~> sinkStgLabTrans"
					]
				}
			},
			"dependsOn": []
		}
	]
}