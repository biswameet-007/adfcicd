{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-cicdpoc-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dp_OperationLdFact_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzSnpMXMSTGAsset31",
								"type": "DatasetReference"
							},
							"name": "srcOperationRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "AssetRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "PersonRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "JobplanRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "PerGrpRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "OpsExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "srcWorkOrderReadRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd61",
								"type": "DatasetReference"
							},
							"name": "JobplanNullSiteRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd21",
								"type": "DatasetReference"
							},
							"name": "sinkOpsInsert"
						},
						{
							"dataset": {
								"referenceName": "SinkOperationLd21",
								"type": "DatasetReference"
							},
							"name": "sinkOperationUpdate"
						}
					],
					"transformations": [
						{
							"name": "srtOperation"
						},
						{
							"name": "dcOps"
						},
						{
							"name": "selOperation"
						},
						{
							"name": "lkpOrgsiteoptn"
						},
						{
							"name": "lkpAssetOptn"
						},
						{
							"name": "lkpPersonOptn"
						},
						{
							"name": "lkpJobplanOptn"
						},
						{
							"name": "lkpPerGrpOptn"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "selOpsExistingRows"
						},
						{
							"name": "lkpExistOperation"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skOperation"
						},
						{
							"name": "dcOperationInsert"
						},
						{
							"name": "alterRowOpsInsert"
						},
						{
							"name": "selectOps"
						},
						{
							"name": "lookupOpsStatusInd"
						},
						{
							"name": "selectOps2"
						},
						{
							"name": "splitOpsForUpdate"
						},
						{
							"name": "selOpsUpdate"
						},
						{
							"name": "dcOpsUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "splitJobPlan"
						},
						{
							"name": "unionJobplan"
						},
						{
							"name": "selectNullJPSite"
						},
						{
							"name": "selectJPNotNullSite"
						},
						{
							"name": "lkpJPNullSite"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          STATUS as string,",
						"          ASSETNUM as string,",
						"          JPNUM as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          WO_CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_COMMITTED',",
						"     query: 'SELECT \\nWO.WONUM AS WONUM,WO.PARENT AS PARENT,GOVTWONUM,WO.ORGID,WO.SITEID,LOCATION,WS.STATUS AS STATUS,ASSETNUM,JPNUM, WS.CHANGEDATE AS WO_STATUS_CHANGEDATE,\\nWORKTYPE,TASKID,ISTASK, DESCRIPTION,PLUSCJPREVNUM,WOPRIORITY,WO.CHANGEDATE AS WO_CHANGEDATE,STATUSDATE,WS.CHANGEBY AS WO_STATUS_CHANGEBY, PMDUEDATE,\\nTARGSTARTDATE,TARGCOMPDATE,REPORTDATE,ACTLABHRS,ACTSTART, ACTFINISH,ACTINTLABHRS,ESTDUR,WOGROUP,PERSONGROUP,OWNERGROUP,PLUSCFREQUENCY,PLUSCFREQUNIT,\\nPMNEXTDUEDATE,PMNUM\\nFROM MXMSTG.STG_WORKORDER WO, MXMSTG.STG_WOSTATUS WS\\n WHERE\\n WS.WONUM=WO.WONUM\\n AND WS.ORGID=WO.ORGID\\n AND WS.SITEID=WO.SITEID',",
						"     format: 'query',",
						"     staged: true) ~> srcOperationRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRefRd",
						"source(output(",
						"          ASSET_ID as integer,",
						"          ASSETNUM_ref as string,",
						"          SITE_ID_ref as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSET_ID,ASSETNUM AS ASSETNUM_ref,SITE_ID AS SITE_ID_ref FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> AssetRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,P.SITE_ID AS SITE_ID,S.ORGANIZATION_ID AS ORGANIZATION_ID FROM \\nMXMDW.PERSON P,\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nO.ORGANIZATION_ID =S.ORGANIZATION_ID\\nAND S.SITE_ID=P.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> PersonRefRd",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JPRef_SITE_ID as integer,",
						"          JPRef_ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID>0',",
						"     format: 'query',",
						"     staged: true) ~> JobplanRefRd",
						"source(output(",
						"          PERSON_GROUP_ID as integer,",
						"          PERSON_GRP_CD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_GROUP_ID,PERSON_GRP_CD FROM MXMDW.PERSON_GROUP',",
						"     format: 'query',",
						"     staged: true) ~> PerGrpRefRd",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_ID),0) FROM  MXMDW.OPERATION',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"source(output(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          SNAPSHOT_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_ID, WONUM,SITE_ID,STATUS,WO_STATUS_CHANGEDATE,SNAPSHOT_DATE FROM MXMDW.OPERATION WHERE CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> OpsExistingRows",
						"source(output(",
						"          RefWONUM as string,",
						"          RefSITE_ID as integer,",
						"          RefSTATUS as string,",
						"          RefSTATUSDATE as timestamp,",
						"          FLAG as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS RefWONUM,S.SITE_ID AS RefSITE_ID,STATUS AS RefSTATUS,STATUSDATE AS RefSTATUSDATE,\\'1\\' AS FLAG FROM MXMSTG.STG_WORKORDER WO,MXMDW.SITE S\\nWHERE\\nWO.SITEID=S.SITE_NM',",
						"     format: 'query',",
						"     staged: true) ~> srcWorkOrderReadRef",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string,",
						"          JPRef_SITE_ID as integer,",
						"          JPRef_ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM,SITE_ID AS JPRef_SITE_ID,ORGANIZATION_ID AS JPRef_ORGANIZATION_ID FROM MXMDW.JOBPLAN WHERE STATUS=\\'ACTIVE\\' AND SITE_ID<0',",
						"     format: 'query',",
						"     staged: true) ~> JobplanNullSiteRd",
						"srcOperationRead sort(asc(WONUM, true),",
						"     asc(PARENT, true),",
						"     asc(ORGID, true),",
						"     asc(SITEID, true),",
						"     asc(WO_STATUS_CHANGEDATE, true),",
						"     caseInsensitive: true) ~> srtOperation",
						"lookupOpsStatusInd derive(CAL_PMDUEDT = iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),",
						"          WORKTYPE_CM_PM = case(\r",
						"     (WORKTYPE == 'CM' || WORKTYPE == 'DMO' || WORKTYPE == 'OWO' || WORKTYPE == 'SERV'), 'CM',\r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), 'PM',\r",
						"        (WORKTYPE == 'PJ' || WORKTYPE == 'PWO' ), 'PJ',\r",
						"        'OTHERS'  \r",
						"     ),",
						"          {REPORTMONTH_YEAR } = year(REPORTDATE),",
						"          REPORTDATE_MONTH = month(REPORTDATE),",
						"          REPORTDATE_CM_PM = case(     \r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),       \r",
						"        REPORTDATE  \r",
						"     ),",
						"          CURRENT_RECORD_IND = iifNull(toInteger(FLAG), 0, 1),",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          SNAPSHOT_DATE = toTimestamp(toString(WO_STATUS_CHANGEDATE, 'yyyy-MM-dd 00:00:00'),'yyyy-MM-dd HH:mm:ss'),",
						"          ASSET_ID = iifNull(ASSET_ID, toInteger(-1), ASSET_ID),",
						"          PERSON_ID = iifNull(PERSON_ID, toInteger(-1), PERSON_ID),",
						"          JP_ID = iifNull(JP_ID, toInteger(-1), JP_ID),",
						"          PERSON_GROUP_ID = iifNull(PERSON_GROUP_ID, toInteger(-1), PERSON_GROUP_ID),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID),",
						"          AVAILABLE_MANHOUR = toInteger(506),",
						"          PARENT_ACTLABHRS = toDecimal(0.0),",
						"          STATUS_FLAG = case(     \r",
						"     (STATUS == 'READY' || STATUS == 'CLOSE' || STATUS == 'CAN' || STATUS == 'COMP'), 2,1        \r",
						"     )) ~> dcOps",
						"joinMaxKey select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION_ID,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCREVNUM = PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          WO_CHANGEDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          WOGROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          PERSON_GROUP = PERSONGROUP,",
						"          ESTDUR,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          CURRENT_RECORD_IND,",
						"          PARENT_ACTLABHRS,",
						"          MAXKEY,",
						"          STATUS_FLAG",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOperation",
						"srtOperation, OrgSiteRefRd lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgsiteoptn",
						"lkpLocation, AssetRefRd lookup(ASSETNUM == ASSETNUM_ref",
						"     && SITE_ID == SITE_ID_ref,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpAssetOptn",
						"lkpAssetOptn, PersonRefRd lookup(WO_STATUS_CHANGEBY == PERSON_NBR",
						"     && OrgSiteRefRd@ORGANIZATION_ID == PersonRefRd@ORGANIZATION_ID",
						"     && OrgSiteRefRd@SITE_ID == PersonRefRd@SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpPersonOptn",
						"lkpPersonOptn, JobplanRefRd lookup(JPNUM == JP_NUM",
						"     && OrgSiteRefRd@SITE_ID == JPRef_SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpJobplanOptn",
						"unionJobplan, PerGrpRefRd lookup(PERSONGROUP == PERSON_GRP_CD,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPerGrpOptn",
						"lkpOrgsiteoptn, LocationRefRd lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"OpsExistingRows select(mapColumn(",
						"          ExistWONUM = WONUM,",
						"          ExistOPERATION_ID = OPERATION_ID,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistWO_STATUS_CHANGEDATE = WO_STATUS_CHANGEDATE,",
						"          ExistSNAPSHOT_DATE = SNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsExistingRows",
						"selectOps2, selOpsExistingRows lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpExistOperation",
						"lkpExistOperation, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"selOperation keyGenerate(output(NewOPERATION_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skOperation",
						"skOperation derive(OPERATION_ID = MAXKEY + NewOPERATION_ID) ~> dcOperationInsert",
						"dcOperationInsert alterRow(insertIf(1==1)) ~> alterRowOpsInsert",
						"lkpPerGrpOptn select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps",
						"selectOps, srcWorkOrderReadRef lookup(WONUM == RefWONUM",
						"     && SITE_ID == RefSITE_ID",
						"     && STATUS == RefSTATUS",
						"     && WO_STATUS_CHANGEDATE == RefSTATUSDATE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 4,",
						"          WONUM,",
						"          SITE_ID,",
						"          STATUS,",
						"          REPORTDATE",
						"     ),",
						"     broadcast: 'both')~> lookupOpsStatusInd",
						"dcOps select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          STATUS_FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps2",
						"lkpExistOperation split(!isNull(ExistOPERATION_ID),",
						"     disjoint: false) ~> splitOpsForUpdate@(UpdateCurrRecInd, DoNotReprocessNewRecords)",
						"splitOpsForUpdate@UpdateCurrRecInd select(mapColumn(",
						"          WONUM,",
						"          SITE_ID,",
						"          CURRENT_RECORD_IND,",
						"          SNAPSHOT_DATE,",
						"          ExistWONUM,",
						"          ExistOPERATION_ID,",
						"          ExistSITE_ID,",
						"          ExistSNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsUpdate",
						"selOpsUpdate derive(NewCURRENT_RECORD_IND = toInteger(0)) ~> dcOpsUpdate",
						"dcOpsUpdate alterRow(updateIf(CURRENT_RECORD_IND==1)) ~> alterRowUpdate",
						"lkpJobplanOptn split(isNull(JP_ID),",
						"     disjoint: false) ~> splitJobPlan@(NullJobPlanSite, NotNullJobPlanSite)",
						"selectNullJPSite, selectJPNotNullSite union(byName: true)~> unionJobplan",
						"lkpJPNullSite select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGID,",
						"          SITEID,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID = splitJobPlan@NullJobPlanSite@ORGANIZATION_ID,",
						"          SITE_ID = splitJobPlan@NullJobPlanSite@SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_NUM = splitJobPlan@NullJobPlanSite@JP_NUM,",
						"          JPRef_SITE_ID = splitJobPlan@NullJobPlanSite@JPRef_SITE_ID,",
						"          JPRef_ORGANIZATION_ID = splitJobPlan@NullJobPlanSite@JPRef_ORGANIZATION_ID,",
						"          JP_ID = JobplanNullSiteRd@JP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNullJPSite",
						"splitJobPlan@NotNullJobPlanSite select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGID,",
						"          SITEID,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID = splitJobPlan@NotNullJobPlanSite@ORGANIZATION_ID,",
						"          SITE_ID = splitJobPlan@NotNullJobPlanSite@SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          JPRef_SITE_ID,",
						"          JPRef_ORGANIZATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJPNotNullSite",
						"splitJobPlan@NullJobPlanSite, JobplanNullSiteRd lookup(JPNUM == JobplanNullSiteRd@JP_NUM",
						"     && splitJobPlan@NullJobPlanSite@ORGANIZATION_ID == JobplanNullSiteRd@JPRef_ORGANIZATION_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpJPNullSite",
						"alterRowOpsInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          STATUS,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJREVNUM = PLUSCREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          STATUSDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSON_GROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          REPORTMONTH_YEAR = {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          SNAPSHOT_DATE,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          STATUS_FLAG",
						"     )) ~> sinkOpsInsert",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID = ExistOPERATION_ID,",
						"          CURRENT_RECORD_IND = NewCURRENT_RECORD_IND",
						"     )) ~> sinkOperationUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OperationLdFact_df_bkp_vib')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzSnpMXMSTGAsset",
								"type": "DatasetReference"
							},
							"name": "srcOperationRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "AssetRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "PersonRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "JobplanRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "PerGrpRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "OpsExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcWorkOrderReadRef"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsInsert"
						},
						{
							"dataset": {
								"referenceName": "SinkOperationLd",
								"type": "DatasetReference"
							},
							"name": "sinkOperationUpdate"
						}
					],
					"transformations": [
						{
							"name": "srtOperation"
						},
						{
							"name": "dcOps"
						},
						{
							"name": "selOperation"
						},
						{
							"name": "lkpOrgsiteoptn"
						},
						{
							"name": "lkpAssetOptn"
						},
						{
							"name": "lkpPersonOptn"
						},
						{
							"name": "lkpJobplanOptn"
						},
						{
							"name": "lkpPerGrpOptn"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "existsOperation"
						},
						{
							"name": "selOpsExistingRows"
						},
						{
							"name": "lkpExistOperation"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skOperation"
						},
						{
							"name": "dcOperationInsert"
						},
						{
							"name": "alterRowOpsInsert"
						},
						{
							"name": "selectOps"
						},
						{
							"name": "splitOperation"
						},
						{
							"name": "selOperationUpdate"
						},
						{
							"name": "dcOpsUpdate"
						},
						{
							"name": "alterRowOpsUpdate"
						},
						{
							"name": "lookupOpsStatusInd"
						},
						{
							"name": "selectOps2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          STATUS as string,",
						"          ASSETNUM as string,",
						"          JPNUM as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          WO_CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_COMMITTED',",
						"     query: 'SELECT \\nWO.WONUM AS WONUM,WO.PARENT AS PARENT,GOVTWONUM,WO.ORGID,WO.SITEID,LOCATION,WS.STATUS AS STATUS,ASSETNUM,JPNUM, WS.CHANGEDATE AS WO_STATUS_CHANGEDATE,\\nWORKTYPE,TASKID,ISTASK, DESCRIPTION,PLUSCJPREVNUM,WOPRIORITY,WO.CHANGEDATE AS WO_CHANGEDATE,STATUSDATE,WS.CHANGEBY AS WO_STATUS_CHANGEBY, PMDUEDATE,\\nTARGSTARTDATE,TARGCOMPDATE,REPORTDATE,ACTLABHRS,ACTSTART, ACTFINISH,ACTINTLABHRS,ESTDUR,WOGROUP,PERSONGROUP,OWNERGROUP,PLUSCFREQUENCY,PLUSCFREQUNIT,\\nPMNEXTDUEDATE,PMNUM\\nFROM MXMSTG.STG_WORKORDER WO, MXMSTG.STG_WOSTATUS WS\\n WHERE\\n WS.WONUM=WO.WONUM\\n AND WS.ORGID=WO.ORGID\\n AND WS.SITEID=WO.SITEID',",
						"     format: 'query',",
						"     staged: true) ~> srcOperationRead",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRefRd",
						"source(output(",
						"          ASSET_ID as integer,",
						"          ASSETNUM_ref as string,",
						"          SITE_ID_ref as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ASSET_ID,ASSETNUM AS ASSETNUM_ref,SITE_ID AS SITE_ID_ref FROM MXMDW.ASSET',",
						"     format: 'query',",
						"     staged: true) ~> AssetRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          SITE_ID as integer,",
						"          ORGANIZATION_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,P.SITE_ID AS SITE_ID,S.ORGANIZATION_ID AS ORGANIZATION_ID FROM \\nMXMDW.PERSON P,\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nO.ORGANIZATION_ID =S.ORGANIZATION_ID\\nAND S.SITE_ID=P.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> PersonRefRd",
						"source(output(",
						"          JP_ID as integer,",
						"          JP_NUM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT JP_ID,JP_NUM FROM MXMDW.JOBPLAN',",
						"     format: 'query',",
						"     staged: true) ~> JobplanRefRd",
						"source(output(",
						"          PERSON_GROUP_ID as integer,",
						"          PERSON_GRP_CD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_GROUP_ID,PERSON_GRP_CD FROM MXMDW.PERSON_GROUP',",
						"     format: 'query',",
						"     staged: true) ~> PerGrpRefRd",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_ID),0) FROM  MXMDW.OPERATION',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"source(output(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          SNAPSHOT_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_ID, WONUM,SITE_ID,STATUS,WO_STATUS_CHANGEDATE,SNAPSHOT_DATE FROM MXMDW.OPERATION WHERE CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> OpsExistingRows",
						"source(output(",
						"          RefWONUM as string,",
						"          RefSITE_ID as integer,",
						"          RefSTATUS as string,",
						"          RefCHANGEDATE as timestamp,",
						"          FLAG as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS RefWONUM,S.SITE_ID AS RefSITE_ID,STATUS AS RefSTATUS,CHANGEDATE AS RefCHANGEDATE,\\'1\\' AS FLAG FROM MXMSTG.STG_WORKORDER WO,MXMDW.SITE S\\nWHERE\\nWO.SITEID=S.SITE_NM',",
						"     format: 'query',",
						"     staged: true) ~> srcWorkOrderReadRef",
						"srcOperationRead sort(asc(WONUM, true),",
						"     asc(PARENT, true),",
						"     asc(ORGID, true),",
						"     asc(SITEID, true),",
						"     asc(WO_STATUS_CHANGEDATE, true),",
						"     caseInsensitive: true) ~> srtOperation",
						"lookupOpsStatusInd derive(CAL_PMDUEDT = iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),",
						"          WORKTYPE_CM_PM = case(\r",
						"     (WORKTYPE == 'CM' || WORKTYPE == 'DMO' || WORKTYPE == 'OWO' || WORKTYPE == 'SERV'), 'CM',\r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), 'PM',\r",
						"        (WORKTYPE == 'PJ' || WORKTYPE == 'PWO' ), 'PJ',\r",
						"        'OTHERS'  \r",
						"     ),",
						"          {REPORTMONTH_YEAR } = year(REPORTDATE),",
						"          REPORTDATE_MONTH = month(REPORTDATE),",
						"          REPORTDATE_CM_PM = case(     \r",
						"     (WORKTYPE == 'PM' || WORKTYPE == 'INSP' || WORKTYPE == 'SWM' || WORKTYPE == 'PMO'), iifNull(PMDUEDATE, TARGSTARTDATE,REPORTDATE),       \r",
						"        REPORTDATE  \r",
						"     ),",
						"          CURRENT_RECORD_IND = iifNull(toInteger(FLAG), 0, 1),",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          SNAPSHOT_DATE = toTimestamp(toString(WO_STATUS_CHANGEDATE, 'yyyy-MM-dd 00:00:00'),'yyyy-MM-dd HH:mm:ss'),",
						"          ASSET_ID = iifNull(ASSET_ID, toInteger(-1), ASSET_ID),",
						"          PERSON_ID = iifNull(PERSON_ID, toInteger(-1), PERSON_ID),",
						"          JP_ID = iifNull(JP_ID, toInteger(-1), JP_ID),",
						"          PERSON_GROUP_ID = iifNull(PERSON_GROUP_ID, toInteger(-1), PERSON_GROUP_ID),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID),",
						"          AVAILABLE_MANHOUR = toInteger(506),",
						"          PARENT_ACTLABHRS = toDecimal(0.0),",
						"          STATUS_FLAG = case(     \r",
						"     (STATUS == 'READY' || STATUS == 'CLOSE' || STATUS == 'CAN' || STATUS == 'COMP'), 2,1        \r",
						"     )) ~> dcOps",
						"joinMaxKey select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION_ID,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCREVNUM = PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          WO_CHANGEDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          WOGROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          PERSON_GROUP = PERSONGROUP,",
						"          ESTDUR,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          CURRENT_RECORD_IND,",
						"          PARENT_ACTLABHRS,",
						"          MAXKEY,",
						"          STATUS_FLAG",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOperation",
						"srtOperation, OrgSiteRefRd lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgsiteoptn",
						"lkpLocation, AssetRefRd lookup(ASSETNUM == ASSETNUM_ref",
						"     && SITE_ID == SITE_ID_ref,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpAssetOptn",
						"lkpAssetOptn, PersonRefRd lookup(WO_STATUS_CHANGEBY == PERSON_NBR",
						"     && OrgSiteRefRd@ORGANIZATION_ID == PersonRefRd@ORGANIZATION_ID",
						"     && OrgSiteRefRd@SITE_ID == PersonRefRd@SITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'both')~> lkpPersonOptn",
						"lkpPersonOptn, JobplanRefRd lookup(JPNUM == JP_NUM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpJobplanOptn",
						"lkpJobplanOptn, PerGrpRefRd lookup(PERSONGROUP == PERSON_GRP_CD,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPerGrpOptn",
						"lkpOrgsiteoptn, LocationRefRd lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"selectOps2, selOpsExistingRows exists(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     negate:true,",
						"     partitionBy('hash', 4,",
						"          WONUM,",
						"          SITE_ID,",
						"          STATUS",
						"     ),",
						"     broadcast: 'right')~> existsOperation",
						"OpsExistingRows select(mapColumn(",
						"          ExistWONUM = WONUM,",
						"          ExistOPERATION_ID = OPERATION_ID,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistWO_STATUS_CHANGEDATE = WO_STATUS_CHANGEDATE,",
						"          ExistSNAPSHOT_DATE = SNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsExistingRows",
						"existsOperation, selOpsExistingRows lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpExistOperation",
						"splitOperation@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"selOperation keyGenerate(output(NewOPERATION_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skOperation",
						"skOperation derive(OPERATION_ID = MAXKEY + NewOPERATION_ID) ~> dcOperationInsert",
						"dcOperationInsert alterRow(insertIf(1==1)) ~> alterRowOpsInsert",
						"lkpPerGrpOptn select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID = OrgSiteRefRd@ORGANIZATION_ID,",
						"          SITE_ID = OrgSiteRefRd@SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps",
						"lkpExistOperation split(isNull(ExistOPERATION_ID),",
						"     disjoint: false) ~> splitOperation@(NewItem, UpdateItem)",
						"splitOperation@UpdateItem select(mapColumn(",
						"          WONUM,",
						"          SITE_ID,",
						"          SNAPSHOT_DATE,",
						"          ExistWONUM,",
						"          ExistOPERATION_ID,",
						"          ExistSITE_ID,",
						"          ExistSNAPSHOT_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOperationUpdate",
						"selOperationUpdate derive(CURRENT_RECORD_IND = 0) ~> dcOpsUpdate",
						"dcOpsUpdate alterRow(updateIf(WONUM==ExistWONUM&&SITE_ID==ExistSITE_ID&&SNAPSHOT_DATE>ExistSNAPSHOT_DATE)) ~> alterRowOpsUpdate",
						"selectOps, srcWorkOrderReadRef lookup(WONUM == RefWONUM",
						"     && SITE_ID == RefSITE_ID",
						"     && STATUS == RefSTATUS",
						"     && WO_CHANGEDATE == RefCHANGEDATE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 4,",
						"          WONUM,",
						"          SITE_ID,",
						"          STATUS,",
						"          REPORTDATE",
						"     ),",
						"     broadcast: 'both')~> lookupOpsStatusInd",
						"dcOps select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          LOCATION,",
						"          STATUS,",
						"          ASSETNUM,",
						"          JPNUM,",
						"          WO_STATUS_CHANGEDATE,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          STATUSDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          ORGANIZATION_NM,",
						"          SITE_NM,",
						"          LOCATION_ID,",
						"          DIM_LOCATION,",
						"          LOCATION_DESC,",
						"          LOC_SITE_NM,",
						"          ASSET_ID,",
						"          ASSETNUM_ref,",
						"          SITE_ID_ref,",
						"          PERSON_ID,",
						"          PERSON_NBR,",
						"          JP_ID,",
						"          JP_NUM,",
						"          PERSON_GROUP_ID,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          SNAPSHOT_DATE,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          STATUS_FLAG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOps2",
						"alterRowOpsInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID = NewOPERATION_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSET_ID,",
						"          PERSON_ID,",
						"          JP_ID,",
						"          PERSON_GROUP_ID,",
						"          STATUS,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJREVNUM = PLUSCREVNUM,",
						"          WOPRIORITY,",
						"          WO_CHANGEDATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          WO_STATUS_CHANGEBY,",
						"          STATUSDATE,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSON_GROUP,",
						"          CAL_PMDUEDT,",
						"          WORKTYPE_CM_PM,",
						"          REPORTMONTH_YEAR = {REPORTMONTH_YEAR },",
						"          REPORTDATE_MONTH,",
						"          REPORTDATE_CM_PM,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          AVAILABLE_MANHOUR,",
						"          PARENT_ACTLABHRS,",
						"          SNAPSHOT_DATE,",
						"          CURRENT_RECORD_IND,",
						"          EFFECTIVE_DT,",
						"          STATUS_FLAG",
						"     )) ~> sinkOpsInsert",
						"alterRowOpsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_ID = ExistOPERATION_ID,",
						"          CURRENT_RECORD_IND",
						"     )) ~> sinkOperationUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OpsSmry_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcOpsSmryRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "ExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxSKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryLdInsert"
						},
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcOpsSmry"
						},
						{
							"name": "SKOpsSmry"
						},
						{
							"name": "dcWoAge"
						},
						{
							"name": "dcISbacklog"
						},
						{
							"name": "selOpsSmry"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "existsOpsSmry"
						},
						{
							"name": "lookupOpsSmry"
						},
						{
							"name": "splitOpsSmry"
						},
						{
							"name": "joinMaxSK"
						},
						{
							"name": "dcInsertItem"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "joinLocation"
						},
						{
							"name": "selOpsSmryUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "dcOpsSmryUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          DESCRIPTION as string,",
						"          LOCATION_ID as integer,",
						"          ASSET as string,",
						"          ASSET_ID as integer,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as string,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WORKTYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          SNAPSHOT_DT as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION_ID AS LOCATION_ID,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.PERSON_GROUP_ID AS PERSON_GROUP_ID,OPS.SNAPSHOT_DATE AS SNAPSHOT_DT\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nAND OPS.CURRENT_RECORD_IND=1\\n--AND OPS.EFFECTIVE_DT>= CONVERT (DATE, SYSDATETIME())\\nAND OPS.EFFECTIVE_DT= (SELECT MAX(EFFECTIVE_DT) FROM MXMDW.OPERATION)\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcOpsSmryRd",
						"source(output(",
						"          ExistOPERATION_SUMMARY_ID as integer,",
						"          ExistWORK_ORDER as string,",
						"          ExistSITE as string,",
						"          ExistSRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SITE AS ExistSITE,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRows",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> MaxSKey",
						"source(output(",
						"          RefLOCATION_ID as integer,",
						"          LOCATION as string,",
						"          RefSITE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION_ID AS RefLOCATION_ID,LOCATION,SITE_ID AS RefSITE_ID FROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"joinLocation derive(WO_OPEN_DT = REPORTED_DATE,",
						"          WO_DUE_DT = case(\r",
						"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
						"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
						"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"CM\"), addDays(REPORTED_DATE,90),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"PM\"), addDays(REPORTED_DATE,45),\r",
						"REPORTED_DATE\r",
						"),",
						"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
						"    (PRIORITY == \"1\"), 1,\r",
						"    (PRIORITY == \"2\"), 7,\r",
						"    (PRIORITY == \"3\"), 30,\r",
						"    (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"CM\"), 90,\r",
						"     (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"PM\"), 45,\r",
						"     0\r",
						"),",
						"          WO_CLOSE_DT = case\r",
						"(\r",
						"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
						"    ),",
						"          PRIORITY = toInteger(PRIORITY),",
						"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
						"joinMaxSK keyGenerate(output(NewOPERATION_SUMMARY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SKOpsSmry",
						"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
						"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
						"dcWoAge derive(IS_BACKLOG = case\r",
						"(\r",
						"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
						"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
						"     'Yes' ),",
						"          WO_AGE_SEGMENT = case\r",
						"(\r",
						"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
						"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
						"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
						"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
						"     'Above 90 Days' \r",
						"     )) ~> dcISbacklog",
						"dcNewHashKey select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
						"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,SITE,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
						"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY",
						"     && WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     negate:true,",
						"     partitionBy('hash', 4,",
						"          WORK_ORDER,",
						"          SITE",
						"     ),",
						"     broadcast: 'right')~> existsOpsSmry",
						"existsOpsSmry, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupOpsSmry",
						"lookupOpsSmry split(isNull(ExistOPERATION_SUMMARY_ID),",
						"     disjoint: false) ~> splitOpsSmry@(NewItem, UpdateItem)",
						"splitOpsSmry@NewItem, MaxSKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxSK",
						"SKOpsSmry derive(NewOPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID + MAXKEY,",
						"          ACTLABHRS = toDecimal(0.00),",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertItem",
						"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
						"srcOpsSmryRd, LocationRefRd join(LOCATION_ID == RefLOCATION_ID",
						"     && SITE_ID == RefSITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocation",
						"splitOpsSmry@UpdateItem select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          ExistOPERATION_SUMMARY_ID,",
						"          ExistWORK_ORDER,",
						"          ExistSITE,",
						"          ExistSRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmryUpdate",
						"dcOpsSmryUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selOpsSmryUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcOpsSmryUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          IS_BACKLOG,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          PERSON_GROUP_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryLdInsert",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_SUMMARY_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = ExistOPERATION_SUMMARY_ID,",
						"          WORK_ORDER = ExistWORK_ORDER,",
						"          SITE = ExistSITE,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          IS_BACKLOG,",
						"          SNAPSHOT_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OpsSmry_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "srcOpsSmryRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "ExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "MaxSKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd1",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryLdInsert"
						},
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd1",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcOpsSmry"
						},
						{
							"name": "SKOpsSmry"
						},
						{
							"name": "dcWoAge"
						},
						{
							"name": "dcISbacklog"
						},
						{
							"name": "selOpsSmry"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "existsOpsSmry"
						},
						{
							"name": "lookupOpsSmry"
						},
						{
							"name": "splitOpsSmry"
						},
						{
							"name": "joinMaxSK"
						},
						{
							"name": "dcInsertItem"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "joinLocation"
						},
						{
							"name": "selOpsSmryUpdate"
						},
						{
							"name": "alterRowUpdate"
						},
						{
							"name": "dcOpsSmryUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          DESCRIPTION as string,",
						"          LOCATION_ID as integer,",
						"          ASSET as string,",
						"          ASSET_ID as integer,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as string,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WORKTYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          SNAPSHOT_DT as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION_ID AS LOCATION_ID,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.PERSON_GROUP_ID AS PERSON_GROUP_ID,OPS.SNAPSHOT_DATE AS SNAPSHOT_DT\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nAND OPS.CURRENT_RECORD_IND=1\\n--AND OPS.EFFECTIVE_DT>= CONVERT (DATE, SYSDATETIME())\\nAND OPS.EFFECTIVE_DT= (SELECT MAX(EFFECTIVE_DT) FROM MXMDW.OPERATION)\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcOpsSmryRd",
						"source(output(",
						"          ExistOPERATION_SUMMARY_ID as integer,",
						"          ExistWORK_ORDER as string,",
						"          ExistSITE as string,",
						"          ExistSRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SITE AS ExistSITE,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRows",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> MaxSKey",
						"source(output(",
						"          RefLOCATION_ID as integer,",
						"          LOCATION as string,",
						"          RefSITE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION_ID AS RefLOCATION_ID,LOCATION,SITE_ID AS RefSITE_ID FROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"joinLocation derive(WO_OPEN_DT = REPORTED_DATE,",
						"          WO_DUE_DT = case(\r",
						"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
						"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
						"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"CM\"), addDays(REPORTED_DATE,90),\r",
						"(PRIORITY == \"4\" && WORKTYPE_CM_PM ==\"PM\"), addDays(REPORTED_DATE,45),\r",
						"REPORTED_DATE\r",
						"),",
						"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
						"    (PRIORITY == \"1\"), 1,\r",
						"    (PRIORITY == \"2\"), 7,\r",
						"    (PRIORITY == \"3\"), 30,\r",
						"    (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"CM\"), 90,\r",
						"     (PRIORITY == \"4\" && WORKTYPE_CM_PM==\"PM\"), 45,\r",
						"     0\r",
						"),",
						"          WO_CLOSE_DT = case\r",
						"(\r",
						"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
						"    ),",
						"          PRIORITY = toInteger(PRIORITY),",
						"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
						"joinMaxSK keyGenerate(output(NewOPERATION_SUMMARY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SKOpsSmry",
						"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
						"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
						"dcWoAge derive(IS_BACKLOG = case\r",
						"(\r",
						"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
						"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
						"     'Yes' ),",
						"          WO_AGE_SEGMENT = case\r",
						"(\r",
						"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
						"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
						"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
						"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
						"     'Above 90 Days' \r",
						"     )) ~> dcISbacklog",
						"dcNewHashKey select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
						"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,SITE,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
						"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY",
						"     && WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     negate:true,",
						"     partitionBy('hash', 4,",
						"          WORK_ORDER,",
						"          SITE",
						"     ),",
						"     broadcast: 'right')~> existsOpsSmry",
						"existsOpsSmry, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupOpsSmry",
						"lookupOpsSmry split(isNull(ExistOPERATION_SUMMARY_ID),",
						"     disjoint: false) ~> splitOpsSmry@(NewItem, UpdateItem)",
						"splitOpsSmry@NewItem, MaxSKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxSK",
						"SKOpsSmry derive(NewOPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID + MAXKEY,",
						"          ACTLABHRS = toDecimal(0.00),",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertItem",
						"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
						"srcOpsSmryRd, LocationRefRd join(LOCATION_ID == RefLOCATION_ID",
						"     && SITE_ID == RefSITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocation",
						"splitOpsSmry@UpdateItem select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          WO_STATUS_CHANGEDATE,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          ExistOPERATION_SUMMARY_ID,",
						"          ExistWORK_ORDER,",
						"          ExistSITE,",
						"          ExistSRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmryUpdate",
						"dcOpsSmryUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selOpsSmryUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcOpsSmryUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = NewOPERATION_SUMMARY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          WO_STATUS_CHANGEDATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          IS_BACKLOG,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          PERSON_GROUP_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryLdInsert",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['OPERATION_SUMMARY_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = ExistOPERATION_SUMMARY_ID,",
						"          WORK_ORDER = ExistWORK_ORDER,",
						"          SITE = ExistSITE,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          IS_BACKLOG,",
						"          SNAPSHOT_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OpsSmry_df_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcOpsSmryRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "ExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxSKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryLdInsert"
						}
					],
					"transformations": [
						{
							"name": "dcOpsSmry"
						},
						{
							"name": "SKOpsSmry"
						},
						{
							"name": "dcWoAge"
						},
						{
							"name": "dcISbacklog"
						},
						{
							"name": "selOpsSmry"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "exists"
						},
						{
							"name": "lookup"
						},
						{
							"name": "split"
						},
						{
							"name": "joinMaxSK"
						},
						{
							"name": "dcInsertItem"
						},
						{
							"name": "alterRowInsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          DESCRIPTION as string,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as string,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WORKTYPE_CM_PM as string,",
						"          TRADES as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\n\\nSELECT WORK_ORDER,GOVT_WO,ORGANIZATION_ID,SITE_ID,DESCRIPTION,LOCATION, ASSET,\\nREPORTED_DATE,PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGET_START_DT,TARGET_FINISH_DT,WORK_GROUP,WORK_TYPE,\\nPM_DUE_DT, SITE,WORKTYPE_CM_PM, TRADES\\nFROM(\\nSELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION AS LOCATION,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.TRADES AS TRADES,\\nRANK() OVER(PARTITION BY WONUM,PARENT,OPS.SITE_ID ORDER BY WO_STATUS_CHANGEDATE DESC) RNK\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n) TMP\\nWHERE RNK=1\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcOpsSmryRd",
						"source(output(",
						"          ExistOPERATION_SUMMARY_ID as integer,",
						"          ExistWORK_ORDER as string,",
						"          ExistSRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRows",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> MaxSKey",
						"srcOpsSmryRd derive(WO_OPEN_DT = REPORTED_DATE,",
						"          WO_DUE_DT = case(\r",
						"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
						"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
						"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
						"(PRIORITY == \"4\"), addDays(REPORTED_DATE,45),\r",
						"REPORTED_DATE\r",
						"),",
						"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
						"    (PRIORITY == \"1\"), 1,\r",
						"    (PRIORITY == \"2\"), 7,\r",
						"    (PRIORITY == \"3\"), 30,\r",
						"    (PRIORITY == \"4\"), 45,\r",
						"     0\r",
						"),",
						"          WO_CLOSE_DT = case\r",
						"(\r",
						"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
						"    ),",
						"          PRIORITY = toInteger(PRIORITY),",
						"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
						"joinMaxSK keyGenerate(output(NEWOPERATION_SUMMARY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SKOpsSmry",
						"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
						"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
						"dcWoAge derive(IS_BACKLOG = case\r",
						"(\r",
						"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
						"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
						"     'Yes' ),",
						"          WO_AGE_SEGMENT = case\r",
						"(\r",
						"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
						"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
						"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
						"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
						"     'Above 90 Days' \r",
						"     )) ~> dcISbacklog",
						"dcNewHashKey select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WORKTYPE_CM_PM,",
						"          TRADES,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
						"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
						"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists",
						"exists, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup split(isNull(ExistOPERATION_SUMMARY_ID),",
						"     disjoint: false) ~> split@(NewItem, UpdateItem)",
						"split@NewItem, MaxSKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxSK",
						"SKOpsSmry derive(NEWOPERATION_SUMMARY_ID = NEWOPERATION_SUMMARY_ID + MAXKEY,",
						"          SNAPSHOT_DT = currentTimestamp(),",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          ACTLABHRS = toDecimal(0.00)) ~> dcInsertItem",
						"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = NEWOPERATION_SUMMARY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          IS_BACKLOG,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          TRADE = TRADES,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryLdInsert"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_OpsSmry_df_uat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcOpsSmryRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "ExistingRows"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxSKey"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "LocationRefRd"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkOperationSmryLd",
								"type": "DatasetReference"
							},
							"name": "sinkOpsSmryLdInsert"
						}
					],
					"transformations": [
						{
							"name": "dcOpsSmry"
						},
						{
							"name": "SKOpsSmry"
						},
						{
							"name": "dcWoAge"
						},
						{
							"name": "dcISbacklog"
						},
						{
							"name": "selOpsSmry"
						},
						{
							"name": "dcNewHashKey"
						},
						{
							"name": "exists"
						},
						{
							"name": "lookup"
						},
						{
							"name": "split"
						},
						{
							"name": "joinMaxSK"
						},
						{
							"name": "dcInsertItem"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "joinLocation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          DESCRIPTION as string,",
						"          LOCATION_ID as integer,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as string,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WORKTYPE_CM_PM as string,",
						"          TRADES as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\n\\nSELECT WORK_ORDER,GOVT_WO,ORGANIZATION_ID,SITE_ID,DESCRIPTION,LOCATION_ID, ASSET,\\nREPORTED_DATE,PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGET_START_DT,TARGET_FINISH_DT,WORK_GROUP,WORK_TYPE,\\nPM_DUE_DT, SITE,WORKTYPE_CM_PM, TRADES\\nFROM(\\nSELECT WONUM AS WORK_ORDER,GOVTWONUM AS GOVT_WO,OPS.ORGANIZATION_ID AS ORGANIZATION_ID,OPS.SITE_ID AS SITE_ID,OPS.DESCRIPTION AS DESCRIPTION,OPS.LOCATION_ID AS LOCATION_ID,\\nISNULL(A.ASSETNUM,\\'NA\\') AS ASSET,\\nOPS.ASSET_ID AS ASSET_ID,\\nREPORTDATE AS REPORTED_DATE,WOPRIORITY AS PRIORITY,STATUS,WO_STATUS_CHANGEDATE,TARGSTARTDATE AS TARGET_START_DT,\\nTARGCOMPDATE AS TARGET_FINISH_DT,PERSON_GROUP AS WORK_GROUP,WORKTYPE AS WORK_TYPE,PMDUEDATE AS PM_DUE_DT,\\nS.SITE_NM AS SITE,OPS.WORKTYPE_CM_PM AS WORKTYPE_CM_PM,OPS.TRADES AS TRADES,\\nRANK() OVER(PARTITION BY WONUM,PARENT,OPS.SITE_ID ORDER BY WO_STATUS_CHANGEDATE DESC) RNK\\nFROM\\nMXMDW.OPERATION OPS INNER JOIN MXMDW.SITE S\\nON S.SITE_ID=OPS.SITE_ID\\nAND OPS.ISTASK = 0\\nLEFT OUTER JOIN MXMDW.ASSET A\\nON A.ASSET_ID=OPS.ASSET_ID\\n) TMP\\nWHERE RNK=1\\n\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcOpsSmryRd",
						"source(output(",
						"          ExistOPERATION_SUMMARY_ID as integer,",
						"          ExistWORK_ORDER as string,",
						"          ExistSITE as string,",
						"          ExistSRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT OPERATION_SUMMARY_ID AS ExistOPERATION_SUMMARY_ID,WORK_ORDER AS ExistWORK_ORDER,SITE AS ExistSITE,SRC_TYPE_HASH_KEY AS ExistSRC_TYPE_HASH_KEY FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRows",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_SUMMARY_ID),0) FROM MXMDM.OPERATION_SUMMARY',",
						"     format: 'query',",
						"     staged: true) ~> MaxSKey",
						"source(output(",
						"          RefLOCATION_ID as integer,",
						"          LOCATION as string,",
						"          RefSITE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT LOCATION_ID AS RefLOCATION_ID,LOCATION,SITE_ID AS RefSITE_ID FROM MXMDW.LOCATIONS',",
						"     format: 'query',",
						"     staged: true) ~> LocationRefRd",
						"joinLocation derive(WO_OPEN_DT = REPORTED_DATE,",
						"          WO_DUE_DT = case(\r",
						"(PRIORITY == \"1\"), addDays(REPORTED_DATE,1),\r",
						"(PRIORITY == \"2\"), addDays(REPORTED_DATE,7),\r",
						"(PRIORITY == \"3\"), addDays(REPORTED_DATE,30),\r",
						"(PRIORITY == \"4\"), addDays(REPORTED_DATE,45),\r",
						"REPORTED_DATE\r",
						"),",
						"          WO_PRIORITY_THRESHOLD_DAYS = case(\r",
						"    (PRIORITY == \"1\"), 1,\r",
						"    (PRIORITY == \"2\"), 7,\r",
						"    (PRIORITY == \"3\"), 30,\r",
						"    (PRIORITY == \"4\"), 45,\r",
						"     0\r",
						"),",
						"          WO_CLOSE_DT = case\r",
						"(\r",
						"    (STATUS == 'CLOSE' || STATUS =='CAN' || STATUS == 'READY' || STATUS == 'COMP'), WO_STATUS_CHANGEDATE, currentTimestamp()\r",
						"    ),",
						"          PRIORITY = toInteger(PRIORITY),",
						"          PM_DUE_DT = iifNull(PM_DUE_DT, TARGET_START_DT, REPORTED_DATE)) ~> dcOpsSmry",
						"joinMaxSK keyGenerate(output(NEWOPERATION_SUMMARY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SKOpsSmry",
						"dcOpsSmry derive(WO_CLOSE_DT = iifNull(WO_CLOSE_DT, currentTimestamp(), WO_CLOSE_DT),",
						"          WO_AGE = toInteger( (currentTimestamp() - REPORTED_DATE)/86400000 )) ~> dcWoAge",
						"dcWoAge derive(IS_BACKLOG = case\r",
						"(\r",
						"    (WO_CLOSE_DT > WO_DUE_DT), 'Yes',\r",
						"     (WO_CLOSE_DT <= WO_DUE_DT), 'No',\r",
						"     'Yes' ),",
						"          WO_AGE_SEGMENT = case\r",
						"(\r",
						"    (WO_AGE >=0 && WO_AGE <= 30), '0-30 Days',\r",
						"     (WO_AGE >=31 && WO_AGE <= 45), '31-45 Days',\r",
						"     (WO_AGE >=46 && WO_AGE <= 60), '46-60 Days',\r",
						"     (WO_AGE >=61 && WO_AGE <= 90), '61-90 Days',\r",
						"     'Above 90 Days' \r",
						"     )) ~> dcISbacklog",
						"dcNewHashKey select(mapColumn(",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          SITE_ID,",
						"          WORKTYPE_CM_PM,",
						"          TRADES,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          IS_BACKLOG,",
						"          WO_AGE_SEGMENT,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selOpsSmry",
						"dcISbacklog derive(SRC_TYPE_HASH_KEY = sha2(256,WORK_ORDER,SITE,WO_CLOSE_DT,WO_AGE,WO_AGE_SEGMENT,IS_BACKLOG)) ~> dcNewHashKey",
						"selOpsSmry, ExistingRows exists(SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists",
						"exists, ExistingRows lookup(WORK_ORDER == ExistWORK_ORDER",
						"     && SITE == ExistSITE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup split(isNull(ExistOPERATION_SUMMARY_ID),",
						"     disjoint: false) ~> split@(NewItem, UpdateItem)",
						"split@NewItem, MaxSKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxSK",
						"SKOpsSmry derive(NEWOPERATION_SUMMARY_ID = NEWOPERATION_SUMMARY_ID + MAXKEY,",
						"          SNAPSHOT_DT = currentTimestamp(),",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          ACTLABHRS = toDecimal(0.00)) ~> dcInsertItem",
						"dcInsertItem alterRow(insertIf(1==1)) ~> alterRowInsert",
						"srcOpsSmryRd, LocationRefRd join(LOCATION_ID == RefLOCATION_ID",
						"     && SITE_ID == RefSITE_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocation",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_SUMMARY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          PRIORITY as integer,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          SITE as string,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_SUMMARY_ID = NEWOPERATION_SUMMARY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          PRIORITY,",
						"          STATUS,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          WORK_TYPE_CM_PM = WORKTYPE_CM_PM,",
						"          PM_DUE_DT,",
						"          SITE,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          IS_BACKLOG,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          TRADE = TRADES,",
						"          SRC_TYPE_HASH_KEY,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsSmryLdInsert"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Ops_BackLogHistory_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcBackLogRead"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOpsBackLogHist",
								"type": "DatasetReference"
							},
							"name": "sinkOpsBackLogHist"
						}
					],
					"transformations": [
						{
							"name": "alterRowOpsBackLogHist"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skOpsBackLogHist"
						},
						{
							"name": "dcInsert"
						},
						{
							"name": "sortOpsBackLogHist"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          SITE as string,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          PRIORITY as integer,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\nWORK_ORDER,\\nGOVT_WO,\\nSMRY.DESCRIPTION AS DESCRIPTION,\\nSMRY.SITE_ID AS SITE_ID,\\nSITE,\\nSMRY.LOCATION_ID AS LOCATION_ID,\\nSMRY.LOCATION AS LOCATION,\\nASSET,\\nREPORTED_DATE,\\nSMRY.STATUS AS STATUS,\\nSMRY.WO_STATUS_CHANGEDATE AS WO_STATUS_CHANGEDATE,\\nPRIORITY,\\nTARGET_START_DT,\\nTARGET_FINISH_DT,\\nSMRY.ACTLABHRS AS ACTLABHRS,\\nWORK_GROUP,\\nWORK_TYPE,\\nPM_DUE_DT,\\nWO_OPEN_DT,\\nWO_DUE_DT,\\nWO_PRIORITY_THRESHOLD_DAYS,\\nWO_CLOSE_DT,\\nWO_AGE,\\nWO_AGE_SEGMENT,\\nWORK_TYPE_CM_PM,\\nSMRY.PERSON_GROUP_ID AS PERSON_GROUP_ID,\\nIS_BACKLOG,\\nEOMONTH(DATEADD(mm, -1, getdate())) AS SNAPSHOT_DT\\nFROM MXMDM.OPERATION_SUMMARY SMRY\\nINNER JOIN MXMDW.OPERATION OPS \\nON SMRY.WORK_ORDER = OPS.WONUM\\nAND SMRY.SITE_ID = OPS.SITE_ID\\nAND OPS.ISTASK=0\\nAND OPS.CURRENT_RECORD_IND=1\\nAND OPS.STATUS_FLAG=1\\nAND OPS.SNAPSHOT_DATE <=(SELECT MAX(SNAPSHOT_DATE) FROM MXMDW.OPERATION)\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_NM = SMRY.SITE\\n',",
						"     format: 'query',",
						"     staged: true) ~> srcBackLogRead",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(OPERATION_BACKLOGHISTORY_ID),0) FROM MXMDM.OPERATION_BACKLOGHISTORY',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"dcInsert alterRow(insertIf(1==1)) ~> alterRowOpsBackLogHist",
						"sortOpsBackLogHist, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMaxKey",
						"joinMaxKey keyGenerate(output(NewOPERATION_BACKLOGHISTORY_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> skOpsBackLogHist",
						"skOpsBackLogHist derive(NewOPERATION_BACKLOGHISTORY_ID = MAXKEY + NewOPERATION_BACKLOGHISTORY_ID,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsert",
						"srcBackLogRead sort(asc(WORK_ORDER, true),",
						"     asc(SITE_ID, true)) ~> sortOpsBackLogHist",
						"alterRowOpsBackLogHist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_BACKLOGHISTORY_ID as integer,",
						"          WORK_ORDER as string,",
						"          GOVT_WO as string,",
						"          DESCRIPTION as string,",
						"          SITE_ID as integer,",
						"          SITE as string,",
						"          LOCATION_ID as integer,",
						"          LOCATION as string,",
						"          ASSET as string,",
						"          REPORTED_DATE as timestamp,",
						"          STATUS as string,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          PRIORITY as integer,",
						"          TARGET_START_DT as timestamp,",
						"          TARGET_FINISH_DT as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          WORK_GROUP as string,",
						"          WORK_TYPE as string,",
						"          PM_DUE_DT as timestamp,",
						"          WO_OPEN_DT as timestamp,",
						"          WO_DUE_DT as timestamp,",
						"          WO_PRIORITY_THRESHOLD_DAYS as integer,",
						"          WO_CLOSE_DT as timestamp,",
						"          WO_AGE as decimal(18,4),",
						"          WO_AGE_SEGMENT as string,",
						"          WORK_TYPE_CM_PM as string,",
						"          PERSON_GROUP_ID as integer,",
						"          IS_BACKLOG as string,",
						"          SNAPSHOT_DT as date,",
						"          EFFECTIVE_DT as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OPERATION_BACKLOGHISTORY_ID = NewOPERATION_BACKLOGHISTORY_ID,",
						"          WORK_ORDER,",
						"          GOVT_WO,",
						"          DESCRIPTION,",
						"          SITE_ID,",
						"          SITE,",
						"          LOCATION_ID,",
						"          LOCATION,",
						"          ASSET,",
						"          REPORTED_DATE,",
						"          STATUS,",
						"          WO_STATUS_CHANGEDATE,",
						"          PRIORITY,",
						"          TARGET_START_DT,",
						"          TARGET_FINISH_DT,",
						"          ACTLABHRS,",
						"          WORK_GROUP,",
						"          WORK_TYPE,",
						"          PM_DUE_DT,",
						"          WO_OPEN_DT,",
						"          WO_DUE_DT,",
						"          WO_PRIORITY_THRESHOLD_DAYS,",
						"          WO_CLOSE_DT,",
						"          WO_AGE,",
						"          WO_AGE_SEGMENT,",
						"          WORK_TYPE_CM_PM,",
						"          PERSON_GROUP_ID,",
						"          IS_BACKLOG,",
						"          SNAPSHOT_DT,",
						"          EFFECTIVE_DT",
						"     )) ~> sinkOpsBackLogHist"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Person_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynpMxmStgRefnAsset",
								"type": "DatasetReference"
							},
							"name": "srcPersonLd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "srcPersonSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "PersonExistRowRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkPersonLd"
						},
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad",
								"type": "DatasetReference"
							},
							"name": "sinkPersonUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcPersonLd"
						},
						{
							"name": "skPersonLd"
						},
						{
							"name": "lkpPersonSite"
						},
						{
							"name": "selPersonExistRow"
						},
						{
							"name": "dcPersonHashKey"
						},
						{
							"name": "existsPerson"
						},
						{
							"name": "lookupPerson"
						},
						{
							"name": "splitPerson"
						},
						{
							"name": "joinPerson"
						},
						{
							"name": "dcPersonInsert"
						},
						{
							"name": "selPersonInsert"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "dcPersonUpdate"
						},
						{
							"name": "selPersonUpdate"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          LOCATIONSITE as string,",
						"          STATUSDATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT \\nPERSONID AS PERSON_NBR,\\nFIRSTNAME AS PERSON_FIRST_NM,\\nLASTNAME AS PERSON_LAST_NM,\\nSTATUS AS STATUS,\\nDEPARTMENT AS DEPARTMENT,\\nTITLE AS TITLE,\\nEMPLOYEETYPE AS EMPLOYEE_TYPE,\\nJOBCODE AS JOBCODE,\\nSUPERVISOR AS SUPERVISOR,\\nBIRTHDATE,\\nHIREDATE,\\nTERMINATIONDATE,\\nLOCATION,\\nLOCATIONSITE,\\nSTATUSDATE\\nFROM MXMSTG.STG_PERSON',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonLd",
						"source(output(",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT SITE_ID,SITE_NM FROM MXMDW.SITE',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonSiteRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR,SRC_TYPE_HASH_KEY FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> PersonExistRowRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(PERSON_ID),0) FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"lkpPersonSite derive(PERSON_FIRST_NM = iifNull(PERSON_FIRST_NM, 'NA', PERSON_FIRST_NM),",
						"          PERSON_LAST_NM = iifNull(PERSON_LAST_NM, 'NA', PERSON_LAST_NM),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          DEPARTMENT = iifNull(DEPARTMENT, 'NA', DEPARTMENT),",
						"          TITLE = iifNull(TITLE, 'NA', TITLE),",
						"          EMPLOYEE_TYPE = iifNull(EMPLOYEE_TYPE, 'NA', EMPLOYEE_TYPE),",
						"          JOBCODE = iifNull(JOBCODE, 'NA', JOBCODE),",
						"          SUPERVISOR = iifNull(SUPERVISOR, 'NA', SUPERVISOR),",
						"          BIRTHDATE = iifNull(BIRTHDATE, toDate('1900/01/01','yyyy/MM/dd'), BIRTHDATE),",
						"          HIREDATE = iifNull(HIREDATE, toDate('1900/01/01','yyyy/MM/dd'), HIREDATE),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION)) ~> dcPersonLd",
						"joinPerson keyGenerate(output(NewPERSON_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skPersonLd",
						"srcPersonLd, srcPersonSiteRefRd lookup(LOCATIONSITE == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPersonSite",
						"PersonExistRowRd select(mapColumn(",
						"          ExistPERSON_ID = PERSON_ID,",
						"          ExistPERSON_NBR = PERSON_NBR,",
						"          ExistSTATUS = STATUS,",
						"          ExistDEPARTMENT = DEPARTMENT,",
						"          ExistJOBCODE = JOBCODE,",
						"          ExistSUPERVISOR = SUPERVISOR,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonExistRow",
						"dcPersonLd derive(SRC_TYPE_HASH_KEY = sha2(256,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR)) ~> dcPersonHashKey",
						"dcPersonHashKey, selPersonExistRow exists(PERSON_NBR == ExistPERSON_NBR",
						"     && STATUS == ExistSTATUS",
						"     && DEPARTMENT == ExistDEPARTMENT",
						"     && JOBCODE == ExistJOBCODE",
						"     && SUPERVISOR == ExistSUPERVISOR,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsPerson",
						"existsPerson, selPersonExistRow lookup(PERSON_NBR == ExistPERSON_NBR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookupPerson",
						"lookupPerson split(isNull(ExistPERSON_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> splitPerson@(NewItem, UpdateItem)",
						"splitPerson@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinPerson",
						"skPersonLd derive(NewPERSON_ID = NewPERSON_ID + MAXKEY,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcPersonInsert",
						"dcPersonInsert select(mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          NewPERSON_ID,",
						"          EFFECTIVE_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonInsert",
						"selPersonInsert alterRow(insertIf(1==1)) ~> alterRowInsert",
						"selPersonUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcPersonUpdate",
						"splitPerson@UpdateItem select(mapColumn(",
						"          PERSON_FIRST_NM,",
						"          PERSON_NBR,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          STATUSDATE,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistPERSON_ID,",
						"          ExistPERSON_NBR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonUpdate",
						"dcPersonUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          PERSON_ID = NewPERSON_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonLd",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PERSON_NBR','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_ID = ExistPERSON_ID,",
						"          PERSON_NBR = ExistPERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Person_Dim_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynpMxmStgRefnAsset22",
								"type": "DatasetReference"
							},
							"name": "srcPersonLd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "srcPersonSiteRefRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "PersonExistRowRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "MaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad1",
								"type": "DatasetReference"
							},
							"name": "sinkPersonLd"
						},
						{
							"dataset": {
								"referenceName": "SinkPersonInitialLoad1",
								"type": "DatasetReference"
							},
							"name": "sinkPersonUpdate"
						}
					],
					"transformations": [
						{
							"name": "dcPersonLd"
						},
						{
							"name": "skPersonLd"
						},
						{
							"name": "lkpPersonSite"
						},
						{
							"name": "selPersonExistRow"
						},
						{
							"name": "dcPersonHashKey"
						},
						{
							"name": "existsPerson"
						},
						{
							"name": "lookupPerson"
						},
						{
							"name": "splitPerson"
						},
						{
							"name": "joinPerson"
						},
						{
							"name": "dcPersonInsert"
						},
						{
							"name": "selPersonInsert"
						},
						{
							"name": "alterRowInsert"
						},
						{
							"name": "dcPersonUpdate"
						},
						{
							"name": "selPersonUpdate"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          LOCATIONSITE as string,",
						"          STATUSDATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: '\\nSELECT \\nPERSONID AS PERSON_NBR,\\nFIRSTNAME AS PERSON_FIRST_NM,\\nLASTNAME AS PERSON_LAST_NM,\\nSTATUS AS STATUS,\\nDEPARTMENT AS DEPARTMENT,\\nTITLE AS TITLE,\\nEMPLOYEETYPE AS EMPLOYEE_TYPE,\\nJOBCODE AS JOBCODE,\\nSUPERVISOR AS SUPERVISOR,\\nBIRTHDATE,\\nHIREDATE,\\nTERMINATIONDATE,\\nLOCATION,\\nLOCATIONSITE,\\nSTATUSDATE\\nFROM MXMSTG.STG_PERSON',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonLd",
						"source(output(",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT SITE_ID,SITE_NM FROM MXMDW.SITE',",
						"     format: 'query',",
						"     staged: true) ~> srcPersonSiteRefRd",
						"source(output(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PERSON_ID,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR,SRC_TYPE_HASH_KEY FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true,",
						"     partitionBy('hash', 1)) ~> PersonExistRowRd",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(PERSON_ID),0) FROM MXMDW.PERSON',",
						"     format: 'query',",
						"     staged: true) ~> MaxKey",
						"lkpPersonSite derive(PERSON_FIRST_NM = iifNull(PERSON_FIRST_NM, 'NA', PERSON_FIRST_NM),",
						"          PERSON_LAST_NM = iifNull(PERSON_LAST_NM, 'NA', PERSON_LAST_NM),",
						"          STATUS = iifNull(STATUS, 'NA', STATUS),",
						"          DEPARTMENT = iifNull(DEPARTMENT, 'NA', DEPARTMENT),",
						"          TITLE = iifNull(TITLE, 'NA', TITLE),",
						"          EMPLOYEE_TYPE = iifNull(EMPLOYEE_TYPE, 'NA', EMPLOYEE_TYPE),",
						"          JOBCODE = iifNull(JOBCODE, 'NA', JOBCODE),",
						"          SUPERVISOR = iifNull(SUPERVISOR, 'NA', SUPERVISOR),",
						"          BIRTHDATE = iifNull(BIRTHDATE, toDate('1900/01/01','yyyy/MM/dd'), BIRTHDATE),",
						"          HIREDATE = iifNull(HIREDATE, toDate('1900/01/01','yyyy/MM/dd'), HIREDATE),",
						"          LOCATION = iifNull(LOCATION, 'NA', LOCATION)) ~> dcPersonLd",
						"joinPerson keyGenerate(output(NewPERSON_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> skPersonLd",
						"srcPersonLd, srcPersonSiteRefRd lookup(LOCATIONSITE == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpPersonSite",
						"PersonExistRowRd select(mapColumn(",
						"          ExistPERSON_ID = PERSON_ID,",
						"          ExistPERSON_NBR = PERSON_NBR,",
						"          ExistSTATUS = STATUS,",
						"          ExistDEPARTMENT = DEPARTMENT,",
						"          ExistJOBCODE = JOBCODE,",
						"          ExistSUPERVISOR = SUPERVISOR,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonExistRow",
						"dcPersonLd derive(SRC_TYPE_HASH_KEY = sha2(256,PERSON_NBR,STATUS,DEPARTMENT,JOBCODE,SUPERVISOR)) ~> dcPersonHashKey",
						"dcPersonHashKey, selPersonExistRow exists(PERSON_NBR == ExistPERSON_NBR",
						"     && STATUS == ExistSTATUS",
						"     && DEPARTMENT == ExistDEPARTMENT",
						"     && JOBCODE == ExistJOBCODE",
						"     && SUPERVISOR == ExistSUPERVISOR,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsPerson",
						"existsPerson, selPersonExistRow lookup(PERSON_NBR == ExistPERSON_NBR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookupPerson",
						"lookupPerson split(isNull(ExistPERSON_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> splitPerson@(NewItem, UpdateItem)",
						"splitPerson@NewItem, MaxKey join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinPerson",
						"skPersonLd derive(NewPERSON_ID = NewPERSON_ID + MAXKEY,",
						"          EFFECTIVE_DT = currentTimestamp()) ~> dcPersonInsert",
						"dcPersonInsert select(mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          NewPERSON_ID,",
						"          EFFECTIVE_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonInsert",
						"selPersonInsert alterRow(insertIf(1==1)) ~> alterRowInsert",
						"selPersonUpdate derive(EFFECTIVE_DT = currentTimestamp()) ~> dcPersonUpdate",
						"splitPerson@UpdateItem select(mapColumn(",
						"          PERSON_FIRST_NM,",
						"          PERSON_NBR,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          STATUSDATE,",
						"          SITE_ID,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistPERSON_ID,",
						"          ExistPERSON_NBR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selPersonUpdate",
						"dcPersonUpdate alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"alterRowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          PERSON_ID = NewPERSON_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonLd",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PERSON_ID as integer,",
						"          PERSON_NBR as string,",
						"          PERSON_FIRST_NM as string,",
						"          PERSON_LAST_NM as string,",
						"          STATUS as string,",
						"          DEPARTMENT as string,",
						"          TITLE as string,",
						"          EMPLOYEE_TYPE as string,",
						"          JOBCODE as string,",
						"          SUPERVISOR as string,",
						"          BIRTHDATE as date,",
						"          HIREDATE as date,",
						"          TERMINATIONDATE as date,",
						"          LOCATION as string,",
						"          SITE_ID as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PERSON_NBR','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PERSON_ID = ExistPERSON_ID,",
						"          PERSON_NBR = ExistPERSON_NBR,",
						"          PERSON_FIRST_NM,",
						"          PERSON_LAST_NM,",
						"          STATUS,",
						"          DEPARTMENT,",
						"          TITLE,",
						"          EMPLOYEE_TYPE,",
						"          JOBCODE,",
						"          SUPERVISOR,",
						"          BIRTHDATE,",
						"          HIREDATE,",
						"          TERMINATIONDATE,",
						"          LOCATION,",
						"          SITE_ID,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkPersonUpdate"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Update_Parent_ActLabHrs_Ops_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd",
								"type": "DatasetReference"
							},
							"name": "UpdateParentActLabHrsOps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateParentActLabHrs"
						}
					],
					"transformations": [
						{
							"name": "filterActLabHrs"
						},
						{
							"name": "aggActLabHrs"
						},
						{
							"name": "alterRowActLabHrs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          ISTASK as integer,",
						"          ACTLABHRS as decimal(18,9)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT WONUM, PARENT,SITE_ID,ISTASK,ACTLABHRS FROM MXMDW.OPERATION WHERE ACTLABHRS>0 AND CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true) ~> UpdateParentActLabHrsOps",
						"UpdateParentActLabHrsOps filter(ISTASK==1) ~> filterActLabHrs",
						"filterActLabHrs aggregate(groupBy(PARENT,",
						"          SITE_ID),",
						"     SumACTLABHRS = sum(ACTLABHRS)) ~> aggActLabHrs",
						"aggActLabHrs alterRow(updateIf(1==1)) ~> alterRowActLabHrs",
						"alterRowActLabHrs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM = PARENT,",
						"          SITE_ID,",
						"          PARENT_ACTLABHRS = SumACTLABHRS",
						"     )) ~> sinkUpdateParentActLabHrs"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Update_Parent_ActLabHrs_Ops_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd7",
								"type": "DatasetReference"
							},
							"name": "UpdateParentActLabHrsOps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkOperationLd22",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateParentActLabHrs"
						}
					],
					"transformations": [
						{
							"name": "filterActLabHrs"
						},
						{
							"name": "aggActLabHrs"
						},
						{
							"name": "alterRowActLabHrs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          ISTASK as integer,",
						"          ACTLABHRS as decimal(18,9)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT WONUM, PARENT,SITE_ID,ISTASK,ACTLABHRS FROM MXMDW.OPERATION WHERE ACTLABHRS>0 AND CURRENT_RECORD_IND=1',",
						"     format: 'query',",
						"     staged: true) ~> UpdateParentActLabHrsOps",
						"UpdateParentActLabHrsOps filter(ISTASK==1) ~> filterActLabHrs",
						"filterActLabHrs aggregate(groupBy(PARENT,",
						"          SITE_ID),",
						"     SumACTLABHRS = sum(ACTLABHRS)) ~> aggActLabHrs",
						"aggActLabHrs alterRow(updateIf(1==1)) ~> alterRowActLabHrs",
						"alterRowActLabHrs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OPERATION_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSET_ID as integer,",
						"          PERSON_ID as integer,",
						"          JP_ID as integer,",
						"          PERSON_GROUP_ID as integer,",
						"          STATUS as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJREVNUM as integer,",
						"          WOPRIORITY as string,",
						"          WO_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEDATE as timestamp,",
						"          WO_STATUS_CHANGEBY as string,",
						"          STATUSDATE as timestamp,",
						"          PMDUEDATE as timestamp,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSON_GROUP as string,",
						"          CAL_PMDUEDT as timestamp,",
						"          WORKTYPE_CM_PM as string,",
						"          REPORTMONTH_YEAR as string,",
						"          REPORTDATE_MONTH as string,",
						"          REPORTDATE_CM_PM as timestamp,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          AVAILABLE_MANHOUR as integer,",
						"          PARENT_ACTLABHRS as decimal(18,9),",
						"          SNAPSHOT_DATE as timestamp,",
						"          CURRENT_RECORD_IND as integer,",
						"          EFFECTIVE_DT as timestamp,",
						"          STATUS_FLAG as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WONUM = PARENT,",
						"          SITE_ID,",
						"          PARENT_ACTLABHRS = SumACTLABHRS",
						"     )) ~> sinkUpdateParentActLabHrs"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Workorder_Dim_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcStgWorkorder",
								"type": "DatasetReference"
							},
							"name": "srcStgWorkorderRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "LocationRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "MAXKEY"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd1",
								"type": "DatasetReference"
							},
							"name": "ExistingRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkWorkorder",
								"type": "DatasetReference"
							},
							"name": "sinkInsertWorkorder"
						},
						{
							"dataset": {
								"referenceName": "SinkWorkorder",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateWorkorder"
						}
					],
					"transformations": [
						{
							"name": "lkpOrgSite"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "selExistingRecords"
						},
						{
							"name": "dCNewHashKey"
						},
						{
							"name": "existsWorkorder"
						},
						{
							"name": "lkpExistWo"
						},
						{
							"name": "NewItem"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skWo"
						},
						{
							"name": "dcInsertWo"
						},
						{
							"name": "selInsertWo"
						},
						{
							"name": "dcUpdateWo"
						},
						{
							"name": "selUpdateWo"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          ENTRY_DT as timestamp,",
						"          WO_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> srcStgWorkorderRd",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,O.ORGANIZATION_NM AS ORGANIZATION_NM, S.SITE_ID AS SITE_ID,S.SITE_NM AS SITE_NM\\nFROM MXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE O.ORGANIZATION_ID = S.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRef",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRef",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(WORKORDER_ID),0) FROM  MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> MAXKEY",
						"source(output(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WORKORDER_ID,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,SRC_TYPE_HASH_KEY FROM MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRecords",
						"srcStgWorkorderRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgSite",
						"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"ExistingRecords select(mapColumn(",
						"          ExistWORKORDER_ID = WORKORDER_ID,",
						"          ExistWONUM = WONUM,",
						"          ExistPARENT = PARENT,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistSTATUSDATE = STATUSDATE,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
						"lkpLocation derive(SRC_TYPE_HASH_KEY = sha2(256,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,CHANGEDATE),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dCNewHashKey",
						"dCNewHashKey, selExistingRecords exists(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID",
						"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsWorkorder",
						"existsWorkorder, selExistingRecords lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpExistWo",
						"lkpExistWo split(isNull(ExistWORKORDER_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> NewItem@(NewItem, UpdateItem)",
						"NewItem@NewItem, MAXKEY join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinMaxKey",
						"joinMaxKey keyGenerate(output(NewWORKORDER_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> skWo",
						"skWo derive(WORKORDER_ID = MAXKEY + NewWORKORDER_ID,",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcInsertWo",
						"dcInsertWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          WORKORDER_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selInsertWo",
						"NewItem@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateWo",
						"dcUpdateWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistWORKORDER_ID,",
						"          ExistWONUM,",
						"          ExistSITE_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selUpdateWo",
						"selUpdateWo alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selInsertWo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkInsertWorkorder",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID = ExistWORKORDER_ID,",
						"          WONUM = ExistWONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID = ExistSITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkUpdateWorkorder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Workorder_Dim_df1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "srcStgWorkorder1",
								"type": "DatasetReference"
							},
							"name": "srcStgWorkorderRd"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd11",
								"type": "DatasetReference"
							},
							"name": "OrgSiteRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd11",
								"type": "DatasetReference"
							},
							"name": "LocationRef"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd11",
								"type": "DatasetReference"
							},
							"name": "MAXKEY"
						},
						{
							"dataset": {
								"referenceName": "OrgSiteRefRd11",
								"type": "DatasetReference"
							},
							"name": "ExistingRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SinkWorkorder1",
								"type": "DatasetReference"
							},
							"name": "sinkInsertWorkorder"
						},
						{
							"dataset": {
								"referenceName": "SinkWorkorder1",
								"type": "DatasetReference"
							},
							"name": "sinkUpdateWorkorder"
						}
					],
					"transformations": [
						{
							"name": "lkpOrgSite"
						},
						{
							"name": "lkpLocation"
						},
						{
							"name": "selExistingRecords"
						},
						{
							"name": "dCNewHashKey"
						},
						{
							"name": "existsWorkorder"
						},
						{
							"name": "lkpExistWo"
						},
						{
							"name": "NewItem"
						},
						{
							"name": "joinMaxKey"
						},
						{
							"name": "skWo"
						},
						{
							"name": "dcInsertWo"
						},
						{
							"name": "selInsertWo"
						},
						{
							"name": "dcUpdateWo"
						},
						{
							"name": "selUpdateWo"
						},
						{
							"name": "alterRowUpdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGID as string,",
						"          SITEID as string,",
						"          LOCATION as string,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          ENTRY_DT as timestamp,",
						"          WO_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> srcStgWorkorderRd",
						"source(output(",
						"          ORGANIZATION_ID as integer,",
						"          ORGANIZATION_NM as string,",
						"          SITE_ID as integer,",
						"          SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT O.ORGANIZATION_ID AS ORGANIZATION_ID,O.ORGANIZATION_NM AS ORGANIZATION_NM, S.SITE_ID AS SITE_ID,S.SITE_NM AS SITE_NM\\nFROM MXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE O.ORGANIZATION_ID = S.ORGANIZATION_ID',",
						"     format: 'query',",
						"     staged: true) ~> OrgSiteRef",
						"source(output(",
						"          LOCATION_ID as integer,",
						"          DIM_LOCATION as string,",
						"          LOCATION_DESC as string,",
						"          LOC_SITE_NM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
						"     format: 'query',",
						"     staged: true) ~> LocationRef",
						"source(output(",
						"          MAXKEY as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAXKEY=ISNULL(MAX(WORKORDER_ID),0) FROM  MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> MAXKEY",
						"source(output(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          SITE_ID as integer,",
						"          STATUS as string,",
						"          STATUSDATE as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT WORKORDER_ID,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,SRC_TYPE_HASH_KEY FROM MXMDW.WORKORDER',",
						"     format: 'query',",
						"     staged: true) ~> ExistingRecords",
						"srcStgWorkorderRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
						"     && SITEID == SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpOrgSite",
						"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
						"     && SITEID == LOC_SITE_NM,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpLocation",
						"ExistingRecords select(mapColumn(",
						"          ExistWORKORDER_ID = WORKORDER_ID,",
						"          ExistWONUM = WONUM,",
						"          ExistPARENT = PARENT,",
						"          ExistSITE_ID = SITE_ID,",
						"          ExistSTATUS = STATUS,",
						"          ExistSTATUSDATE = STATUSDATE,",
						"          ExistSRC_TYPE_HASH_KEY = SRC_TYPE_HASH_KEY",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selExistingRecords",
						"lkpLocation derive(SRC_TYPE_HASH_KEY = sha2(256,WONUM,PARENT,SITE_ID,STATUS,STATUSDATE,CHANGEDATE),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dCNewHashKey",
						"dCNewHashKey, selExistingRecords exists(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID",
						"     && SRC_TYPE_HASH_KEY == ExistSRC_TYPE_HASH_KEY,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> existsWorkorder",
						"existsWorkorder, selExistingRecords lookup(WONUM == ExistWONUM",
						"     && SITE_ID == ExistSITE_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lkpExistWo",
						"lkpExistWo split(isNull(ExistWORKORDER_ID),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> NewItem@(NewItem, UpdateItem)",
						"NewItem@NewItem, MAXKEY join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinMaxKey",
						"joinMaxKey keyGenerate(output(NewWORKORDER_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> skWo",
						"skWo derive(WORKORDER_ID = MAXKEY + NewWORKORDER_ID,",
						"          EFFECTIVE_DT = currentTimestamp(),",
						"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcInsertWo",
						"dcInsertWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          WORKORDER_ID,",
						"          SRC_TYPE_HASH_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selInsertWo",
						"NewItem@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateWo",
						"dcUpdateWo select(mapColumn(",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY,",
						"          ExistWORKORDER_ID,",
						"          ExistWONUM,",
						"          ExistSITE_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selUpdateWo",
						"selUpdateWo alterRow(updateIf(1==1)) ~> alterRowUpdate",
						"selInsertWo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID,",
						"          WONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkInsertWorkorder",
						"alterRowUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          WORKORDER_ID as integer,",
						"          WONUM as string,",
						"          PARENT as string,",
						"          GOVTWONUM as string,",
						"          ORGANIZATION_ID as integer,",
						"          SITE_ID as integer,",
						"          LOCATION_ID as integer,",
						"          ASSETNUM as string,",
						"          STATUS as string,",
						"          JPNUM as string,",
						"          WORKTYPE as string,",
						"          TASKID as integer,",
						"          ISTASK as integer,",
						"          DESCRIPTION as string,",
						"          PLUSCJPREVNUM as integer,",
						"          WOPRIORITY as integer,",
						"          CHANGEDATE as timestamp,",
						"          STATUSDATE as timestamp,",
						"          CHANGEBY as string,",
						"          PMDUEDATE as date,",
						"          TARGSTARTDATE as timestamp,",
						"          TARGCOMPDATE as timestamp,",
						"          REPORTDATE as timestamp,",
						"          RESPONDBY as timestamp,",
						"          ACTLABHRS as decimal(18,9),",
						"          ACTSTART as timestamp,",
						"          ACTFINISH as timestamp,",
						"          ACTINTLABHRS as decimal(18,9),",
						"          ESTDUR as decimal(18,9),",
						"          WOGROUP as string,",
						"          PERSONGROUP as string,",
						"          OWNERGROUP as string,",
						"          PLUSCFREQUENCY as integer,",
						"          PLUSCFREQUNIT as string,",
						"          PMNEXTDUEDATE as date,",
						"          PMNUM as string,",
						"          EFFECTIVE_DT as timestamp,",
						"          SRC_TYPE_HASH_KEY as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['WONUM','SITE_ID'],",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          WORKORDER_ID = ExistWORKORDER_ID,",
						"          WONUM = ExistWONUM,",
						"          PARENT,",
						"          GOVTWONUM,",
						"          ORGANIZATION_ID,",
						"          SITE_ID = ExistSITE_ID,",
						"          LOCATION_ID,",
						"          ASSETNUM,",
						"          STATUS,",
						"          JPNUM,",
						"          WORKTYPE,",
						"          TASKID,",
						"          ISTASK,",
						"          DESCRIPTION,",
						"          PLUSCJPREVNUM,",
						"          WOPRIORITY,",
						"          CHANGEDATE,",
						"          STATUSDATE,",
						"          CHANGEBY,",
						"          PMDUEDATE,",
						"          TARGSTARTDATE,",
						"          TARGCOMPDATE,",
						"          REPORTDATE,",
						"          RESPONDBY,",
						"          ACTLABHRS,",
						"          ACTSTART,",
						"          ACTFINISH,",
						"          ACTINTLABHRS,",
						"          ESTDUR,",
						"          WOGROUP,",
						"          PERSONGROUP,",
						"          OWNERGROUP,",
						"          PLUSCFREQUENCY,",
						"          PLUSCFREQUNIT,",
						"          PMNEXTDUEDATE,",
						"          PMNUM,",
						"          EFFECTIVE_DT,",
						"          SRC_TYPE_HASH_KEY",
						"     )) ~> sinkUpdateWorkorder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPS_JPID_Fix')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OPSJPIDFix",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "OPS_JPID_Fix_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "rawlandingmaximo"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T10:57:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OPS_JPID_Fix2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OPS_JPID_Fix_df2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "OPS_JPID_Fix_df2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceJP1": {},
									"workorderRead": {},
									"sourceJP2": {},
									"sinkJPIDFIX": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "rawlandingmaximo"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T10:57:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Asset_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Asset_Dim_pln",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Asset_Dim_df",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcstgAssetRead": {},
									"srcAssetSiteRefRd": {},
									"AssetExistingRowsRd": {},
									"MaxKey": {},
									"sinkAssetLd": {},
									"sinkAssetUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-21T07:25:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Asset_pln1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_Asset_Dim_pln",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Asset_Dim_df1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcstgAssetRead": {},
									"srcAssetSiteRefRd": {},
									"AssetExistingRowsRd": {},
									"MaxKey": {},
									"sinkAssetLd": {},
									"sinkAssetUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-21T07:25:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Jobplan_pln')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_JobPlan_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Jobplan_Dim_df2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcJobPlanRead": {},
									"RefOrgJP": {},
									"JobplanExistingRowRd": {},
									"MaxKey": {},
									"sinkJPInitLd": {},
									"sinkJobPlanUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-21T07:25:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Jobplan_pln1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_JobPlan_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Jobplan_Dim_df21",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcJobPlanRead": {},
									"RefOrgJP": {},
									"JobplanExistingRowRd": {},
									"MaxKey": {},
									"sinkJPInitLd": {},
									"sinkJobPlanUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MXMDW"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-21T07:25:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dp_Jobplan_pln_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dp_JobPlan_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dp_Jobplan_Dim_df1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcJobPlanRead": {},
									"RefOrgJP": {},
									"JobplanExistingRowRd": {},
									"MaxKey": {},
									"sinkJPInitLd": {},
									"sinkJobPlanUpdate": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": {
									"value": "@pipeline().globalParameters.MaximoLog",
									"type": "Expression"
								}
							},
							"integrationRuntime": {
								"referenceName": "AzureIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MXMDWpln"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T10:57:13Z"
			},
			"dependsOn": []
		}
	]
}