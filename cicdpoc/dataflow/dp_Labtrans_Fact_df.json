{
	"name": "dp_Labtrans_Fact_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "srcStgLabtransRd"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "OrgSiteRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "LocationRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "CraftRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "WorkorderRef"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "MaxKey"
				},
				{
					"dataset": {
						"referenceName": "OrgSiteRefRd2",
						"type": "DatasetReference"
					},
					"name": "ExistRows"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SinkLabtrans",
						"type": "DatasetReference"
					},
					"name": "sinkLabtrans"
				},
				{
					"dataset": {
						"referenceName": "SinkLabtrans",
						"type": "DatasetReference"
					},
					"name": "sinkUpdateLabtrans"
				}
			],
			"transformations": [
				{
					"name": "selExistRows"
				},
				{
					"name": "lkpOrgSite"
				},
				{
					"name": "lkpLocation"
				},
				{
					"name": "lkpCraft"
				},
				{
					"name": "joinWo"
				},
				{
					"name": "existsLabTrans"
				},
				{
					"name": "lkpLabtrans"
				},
				{
					"name": "splitLabtrans"
				},
				{
					"name": "joinMaxKey"
				},
				{
					"name": "sKeyLabTrans"
				},
				{
					"name": "selLabTrans"
				},
				{
					"name": "dcInsertLabtrans"
				},
				{
					"name": "selInsertLabtrans"
				},
				{
					"name": "alterRowInsert"
				},
				{
					"name": "dcUpdateLabtrans"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "dcLabtrans"
				}
			],
			"scriptLines": [
				"source(output(",
				"          WONUM as string,",
				"          SITEID as string,",
				"          ORGID as string,",
				"          LOCATION as string,",
				"          PAYRATE as decimal(18,2),",
				"          CRAFT as string,",
				"          STARTDATETIME as timestamp,",
				"          FINISHDATETIME as timestamp,",
				"          REGULARHRS as decimal(18,9),",
				"          STARTDATE as date,",
				"          FINISHDATE as date,",
				"          TRANSDATE as timestamp,",
				"          LAB_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT REFWO AS WONUM,SITEID,ORGID,LOCATION,PAYRATE,CRAFT,STARTDATETIME,FINISHDATETIME,REGULARHRS,STARTDATE,FINISHDATE,TRANSDATE,LAB_ID FROM MXMSTG.STG_LABTRANS',",
				"     format: 'query',",
				"     staged: true) ~> srcStgLabtransRd",
				"source(output(",
				"          ORGANIZATION_ID as integer,",
				"          SITE_ID as integer,",
				"          ORGANIZATION_NM as string,",
				"          SITE_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT O.ORGANIZATION_ID,S.SITE_ID,O.ORGANIZATION_NM,S.SITE_NM\\nFROM\\nMXMDW.ORGANIZATION O,\\nMXMDW.SITE S\\nWHERE\\nS.ORGANIZATION_ID=O.ORGANIZATION_ID',",
				"     format: 'query',",
				"     staged: true) ~> OrgSiteRef",
				"source(output(",
				"          LOCATION_ID as integer,",
				"          DIM_LOCATION as string,",
				"          LOCATION_DESC as string,",
				"          LOC_SITE_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT L.LOCATION_ID AS LOCATION_ID,L.LOCATION AS DIM_LOCATION,L.DESCRIPTION AS LOCATION_DESC, S.SITE_NM AS LOC_SITE_NM\\nFROM MXMDW.LOCATIONS L\\nINNER JOIN MXMDW.SITE S\\nON S.SITE_ID = L.SITE_ID',",
				"     format: 'query',",
				"     staged: true) ~> LocationRef",
				"source(output(",
				"          CRAFT_ID as integer,",
				"          CRAFT_CD as string,",
				"          ORGANIZATION_NM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT CRAFT_ID,CRAFT_CD,ORGANIZATION_NM FROM MXMDW.CRAFT',",
				"     format: 'query',",
				"     staged: true) ~> CraftRef",
				"source(output(",
				"          WONUM as string,",
				"          SITE_ID as integer,",
				"          GOVTWONUM as string,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          DESCRIPTION as string,",
				"          WOPRIORITY as integer,",
				"          STATUSDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT WONUM,SITE_ID,GOVTWONUM,ASSETNUM,STATUS,JPNUM,WORKTYPE,DESCRIPTION,\\nWOPRIORITY,STATUSDATE,TARGCOMPDATE,REPORTDATE,PMDUEDATE,TARGSTARTDATE,ESTDUR,\\nWOGROUP,PERSONGROUP,PMNEXTDUEDATE,PMNUM\\nFROM MXMDW.WORKORDER',",
				"     format: 'query',",
				"     staged: true) ~> WorkorderRef",
				"source(output(",
				"          MAXKEY as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT MAXKEY=ISNULL(MAX(LABTRANS_ID),0) FROM  MXMDW.LABTRANS',",
				"     format: 'query',",
				"     staged: true) ~> MaxKey",
				"source(output(",
				"          LABTRANS_ID as integer,",
				"          LAB_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT LABTRANS_ID,LAB_ID FROM MXMDW.LABTRANS',",
				"     format: 'query',",
				"     staged: true) ~> ExistRows",
				"ExistRows select(mapColumn(",
				"          ExistLABTRANS_ID = LABTRANS_ID,",
				"          ExistLAB_ID = LAB_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selExistRows",
				"srcStgLabtransRd, OrgSiteRef lookup(ORGID == ORGANIZATION_NM",
				"     && SITEID == SITE_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpOrgSite",
				"lkpOrgSite, LocationRef lookup(LOCATION == DIM_LOCATION",
				"     && SITEID == LOC_SITE_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpLocation",
				"lkpLocation, CraftRef lookup(CRAFT == CRAFT_CD",
				"     && ORGID == CraftRef@ORGANIZATION_NM,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpCraft",
				"lkpCraft, WorkorderRef join(srcStgLabtransRd@WONUM == WorkorderRef@WONUM",
				"     && OrgSiteRef@SITE_ID == WorkorderRef@SITE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> joinWo",
				"dcLabtrans, selExistRows exists(LAB_ID == ExistLAB_ID,",
				"     negate:true,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'right')~> existsLabTrans",
				"existsLabTrans, selExistRows lookup(LAB_ID == ExistLAB_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> lkpLabtrans",
				"lkpLabtrans split(isNull(ExistLABTRANS_ID),",
				"     disjoint: false) ~> splitLabtrans@(NewItem, UpdateItem)",
				"splitLabtrans@NewItem, MaxKey join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxKey",
				"joinMaxKey keyGenerate(output(NewLABTRANS_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> sKeyLabTrans",
				"joinWo select(mapColumn(",
				"          WONUM = srcStgLabtransRd@WONUM,",
				"          PAYRATE,",
				"          CRAFT,",
				"          STARTDATE,",
				"          FINISHDATE,",
				"          STARTDATETIME,",
				"          FINISHDATETIME,",
				"          REGULARHRS,",
				"          TRANSDATE,",
				"          LAB_ID,",
				"          SITE_ID = OrgSiteRef@SITE_ID,",
				"          LOCATION_ID,",
				"          CRAFT_ID,",
				"          GOVTWONUM,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          DESCRIPTION,",
				"          WOPRIORITY,",
				"          STATUSDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          PMNEXTDUEDATE,",
				"          PMNUM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selLabTrans",
				"sKeyLabTrans derive(LABTRANS_ID = MAXKEY + NewLABTRANS_ID,",
				"          EFFECTIVE_DT = currentTimestamp()) ~> dcInsertLabtrans",
				"dcInsertLabtrans select(mapColumn(",
				"          WONUM,",
				"          PAYRATE,",
				"          CRAFT,",
				"          STARTDATETIME,",
				"          FINISHDATETIME,",
				"          REGULARHRS,",
				"          TRANSDATE,",
				"          LAB_ID,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          CRAFT_ID,",
				"          GOVTWONUM,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          DESCRIPTION,",
				"          WOPRIORITY,",
				"          STATUSDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          LABTRANS_ID,",
				"          EFFECTIVE_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selInsertLabtrans",
				"selInsertLabtrans alterRow(insertIf(1==1)) ~> alterRowInsert",
				"splitLabtrans@UpdateItem derive(EFFECTIVE_DT = currentTimestamp()) ~> dcUpdateLabtrans",
				"dcUpdateLabtrans alterRow(updateIf(1==1)) ~> alterRowUpdate",
				"selLabTrans derive(STARTDATETIME = iifNull(STARTDATETIME, STARTDATE, STARTDATETIME),",
				"          FINISHDATETIME = iifNull(FINISHDATETIME, FINISHDATE, FINISHDATETIME),",
				"          LOCATION_ID = iifNull(LOCATION_ID, toInteger(-1), LOCATION_ID)) ~> dcLabtrans",
				"alterRowInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LABTRANS_ID as integer,",
				"          WONUM as string,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          CRAFT_ID as integer,",
				"          LAB_ID as integer,",
				"          PAYRATE as decimal(18,2),",
				"          STARTDATETIME as timestamp,",
				"          FINISHDATETIME as timestamp,",
				"          REGULARHRS as decimal(18,9),",
				"          TRANSDATE as timestamp,",
				"          GOVTWONUM as string,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          DESCRIPTION as string,",
				"          WOPRIORITY as integer,",
				"          STATUSDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          EFFECTIVE_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LABTRANS_ID,",
				"          WONUM,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          CRAFT_ID,",
				"          LAB_ID,",
				"          PAYRATE,",
				"          STARTDATETIME,",
				"          FINISHDATETIME,",
				"          REGULARHRS,",
				"          TRANSDATE,",
				"          GOVTWONUM,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          DESCRIPTION,",
				"          WOPRIORITY,",
				"          STATUSDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT",
				"     )) ~> sinkLabtrans",
				"alterRowUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LABTRANS_ID as integer,",
				"          WONUM as string,",
				"          SITE_ID as integer,",
				"          LOCATION_ID as integer,",
				"          CRAFT_ID as integer,",
				"          LAB_ID as integer,",
				"          PAYRATE as decimal(18,2),",
				"          STARTDATETIME as timestamp,",
				"          FINISHDATETIME as timestamp,",
				"          REGULARHRS as decimal(18,9),",
				"          TRANSDATE as timestamp,",
				"          GOVTWONUM as string,",
				"          ASSETNUM as string,",
				"          STATUS as string,",
				"          JPNUM as string,",
				"          WORKTYPE as string,",
				"          DESCRIPTION as string,",
				"          WOPRIORITY as integer,",
				"          STATUSDATE as timestamp,",
				"          TARGCOMPDATE as timestamp,",
				"          REPORTDATE as timestamp,",
				"          PMDUEDATE as date,",
				"          TARGSTARTDATE as timestamp,",
				"          ESTDUR as decimal(18,9),",
				"          WOGROUP as string,",
				"          PERSONGROUP as string,",
				"          PMNEXTDUEDATE as date,",
				"          PMNUM as string,",
				"          EFFECTIVE_DT as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['LAB_ID'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LABTRANS_ID = ExistLABTRANS_ID,",
				"          WONUM,",
				"          SITE_ID,",
				"          LOCATION_ID,",
				"          CRAFT_ID,",
				"          LAB_ID = ExistLAB_ID,",
				"          PAYRATE,",
				"          STARTDATETIME,",
				"          FINISHDATETIME,",
				"          REGULARHRS,",
				"          TRANSDATE,",
				"          GOVTWONUM,",
				"          ASSETNUM,",
				"          STATUS,",
				"          JPNUM,",
				"          WORKTYPE,",
				"          DESCRIPTION,",
				"          WOPRIORITY,",
				"          STATUSDATE,",
				"          TARGCOMPDATE,",
				"          REPORTDATE,",
				"          PMDUEDATE,",
				"          TARGSTARTDATE,",
				"          ESTDUR,",
				"          WOGROUP,",
				"          PERSONGROUP,",
				"          PMNEXTDUEDATE,",
				"          PMNUM,",
				"          EFFECTIVE_DT",
				"     )) ~> sinkUpdateLabtrans"
			]
		}
	}
}